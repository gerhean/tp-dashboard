[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T09-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T09-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* This is **Software Engineering (SE) project to help students plan and schedule workouts**.\u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  Example usages:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * as a tracker to help students track their BMI"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * as a planner to help students plan their workout sessions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* The project simulates an ongoing software project for a desktop application (called _fitNUS_) used for helping students plan workouts."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  * It comes with a **reasonable level of user and developer documentation**."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* It is named `fitNUS`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "khor-jingqian": 1,
      "Licheng-Wu": 7
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    archiveName \u003d \u0027fitnus.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "run {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "-": 73,
      "khor-jingqian": 2
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "### Tan Xi Zhe"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "\u003cimg src\u003d\"images/patricktan6.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "[[github](http://github.com/patricktan6)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "[[portfolio](team/patricktan6.md)]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### Khor Jing Qian"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cimg src\u003d\"images/khor-jingqian.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[[github](http://github.com/khor-jingqian)] [[portfolio](team/khor-jingqian.md)]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* Responsibilities: Deliverables and deadlines"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "### Wu Licheng"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003cimg src\u003d\"images/licheng-wu.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "[[github](https://github.com/Licheng-Wu)]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "[[portfolio](team/licheng-wu.md)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### Iqbal Imran"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003cimg src\u003d\"images/iqbxl.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "[[github](http://github.com/iqbxl)]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "[[portfolio](team/iqbxl.md)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "### Nicholas Yeo"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "\u003cimg src\u003d\"images/nicholasyeo.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "[[github](http://github.com/nicholasyeo)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "[[portfolio](team/nicholasyeo.md)]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* Responsibilities: Code Quality"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 5,
      "patricktan6": 5,
      "nicholasyeo": 5,
      "-": 33,
      "khor-jingqian": 4,
      "Licheng-Wu": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "title: fitNUS - Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "## **Introduction**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "fitNUS is tailored for **NUS students** that are interested in staying healthy and keeping fit. It is suitable for **all"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "fitness levels** and is equipped with a **customisable timetable** for you to manage your time wisely and slot in your"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "workout routines with ease."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "This developer guide is for users who are interested in our design philosophy and for future developers of fitNUS."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/docs/diagrams) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `HomePanel`, `TimetablePanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "User inputs will influence how fitNUS UI will look like. For example, adding calories by `calorie_add c/1500` will cause the CalorieGraph UI component to update in real time."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. `Logic` uses the `FitNusBookParser` class to parse the user command."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a new Exercise into fitNUS)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"exercise_delete 1\")` API call."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `ExerciseDeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* stores fitNUS data."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* exposes an unmodifiable"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * `ObservableList\u003cExercise\u003e`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * `ObservableList\u003cRoutine\u003e`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * `ObservableList\u003cLesson\u003e`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * `ObservableList\u003cBody\u003e`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * `ObservableList\u003cDailyCalorie\u003e`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `FitNus`, which `Person` references. This allows `FitNus` to only require one `Tag` object per unique `Tag`, instead of each `Lesson` or `Exercise` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T09-2/tp/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* can save the fitNUS data in json format and read it back."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### Create routine"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "The feature to create a routine in fitNUS is implemented using `RoutineCreateCommand` class, which inherits from"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "`Command` class. The argument is supplied after parsing the user input by the `RoutineCreateCommandParser` class."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "It is important to note that the Routine object in question must not already exist within fitNUS."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Given below is an example usage scenario and how the routine-creating mechanism behaves at each step."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Step 1:**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "The user types into fitNUS `routine_create r/Leg Workout`."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Step 2:**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "This input is passed to `LogicManager` as a String and from there, the input is parsed by the `parseCommand`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "method of `FitNusParser`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Step 3:**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`parseCommand` identifies that this is a command to create a Routine, so it calls the `parse` method of"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "`RoutineCreateCommandParser` on the input."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Step 4:**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Within `parse`, the name of the routine is produced by `ParserUtil` parsing the given argument. This method then creates"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "the Routine object and returns it as an argument in the `RoutineCreateCommand`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Step 5:**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "`LogicManager` then calls the `execute` method of this returned `RoutineCreateCommand` to add the Routine into fitNUS."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Step 6:**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`LogicManager` then saves the updated fitNUS data to the storage."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Given below is the sequence diagram showing how the routine creation command is executed:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Routine Create](./images/RoutineAddSequenceDiagram.png)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Given below is the activity diagram a user will go through when creating a routine in fitNUS. It shows clearly the input checks at every step and the different errors that will be thrown. "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Routine create activity](./images/RoutineCreateActivityDiagram.png)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#### Design Considerations"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "##### Aspect: Whether to create a Routine and add exercises simultaneously in the same command"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* **Alternative 1 (Current implementation)**: No, there should be a seperate command to add Exercise into Routine"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * Pros: Better abstraction by seperating the logic of creating a Routine, and storing Exercise in Routine."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * Cons: User has to input another command."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* **Alternative 2**: Yes, have a single command to create a Routine and add multiple Exercise to it at the same time."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * Pros: Saves time for user, typing one long chain."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * Cons: Increases coupling between Routine and Exercise."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Alternative 1 was chosen for the command to add an Exercise to a Routine to be seperate. This is due to the fact that"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " we wanted to adhere to the Seperation of Concerns Principle. Even though, it comes at the cost of user\u0027s time, we"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  believe that the trade-off to gain lower coupling and prevent ripple effects across fitNUS."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "##### Aspect: Whether to implement Tag for Routine"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* **Alternative 1 (Current implementation)**: No, there is no Tag function for Routine."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * Pros: UI is a lot more concise and condensed.."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * Cons: User might not understand everything about a Routine."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* **Alternative 2**: Yes, we should implement a Tag feature for Routine."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * Pros: Allow users to understand more about the Routine at a glance."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * Cons: Cluttering of the UI."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Alternative 1 was chosen to not support Tag for Routine. The UI has a lot of information at the moment, and adding Tag"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " to Routine would only serve to confuse the user. Furthermore, users are able to glean which Exercise is in the Routine"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  from the UI as of now, and adding Tag would only clutter up the RoutineListCard. A Routine can store many Exercise and"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  this is the more important information to display, over Tag."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### Add Routine to Timetable"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "The `TimetableAddRoutineCommandParser` and `TimetableAddRoutineCommand` classes parse and execute the user input"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "to add a routine to the timetable in fitNUS."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "The `TimetableAddRoutineCommandParser` class takes in the user input and parses them to return a"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`TimetableAddRoutineCommand` object that contains the routine, day and duration. The `TimetableAddRoutineCommand` class"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "then executes the command by storing the slot in the timetable."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Note that for the command to be successful, the routine to be added has to exist in fitNUS."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Given below is an example usage scenario and how the mechanism behaves at each step."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Step 1:**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "The user types into fitNUS `timetable_add_routine r/Leg workout D/Monday T/1600-1800`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Step 2:**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`LogicManager` takes in this input as a String and calls the `parseCommand` method of `FitNusParser` to parse this string."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Step 3:**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`parseCommand` identifies that this is a command add a Routine to Timetable, so it calls the `parse` method of"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`TimetableAddRoutineCommandParser` on the input."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Step 4:**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "The `parse` method calls the necessary methods of `ParserUtil` to parse the given argument and produce the name, day,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "and duration. It uses the name to create the Routine object and returns this object, the day, and the duration as an"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "argument in `TimetableAddRoutineCommand`.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Note that this Routine object is a placeholder, the actual Routine object in fitNUS is yet to be found."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Step 5:**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`LogicManager` calls the `execute` method of this returned `TimetableAddRoutineCommand` to add the Routine into the timetable.\u003cbr\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Note that the `execute` method retrieves the actual Routine object in fitNUS before adding it to the timetable."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Step 6:**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`LogicManager` then saves the updated fitNUS data to the storage."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Given below is the Sequence Diagram for interactions within the Logic component for the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "execute(\"timetable_add_routine r/Leg Workout D/Monday T/1600-1700\") API call."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "![TimetableAddRoutineSequenceDiagram](images/TimetableAddRoutineSequenceDiagram.png)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### Find exercises"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "The find exercises feature is implemented using `FindExercisesCommandParser`, as well as the following command:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* `FindExercisesCommand`, to be executed when the user inputs the command into fitNUS."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "`FindExercisesCommandParser` takes in the user input and parses them to return a FindExercisesCommand containing the"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "corresponding predicate for finding the exercises. When executed, `FindExercisesCommand` will set the predicate of"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "the respective `FilteredList` for exercises in `ModelManager` such that only exercises matching the predicate will be"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "displayed in the list."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Given below is an example usage scenario and how the find exercise mechanism behaves at each step."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Step 1:**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "The user types into fitNUS `find_exercises bench`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Step 2:**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "This input is passed to `LogicManager` as a String and from there, the input is parsed by the `parseCommand`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "method of `FitNusParser`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Step 3:**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "`parseCommand` identifies that this is a command to find exercises, so it calls the `parse` method of"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "`FindExercisesCommandParser` on the input."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Step 4:**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Within `parse`, the keywords to match are added to a `List`, and an `ExerciseNameContainsKeywordsPredicate` object"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "is created based on this list. A `FindExercisesCommand` object is created using this"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "`ExerciseNameContainsKeywordsPredicate` object."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Step 5:**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "`LogicManager` then calls the `execute` method of this returned `FindExercisesCommand`."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Within `execute`, `ModelManager`\u0027s `updateFilteredExerciseList` method is called with the"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "`ExerciseNameContainsKeywordsPredicate` object as its argument. This filters out the relevant exercises."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Step 6:**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "The GUI then lists the filtered exercises."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Given below is the Sequence Diagram for interactions within the Logic component for the execute(\"find_exercises bench\")"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "API call."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "![FindExercisesSequenceDiagram](images/FindExercisesSequenceDiagram.png)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### Delete lesson"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "The delete lesson feature is implemented using `LessonDeleteCommandParser`, as well as the following command:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `LessonDeleteCommand`, to be executed when the user inputs the command into fitNUS."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "`LessonDeleteCommandParser` takes in the user input and parses them to return a `LessonDeleteCommand` object. The"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "`LessonDeleteCommand` class then executes the command by deleting the lesson from the respective `FilteredList` for"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "lessons in `ModelManager`."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Given below is an example usage scenario and how the delete lesson mechanism behaves at each step."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Step 1:**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "The user types into fitNUS `lesson_delete 1`."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Step 2:**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "This input is passed to `LogicManager` as a String and from there, the input is parsed by the `parseCommand`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "method of `FitNusParser`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Step 3:**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "`parseCommand` identifies that this is a command to delete lesson, so it calls the `parse` method of"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "`LessonDeleteCommandParser` on the input."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Step 4:**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Within `parse`, the name of the lesson is produced by `ParserUtil` parsing the given argument. This method then creates"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "the Lesson object."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Step 5:**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "`LogicManager` then calls the `execute` method of this returned `LessonDeleteCommand`."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Within `execute`, `ModelManager`\u0027s `updateFilteredLessonList` method is called. This removes the unwanted lesson."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Step 6:**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "The GUI then lists the deleted lesson."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* has a need to manage their busy schedule"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* interested in fitness, or aspiring to start"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* is an NUS student"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Value proposition**: provide a platform for NUS students of any fitness experience to conveniently plan their workout"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "around their classes."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `* * *`  | student who has no knowledge of working out|view what exercise routines the application has|choose the right one for me"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "| `* * *`  | busy student                               | add workout routines into my schedule | have the time to exercise"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "| `* * *`  | student                                    | delete a workout routine       | keep my schedule up-to-date"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `* * *`  | varsity NUS athlete                        | customise my routine               | better target specific muscle groups"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `* * *`  | health-conscious individual                 | log my BMI              | keep better track of my health./"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `* * *`  | student looking to lose weight                       | keep track of my weekly calorie intake               | visualise my weight loss journey"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `* * *`  | seasoned gym-goer                       | save my routines somewhere              | change my weekly routines with ease if programmes get boring"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `* * *`  | varsity NUS athlete                        | search for keywords in my exercises              | quickly get inspiration for new routines"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `* * *`  | varsity NUS athlete                        | search for keywords in my routines             | get similar inspirations from existing routines that I know of."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `* * *`  | varsity NUS athlete                        | search for keywords in my exercises              | quickly get inspiration for new routines"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `* * `  | health-conscious NUS student                        | know how many calories I burned from my workout               | better keep track of my health"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `* * `  | student just getting into fitness                        | be recommended workouts that are beginner-friendly               | better manage my expectations"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `* * `  | professional NUS bodybuilder                       | keep notes on my workout such as my personal records               | track my progression and plan for future sessions"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `*`  | time conscious student                      | have a timer when I work out             | better plan my time"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `*`  | NUS student                       | check calories of popular food on fitNUS               | keep better records of my macros"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "| `*`  | NUS student                        | know which bus I can take to the nearest gym               | -"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "(For all use cases below, the **System** is the `fitNUS` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Use case 1 (C1): Create a new routine**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "1.  User requests for the current list of routines"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "2.  fitNUS shows the list of routines"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "3.  User requests to create a new routine"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "4.  fitNUS adds that routine to its list of routines"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* 3a. The given routine name already exists."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    * 3a1. fitNUS shows an error message."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Use case 2 (C2): Delete a routine**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "1.  User requests to list routines"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "2.  fitNUS shows a list of routines"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "3.  User requests to delete a specific routine in the list"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "4.  fitNUS deletes the routine"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    * 3a1. fitNUS shows an error message."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Use case 3 (C3): Add exercise to routine**"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "1.  User requests to list routines"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "2.  fitNUS shows a list of routines"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "3.  User adds the exercise to a routine"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* 3a. The given exercise name does not exist."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    * 3a1. fitNUS shows an error message."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* 3b. The given routine name does not exist."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * 3b1. fitNUS shows an error message."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Use case 4 (C4): Delete exercise from routine**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "1.  User requests to list routines"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "2.  fitNUS shows a list of routines"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "3.  fitNUS deletes the exercise"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* 3a. The given exercise to delete is invalid."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    * 3a1. fitNUS shows an error message."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* 3b. The given routine is invalid."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * 3a1. fitNUS shows an error message."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Use case 5 (C5): List all routines in fitNUS**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1.  User requests for all the routines available."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "2.  fitNUS displays all the routines that are available, if there are any."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Use case: View details of a certain routine**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1.  User requests to view a certain routine."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "2.  fitNUS displays all information of the specified routine."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* 1a.   Index given by user is invalid."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * 1a1.  fitNUS shows an error message."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Use case 6 (C6): Add completed routine to schedule**"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "1.  User requests to view current schedule."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "2.  fitNUS shows the user\u0027s schedule for the day."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "3.  User requests to add a specific routine to a specific slot in schedule."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "4.  fitNUS adds the routine to schedule."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* 3a. Routine requested by user does not exist."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    * 3a1. fitNUS shows an error message."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* 3b. The slot to add the routine is invalid."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    * 3b1. fitNUS shows an error message."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* 3c. The slot to add the routine is already in use."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    * 3c1. fitNUS informs the user to input another slot."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Use case 7 (C7): Delete routine from schedule**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "1.  User requests to view current schedule."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "2.  fitNUS shows the user\u0027s schedule for the day."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "3.  User requests to delete a routine from a specific slot in schedule."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "4.  fitNUS deletes the routine from schedule."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* 3a. The slot requested is not assigned to any routine."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    * 3a1. fitNUS informs the user that the slot is empty."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* 3b. The slot requested is invalid."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    * 3b1. fitNUS shows an error message."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Use case 8 (C8): View timetable**"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "1.  User requests to view their timetable."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "2.  fitNUS displays their timetable."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* 1a.   No timetable exists within fitNUS."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    * 1a1.  fitNUS informs the user that there is no timetable to view yet."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Use case 9 (C10): Add Calories**"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1.  User inputs calories increment into fitNUS."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* 1a.   User inputs too large of a number."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * 1a1.  fitNUS informs the user that the input is too large."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* 1b.   User inputs 0."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * 1b1.  fitNUS informs the user that the input is incorrect."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Use case 8 (C10): Minus calories**"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1.  User inputs calories decrement into fitNUS."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* 1a.   User inputs a number larger than the current count."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * 1a1.  fitNUS informs the user that the input will cause the count to be negative."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* 1b.   User inputs 0."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * 1b1.  fitNUS informs the user that the input is incorrect."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Use case 8 (C11): Set height**"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1.  User inputs his/her height into fitNUS."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* 1a.   User inputs an impossibly large number or small number."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * 1a1.  fitNUS informs the user that the input is too large."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* 1b.   User inputs a negative number."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * 1b1.  fitNUS informs the user that the input is incorrect."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Use case 8 (C112): Set weight**"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1.  User inputs his/her weight into fitNUS."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* 1a.   User inputs an impossibly large number or small number."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * 1a1.  fitNUS informs the user that the input is too large."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* 1b.   User inputs a negative number."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * 1b1.  fitNUS informs the user that the input is incorrect."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "4.  The system should respond under a second."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "5.  The system should be able to be used by a fitness novice, in the sense that the fitness terms used in fitNUS should not"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "confuse anyone."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "6. The system should remember the details entered by the user during the session, and be carried forward to the next time."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "7. Schedule should be clear and easy to read for the user, and not display too much information at once."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "8. Calorie graph must be easy to read and understand for all users."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "9. fitNUS GUI must be able to fit any screensize or proportions meaningfully."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with no entries. The window size may not be optimum."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Exiting fitNUS"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    1. Enter `exit` in order to save fitNUS data and close the GUI."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    1. ` exit ` is still an acceptable command, with whitespace before and after."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### Features"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Adding an Exercise"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Prerequisites: Exercise named \"Squats\" must not already exist in fitNUS."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `exercise_add e/Squats t/Leg`\u003cbr\u003e"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Creates an Exercise called \"Squats\" that is tagged with \"Leg\" tag. Success message will be shown."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `exercise_add e/Bicep`\u003cbr\u003e"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Creates an Exercise called \"Bicep\" with no tags. Success message will be shown."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `exercise_add e/GRE@T EXERCISE`\u003cbr\u003e"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Error is thrown due to input not following alphanumeric format. "
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Other incorrect commands to try: `exercise_add`, `exercise_add e/Bicep e/Curls`, `...`\u003cbr\u003e"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Deleting an Exercise"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Prerequisites: Exercise indicated must already exist in fitNUS. In this case, there exist 1 Exercise."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `exercise_delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: First Exercise is deleted from the list. Successful message will be shown."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `routine_delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: No Exercise is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Other incorrect delete commands to try: `exercise_delete`, `exercise_delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Similar to previous. "
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      "
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Finding an Exercise using keywords"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    1.Prerequisites: There must be Exercise existing in fitNUS to search for. In this case, we assume there are 2 named"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \"Squats\" and \"Bench Press\"."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    1. Test case: `exercise_find bench`\u003cbr\u003eExpected: Exercise \"Bench Press\" will be the only Exercise listed in fitNUS."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    Success message will inform user how many exercises were successfully found."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    1. Test case: `exercise_find benc`\u003cbr\u003eExpected: Exercise \"Bench Press\" will be the only Exercise listed in fitNUS."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    Success message will inform user how many exercises were successfully found."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    1. Test case: `exercise_find @`\u003cbr\u003eExpected: No Exercise object will be found, because this is an invalid Name."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Other incorrect delete commands to try: `exercise_find `\u003cbr\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Error message thrown informing you of the correct command format. "
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Editing an existing Exercise"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    1..Prerequisites: There must be an Exercise existing in fitNUS to edit. There is one Exercise named \"Squats\"."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    1. Test case: `exercise_edit 1 e/Barbell Squats`\u003cbr\u003eExpected: Exercise \"Bench Press\" will be renamed to \"Barbell"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    Squats\" and a success message will inform user of the new name."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    1. Test case: `exercise_edit 1 e/Barbell Squats t/Heavy`\u003cbr\u003eExpected: Exercise \"Bench Press\" will be renamed to \"Barbell"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    Squats\" with a tag saying \"Heavy\". A success message will inform user of the new name and tags."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    1. Test case: `exercise_edit 10 e/Good Name`\u003cbr\u003eExpected: Invalid index, no Exercise is edited and an error message"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    will be thrown, explaining the index is invalid."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Other incorrect delete commands to try: `exercise_edit 1 e/Bicep e/Tricep`, `exercise_edit 1 e/Bicep t/Tough"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    t/Hard`\u003cbr\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Error message thrown informing you of the correct command format."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Listing all Exercise"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    1. Test case: `exercise_list`: fitNUS will list out all the Exercise in the Exercise column. Success message will be"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    show."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Adding a Routine"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `routine_create r/Leg Workout`\u003cbr\u003e"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Creates a Routine called \"Leg Workout\""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Other incorrect delete commands to try: `routine_create`, `routine_create r/EXISTING_ROUTINE`, `...`\u003cbr\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Deleting a Routine"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Prerequisites: Routine must already exist in fitNUS. In this case, the first Routine is the one to be deleted."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `routine_delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: First Routine is deleted from the list. Successful message will be shown."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `routine_delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Other incorrect delete commands to try: `routine_delete`, `routine_delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Setting user weight"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `weight w/70`\u003cbr\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Updates user\u0027s weight to 70kg. GUI will reflect this change as well. BMI on GUI will recalculate."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `weight w/300`\u003cbr\u003e"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Weight does not update or change on GUI. Error will be shown for an unrealistic weight for a user."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Other incorrect delete commands to try: `weight w/0`, `weight w/-1`, `...`\u003cbr\u003e"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Setting user height"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `weight h/170`\u003cbr\u003e"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Updates user\u0027s height to 170cm. GUI will reflect this change as well. BMI on GUI will recalculate."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `weight w/370`\u003cbr\u003e"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Height does not update or change on GUI. Error will be shown for an unrealistic height for a user."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Other incorrect delete commands to try: `height w/10`, `height w/-1`, `...`\u003cbr\u003e"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Setting user height"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `weight h/170`\u003cbr\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Updates user\u0027s height to 170cm. GUI will reflect this change as well. BMI on GUI will recalculate."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `weight w/370`\u003cbr\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Height does not update or change on GUI. Error will be shown for an unrealistic height for a user."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Other incorrect delete commands to try: `height w/10`, `height w/-1`, `...`\u003cbr\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Setting user height"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `height h/170`\u003cbr\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Updates user\u0027s height to 170cm. GUI will reflect this change as well. BMI on GUI will recalculate."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `height w/370`\u003cbr\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Height does not update or change on GUI. Error will be shown for an unrealistic height for a user."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Other incorrect delete commands to try: `height w/10`, `height w/-1`, `...`\u003cbr\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Adding calorie count"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `calorie_add c/1500`\u003cbr\u003e"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Increases calorie count for today by 1500. GUI will reflect this change as well in Calorie Graph."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `calorie_add c/2147483648`\u003cbr\u003e"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Error will be thrown because this value is bigger than what Java can handle. Calorie Graph and today\u0027s calorie count will not update."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Other incorrect delete commands to try: `calorie_add c/-1`, `calorie_add c/0`, `...`\u003cbr\u003e"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Deducting calorie count"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `calorie_minus c/1500`\u003cbr\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Decreases calorie count for today by 1500. GUI will reflect this change as well in Calorie Graph."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Test case: `calorie_minus c/2147483648`\u003cbr\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      Expected: Error will be thrown because this value is bigger than what Java can handle. Calorie Graph and today\u0027s calorie count will not update."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   1. Other incorrect delete commands to try: `calorie_add c/-1`, `calorie_add c/0`, `...`\u003cbr\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Dealing with missing data files"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    1. To simulate a missing data file, delete the save file named `fitnus.json` under `./data/`."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    1. Open fitNUS jar file by either command line or double-clicking jar file.\u003cbr\u003eExpected: fitNUS with no data inside."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Dealing with corrupted data files"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    1. To simulate a corrupted data file, there are several ways to do this. The easiest method would be to change the"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    count to negative for any day or changing the value of the pre-configured height/weight."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    1. If you ran fitNUS by command line, you will receive a warning that there has been a corruption and fitNUS will"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    now clear the data and restart, deleting all previous data."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    "
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "## Appendix: Effort"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### 1. Overall efforts"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Adapting AB3 to fit our vision for fitNUS was no small task. This was everyone\u0027s first introduction to a brown-field"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "software engineering project and the scope and depth of AB3 took everyone by surprise. We faced a lot of difficulties"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "juggling both understanding and dissecting the code, as well as adhering to the proper workflow arrangement. On top of"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "refactoring Person into Exercise, we had to find an elegant solution to the other classes of fitNUS, while ensuring low"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "coupling and abstraction."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### 2. Exercises and Routines"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "We knew that we wanted to center fitNUS around Exercise. Intertwining of Exercise with Routine, Timetable and the other"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "classes proved to be extremely challenging. Whenever an Exercise was edited or removed, relevant Routines will have to"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "changed and similarly edited. We went through several iterations of refactoring these classes due to"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "design issues as we learnt more about design principles in the course and defensive programming. "
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### 3. User Interface"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "We envisioned fitNUS to be more of a \"visual\" product, where users will feel that the product is intuitive to use and"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "the interface is lean. We are proud and sure that we have achieved this goal, despite not knowing any JavaFX before"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "CS2103T.  We are especially proud of the calorie graph that is on the homepage that dynamically updates as the user"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "enters calories as well as the timetable tab that is able to concisely display the user\u0027s routines and lessons."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### 4. Conclusion"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "No matter how much you plan for a project, things will always hiccup. "
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "We had a lot of unique ideas and features that we wish we could have implemented, but due to the unforeseen workload and the already"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "large scale of fitNUS, we had to shed some really good ideas. Nevertheless, we are extremely proud of what we have"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "accomplished with fitNUS. We can say without a doubt, that this was definitely the most challenging and the most"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "rewarding module yet."
      }
    ],
    "authorContributionMap": {
      "iqbxl": 54,
      "nicholasyeo": 94,
      "-": 272,
      "khor-jingqian": 393,
      "Licheng-Wu": 105
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "title: fitNUS - User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "By: `Team T09-2` Since: `September 2020`"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Table of Contents:**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "------------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "fitNUS is tailored for **NUS students** who are interested in staying healthy and keeping fit. It is suitable for **all"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "fitness levels** and is equipped with a customisable **Timetable** for you to manage your time wisely and slot in your"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "workout routines with ease. fitNUS also displays a **Calorie Graph** to track your daily caloric intake and expenditure."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "The application is extremely easy to use, all you have to do is type in your commands in the command box, and the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "information will be reflected in the user interface for ease of viewing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "This User Guide aims to showcase the features that fitNUS provides, as well as **step-by-step instructions**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "regarding how to make use of these features."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "## 2. Additional Information"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Please note the following formatting and notations that you will encounter as you read on about fitNUS features:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Formatting | Meaning | Examples"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "--------|-------|-----------"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "e/EXAMPLE | The character before the forward slash (\"/\") is a prefix, and words in **UPPER_CASE** after the slash are the parameters to be supplied by you | In `exercise_add e/EXERCISE`, `EXERCISE` is a parameter which can be used as `exercise_add e/Deadlift`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "[ x/X ] | Square brackets signify optional fields that you can consider using | `exercise_add e/EXERCISE [t/TAG]` can be used as `exercise_add e/Deadlift t/glutes` or `exercise_add e/Deadlift`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "`...` | Fields which are followed by `...` indicate that they can be used more than once | `[t/TAG]...` can be used as `t/first t/important t/form` etc."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Order of parameters | Valid parameters can be provided in any order unless one of the parameters is `INDEX`, in which case `INDEX` must be the first parameter | In `exercise_edit INDEX [e/EXERCISE] [t/TAG]...`, `exercise_edit INDEX [t/TAG]... [e/EXERCISE]` is also accepted. However, `exercise_edit [e/EXERCISE] INDEX [t/TAG]...` is not allowed"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "`mark-up` | Grey highlight of a word signifies the actual input that you can use | You can type `exercise_delete 1` in the command box and press *Enter* to execute the command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Call Outs | Red boxes are drawn up around areas of interest to show a comparison before inputting a command and the result of a successful command outcome. Blue boxes are drawn up around expected input user commands to achieve those outcomes | -"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Check out the list below to get started on using this User Guide."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* If this is your first time using fitNUS, refer to the [Quick Start](#3-quick-start) for step-by-step instructions on how"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "to download and set up fitNUS on your Computer."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* If you want to explore the different features of fitNUS, go to the [Commands](#4-commands) section."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* If you are familiar with fitNUS or want to do a quick lookup of all the available commands, go to the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "[Command Summary](#5-command-summary) section."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "## 3. Quick Start"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Download the latest `fitNUS.jar` from [here](https://github.com/AY2021S1-CS2103T-T09-2/tp/releases)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your fitNUS."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the one [above](#1-introduction) should appear in a few seconds."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "1. Type your desired command in the command box and press *Enter* to execute it. To verify that fitNUS is working for you,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "here are some sample commands you can try:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "   * **`exercise_add`**`e/Curls t/Upper` : Creates an Exercise named \"Curls\" with an \"Upper\" tag."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "   * **`routine_create`**`r/Upper Body Session` : Creates a Routine named \"Upper Body Session\"."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "   * **`routine_add_exercise `**`r/Upper Body Session e/Curls` : Adds an Exercise named \"Curls\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "   to a Routine named \"Upper Body Session\"."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "   * **`timetable_add_routine`**`r/Upper Body Session D/Monday T/1600-1800` : Adds the Routine \"Upper Body Session\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "   to your timetable on Monday at 1600HRS - 1800HRS."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "1. Now that fitNUS is running as expected, you can kick-start your fitness journey and start working towards your goals!"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Experience first-hand the convenience that fitNUS brings to your life by exploring the various commands yourself."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "   * Learn more about the specific details of each command [here](#4-commands)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "   * A complete summary of all commands is available [here](#5-command-summary) in table format."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "   * A glossary is available [here](#7-glossary) at the end of the guide to explain some key terms."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "## 4. Commands"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "In this section, each command will be explained in greater depth. Illustrations are used to allow visual aid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "The purpose of each command, how it is formatted and usage examples are found in the subsequent subsections."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### 4.1 Exercise"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "An Exercise is the foundation of fitNUS. It represents a certain exercise that you can perform and you can glean more"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "information about it from the tags under it."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.1.1 Create new exercise : `exercise_add`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Creates a new exercise in fitNUS with the given exercise name."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `exercise_add e/EXERCISE [t/TAG]...`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `exercise_add e/Pull Ups t/Body` Creates a new exercise with the name \"Pull Ups\" and tag \"Body\"."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before adding an exercise:**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Exercise Add Before](./images/exercise_add_before.png)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that there are no exercises currently listed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of adding an exercise \"Pull Ups\":**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Exercise Add After](./images/exercise_add_after.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that there is exactly 1 exercise listed after the update."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.1.2 Delete exercise : `exercise_delete`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Deletes an existing exercise in fitNUS corresponding to the given index."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Format: `exercise_delete INDEX`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* `exercise_delete 1` Deletes the exercise at index 1 in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "**Before deleting the first exercise:**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Exercise Delete Before](./images/exercise_delete_before.png)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that there is 1 exercise currently listed."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of deleting the first exercise \"Pull Ups\":**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Exercise Delete After](./images/exercise_delete_after.png)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that there are no exercises listed after the update."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.1.3 Edit exercise : `exercise_edit`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Edits the details of the exercise identified by the index number used in the displayed exercise list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Existing values will be overwritten by the input values."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `exercise_edit INDEX [e/EXERCISE] [t/TAG]...`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `exercise_edit 3 e/Squats t/Lower` Edits the exercise at index 3 in the list to the name \"Squats\" and tag \"Lower\"."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before editing the third exercise:**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Exercise Edit Before](./images/exercise_edit_before.png)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that there are 3 exercises currently listed."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of editing the third exercise to \"Squats\":**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Exercise Edit After](./images/exercise_edit_after.png)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that the third exercise is now \"Squats\" with tag \"Lower\"."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.1.4 Find exercise : `exercise_find`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Finds all exercises in fitNUS whose names contain all of the specified keywords."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `exercise_find KEYWORD [MORE_KEYWORDS]...`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `exercise_find bench` Lists all exercises with names containing \"bench\" keyword."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before finding exercises with \"bench\" keyword:**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Exercise Find Before](./images/exercise_find_before.png)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that there are 3 exercises currently listed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of finding exercises with \"bench\" keyword:**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Exercise Find After](./images/exercise_find_after.png)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that there is only 1 exercise listed which contains the keyword \"bench\"."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.1.5 List exercise : `exercise_list`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "After finding a certain exercise, you may want to view all the exercises registered in fitNUS again."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "This command lists all existing exercises in fitNUS for you to view."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `exercise_list`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `exercise_list` Displays a list of all exercises in fitNUS."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Before listing all exercises:**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Exercise List Before](./images/exercise_list_before.png)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that you are viewing only 1 exercise as of now if you followed from the previous `exercise_find bench` example."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of listing all exercises:**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Exercise List After](./images/exercise_list_after.png)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that all the exercises are listed again."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### 4.2 Routine"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Routine is the next building block in fitNUS. It is a collection of Exercise items, and you can customise a"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Routine however you want to, by adding or deleting Exercises from it. You will be able to add Routines to your"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Timetable, but we will cover more of this later."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.2.1 Create new routine : `routine_create`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Creates a new routine in fitNUS with the given routine name."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `routine_create r/ROUTINE`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* `routine_create r/Leg Workout` Creates a new routine with the name \"Leg Workout\"."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before adding a routine:**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Routine Create Before](./images/routine_create_before.png)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that there are no routines currently listed."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Successful outcome of creating a routine \"Leg Workout\":**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Routine Create After](./images/routine_create_after.png)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that there is exactly 1 routine listed after the update."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.2.2 Delete routine : `routine_delete`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Deletes an existing routine in fitNUS corresponding to the given index."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Format: `routine_delete INDEX`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `routine_delete 1` Deletes the routine with index 1 in the list."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before deleting the first routine:**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Routine Delete Before](./images/routine_delete_before.png)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that there is 1 routine currently listed."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of deleting the first routine \"Leg Workout\":**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Routine Delete After](./images/routine_delete_after.png)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that there are no routines listed after the update."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.2.3 Find routine : `routine_find`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Finds all routines in fitNUS whose names contain all of the specified keywords."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `routine_find KEYWORD [MORE_KEYWORDS]...`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `routine_find upper body` Lists all routines with names containing \"upper\" and \"body\" keywords."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before finding routines with \"upper\" and \"body\" keywords:**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Routine Find Before](./images/routine_find_before.png)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that there are 2 routines currently listed."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of finding routines with \"upper\" and \"body\" keywords:**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Routine Find After](./images/routine_find_after.png)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that there is only 1 routine listed which contains the keywords \"upper\" and \"body\"."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.2.4 List routine : `routine_list`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "After finding a certain routine, you may want to view all the routines registered in fitNUS again."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "This command lists all existing routines in fitNUS for you to view."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `routine_list`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `routine_list` Displays a list of all routines in fitNUS."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before listing all routines:**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Routine List Before](./images/routine_list_before.png)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that you are viewing only 1 routine as of now if you followed from the previous `routine_find upper body` example."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of listing all routines:**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Routine List After](./images/routine_list_after.png)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that all the routines are listed again."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.2.5 Add exercise to routine : `routine_add_exercise`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Adds an existing exercise to a specific routine in fitNUS."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `routine_add_exercise r/ROUTINE e/EXERCISE`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `routine_add_exercise r/Leg Workout e/Squats` Adds an exercise named \"Squats\" to the routine \"Leg Workout\"."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before adding \"Squats\" to \"Leg Workout\":**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Routine Add Exercise Before](./images/routine_add_exercise_before.png)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that you are viewing 2 routines as of now if you followed from the previous `routine_list` example."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Additionally, we have pre-added an exercise \"Squats\" using `exercise_add e/Squats` to be able to add an exercise to a routine."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of adding \"Squats\" to \"Leg Workout\":**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Routine Add Exercise After](./images/routine_add_exercise_after.png)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that \"Squats\" now belongs to \"Leg Workout\" as a tagging."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.2.6 Delete exercise from routine : `routine_delete_exercise`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Removes an exercise from a specific routine in fitNUS."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `routine_delete_exercise r/ROUTINE e/EXERCISE`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `routine_delete_exercise r/Leg Workout e/Squats` Deletes the exercise \"Squats\" from the routine \"Leg Workout\"."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before removing \"Squats\" from \"Leg Workout\":**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Routine Delete Exercise Before](./images/routine_delete_exercise_before.png)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that \"Squats\" currently belongs to \"Leg Workout\" as a tagging."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of removing \"Squats\" from \"Leg Workout\":**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Routine Delete Exercise After](./images/routine_delete_exercise_after.png)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note how \"Squats\" is no longer found under \"Leg Workout\" as a tagging."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#### 4.2.7 View routine details : `routine_view`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Views a certain routine in fitNUS indicated by the index."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Format: `routine_view INDEX`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* `routine_view 2` Views the routine at index 2 in the list."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before viewing the second routine:**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Routine View Before](./images/routine_view_before.png)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that there are 2 routines currently listed."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of viewing the second routine:**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Routine View After](./images/routine_view_after.png)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that only the routine \"Upper Body Session\" which was at the second index is listed."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### 4.3 Lesson"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Similar to Routines, you can add Lessons to your Timetable. Both Lessons and Routines represent the essential items you"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "need to be able to start building your customisable Timetable and never forget another training session again!"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.3.1 Create new lesson : `lesson_add`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Creates a new lesson in fitNUS with the given lesson name."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `lesson_add n/LESSON [t/TAG]...`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `lesson_add n/CS2100 t/priority t/homework` Creates a new lesson with the name \"CS2100\""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "and tags \"priority\" and \"homework\"."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before adding a lesson:**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Lesson Add Before](./images/lesson_add_before.png)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that there are no lessons currently listed."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Successful outcome of adding a lesson \"CS2100\":**"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Lesson Add After](./images/lesson_add_after.png)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that there is exactly 1 lesson listed after the update."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.3.2 Delete lesson : `lesson_delete`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Deletes an existing lesson in fitNUS corresponding to the given index."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Format: `lesson_delete INDEX`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `lesson_delete 1` Deletes the lesson at index 1 in the list."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before deleting the first lesson:**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Lesson Delete Before](./images/lesson_delete_before.png)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that there is 1 lesson currently listed."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of deleting the first lesson \"CS2100\":**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "![Lesson Delete After](./images/lesson_delete_after.png)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that there are no lessons listed after the update."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.3.3 Edit lesson : `lesson_edit`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Edits the details of the lesson identified by the index number used in the displayed lesson list."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Existing values will be overwritten by the input values."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `lesson_edit INDEX [n/LESSON] [t/TAG]...`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `lesson_edit 3 n/MA1521 t/core` Edits the lesson at index 3 in the list to the name \"MA1521\" and tag \"core\"."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before editing the third lesson:**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Lesson Edit Before](./images/lesson_edit_before.png)"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that there are 3 lessons currently listed."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of editing the third lesson to \"MA1521\":**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Lesson Edit After](./images/lesson_edit_after.png)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that the third lesson is now \"MA1521\" with tag \"core\"."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.3.4 Find lesson : `lesson_find`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Finds all lessons in fitNUS whose names contain any of the specified keywords."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `lesson_find KEYWORD [MORE_KEYWORDS]...`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `lesson_find CS GER` Lists all lessons with names containing \"CS\" or \"GER\" keywords."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before finding lessons with \"CS\" or \"GER\" keywords:**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Lesson Find Before](./images/lesson_find_before.png)"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that there are 3 lessons currently listed."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of finding lessons with \"CS\" or \"GER\" keywords:**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Lesson Find After](./images/lesson_find_after.png)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that there are 2 lessons listed which contains the keyword \"CS\" or \"GER\"."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.3.5 List lesson : `lesson_list`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "After finding a certain lesson, you may want to view all the lessons registered in fitNUS again."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "This command lists all existing lessons in fitNUS for you to view."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `lesson_list`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `lesson_list` Displays a list of all lessons in fitNUS."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before listing all lessons:**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Lesson List Before](./images/lesson_list_before.png)"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that you are viewing 2 lessons as of now if you followed from the previous `lesson_find CS GER` example."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of listing all lessons:**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Lesson List After](./images/lesson_list_after.png)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that all the lessons are listed again."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### 4.4 Timetable"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "You can add both Routines and Lessons to your timetable to get an overview of your week. You can navigate between the"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Timetable and Homepage display by clicking on the corresponding tabs found at the top left of the interface."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "The following illustration shows a pre-filled view of the Timetable:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Timetable View](./images/timetable_view.png)"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Any changes made to existing routines or lessons that have already been added as a slot in the Timetable will be"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "reflected automatically on the Timetable. In this subsection, we will explore the timetable feature and its related commands."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.4.1 Add routine to timetable : `timetable_add_routine`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Adds a complete routine into the timetable in fitNUS."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `timetable_add_routine r/ROUTINE D/DAY T/TIME`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `timetable_add_routine r/Leg Workout D/Monday T/1600-1800`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Adds routine \"Leg Workout\" to timetable on Monday, 1600-1800."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before adding routine \"Leg Workout\" to Timetable:**"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Timetable Add Routine Before](./images/timetable_add_routine_before.png)"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that there are no Monday slots initially. Additionally, we have pre-added a routine \"Leg Workout\" using"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "`routine_create r/Leg Workout` to be able to add a routine to the timetable."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of adding routine \"Leg Workout\" to Timetable:**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Timetable Add Routine After](./images/timetable_add_routine_after.png)"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that a routine slot can be seen now on Monday."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.4.2 Add lesson to timetable : `timetable_add_lesson`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Adds a lesson into the timetable in fitNUS."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `timetable_add_lesson n/LESSON D/DAY T/TIME`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `timetable_add_lesson n/CS2103T D/Wednesday T/1200-1400`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Adds lesson \"CS2103T\" to timetable on Wednesday, 1200-1400."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before adding lesson \"CS2103T\" to Timetable:**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Timetable Add Lesson Before](./images/timetable_add_lesson_before.png)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that there are no Wednesday slots initially. Additionally, we have pre-added a lesson \"CS2103T\" using"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "`lesson_add n/CS2103T` to be able to add a lesson to the timetable."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of adding lesson \"CS2103T\" to Timetable:**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Timetable Add Lesson After](./images/timetable_add_lesson_after.png)"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that a lesson slot can be seen now on Wednesday."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.4.3 Delete routine or lesson from schedule : `timetable_delete_slot`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Deletes a routine or lesson from the timetable in fitNUS."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `timetable_delete_slot D/DAY T/TIME`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `timetable_delete_slot D/Monday T/1600-1800`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Deletes the routine or lesson scheduled on Monday, 1600-1800."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before removing slot from Timetable:**"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Timetable Delete Slot Before](./images/timetable_delete_slot_before.png)"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that there are 2 separate slots on the Timetable. "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of removing slot from Timetable:**"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Timetable Delete Slot After](./images/timetable_delete_slot_after.png)"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that the routine slot on Monday is removed from the Timetable."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### 4.5 BMI"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "fitNUS allows you to record your height and weight in order to better keep track of the progression of your health"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "journey. You BMI will be displayed under the BMI Metrics section once you have updated the 2 parameters in the command box."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.5.1 Add or edit height : `height`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Adds the specified height, in centimetres, to fitNUS."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "Format: `height h/HEIGHT`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `height h/170` Adds or edits the height of the user, which is 170 cm."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before inputting \"170\" cm:**"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Add Height Before](./images/height_before.png)"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice how the default height is set to 160 cm before the change. "
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of inputting \"170\" cm:**"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Add Height After](./images/height_after.png)"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note the updated height of 170 cm after the change."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.5.2 Add or edit weight : `weight`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Adds the specified weight, in kilograms, to fitNUS."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "Format: `weight w/WEIGHT`"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `weight w/72.8` Adds or edits the weight of the user, which is 72.8 kg."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before inputting \"72.8\" kg:**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Add Weight Before](./images/weight_before.png)"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice how the default weight is set to 45 kg before the change."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of inputting \"72.8\" kg:**"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Add Weight After](./images/weight_after.png)"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note the updated weight of 72.8 kg after the change. Also, since both height and weight parameters have been updated,"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "the current BMI is now up-to-date at 25.19"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### 4.6 Calorie"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "You can keep track of your daily caloric intake and expenditure by inputting the values in the command box."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "You can add or deduct a specified amount from your current calorie count. All successful modifications will be"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "automatically reflected in the Calorie Graph on the Home tab."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.6.1 Add calories : `calorie_add`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Adds the specified calorie amount to fitNUS."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `calorie_add c/CALORIE`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `calorie_add c/1500` Adds 1500 calories to today\u0027s sum."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before adding \"1500\" calories:**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Calorie Add Before](./images/calorie_add_before.png)"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that the Calorie Graph has no data points prior to change."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of adding \"1500\" calories:**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Calorie Add After](./images/calorie_add_after.png)"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that the current calorie count now stands at 1500."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.6.2 Deduct calories : `calorie_minus`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Deducts the specified calorie amount from today\u0027s sum."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `calorie_minus c/CALORIE`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `calorie_minus c/600` Deducts 600 calories from today\u0027s sum."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before deducting \"600\" calories:**"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Calorie Minus Before](./images/calorie_minus_before.png)"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that the current calorie count stands at 1500 prior to change."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of deducting \"600\" calories:**"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Calorie Minus After](./images/calorie_minus_after.png)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that the current calorie count now stands at 900."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### 4.7 Miscellaneous"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "There are some additional commands that you can use in fitNUS that are not linked to any of our features. These commands"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "include `help`, `clear` and `exit`."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.7.1 Help: `help`"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Shows a brief description of all possible commands. Links you to the User Guide where there is a comprehensive guide of"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "the program usage instructions in fitNUS. The link will appear in a pop-up."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `help` Shows a scrollable full command list."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before inputting \"help\":**"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Help](./images/help_before.png)"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of inputting \"help\":**"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Help](./images/help_after.png)"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note how a pop-up window appears containing a list of 27 commands that fitNUS supports."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Alternatively, use a keyword to search for a group of commands."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "The following depicts what would happen if you chose to streamline your search to a certain keyword."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Format: `help [COMMAND_KEYWORD]`"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `help timetable` Shows all the commands containing the word \"timetable\"."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before inputting \"help timetable\":**"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Help](./images/help_keyword_before.png)"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of inputting \"help timetable\":**"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Help](./images/help_keyword_after.png)"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note how a pop-up window appears containing 3 commands that contain the word \"timetable\"."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.7.2 Clear: `clear`"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Clears all data entries from fitNUS."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* `clear` Clear all data entries from fitNUS."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Before clearing data:**"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Clear Before](./images/clear_before.png)"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Notice that fitNUS currently displays some exercises, routines and lessons."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Successful outcome of clearing data:**"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "![Clear After](./images/clear_after.png)"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Note that all data entries have been cleared, the Calorie Graph shows no data points and the BMI Metrics have returned to default settings."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### 4.7.3 Exit: `exit`"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Saves fitNUS data and terminates the application."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### 4.8 Saving the data"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Data in fitNUS is saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### 5.1 Exercise"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "--------|-------|-----------"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Create Exercise** | `exercise_add e/EXERCISE [t/TAG]...` | `exercise_add e/Bench Press t/Upper`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Delete Exercise** | `exercise_delete INDEX` | `exercise_delete 1`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Edit Exercise** | `exercise_edit INDEX [e/EXERCISE] [t/TAG]...` | `exercise_edit 3 e/Squats t/Lower`"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Find Exercise** | `exercise_find KEYWORD [MORE_KEYWORDS]...` | `exercise_find Bench`"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**List Exercise** | `exercise_list` | `exercise_list`"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### 5.2 Routine"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "--------|-------|-----------"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Create Routine** | `routine_create r/ROUTINE` | `routine_create r/Leg Day Session`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Delete Routine** | `routine_delete INDEX` | `routine delete 5`"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Find Routine** | `routine_find KEYWORD [MORE_KEYWORDS]...` | `routine_find upper body`"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**List Routine** | `routine list` | `routine_list`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Add Exercise to Routine** | `routine_add_exercise r/ROUTINE e/EXERCISE` | `routine_add_exercise r/Leg Day Session e/Squats`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Delete Exercise from Routine** | `routine_delete_exercise r/ROUTINE e/EXERCISE` | `routine_delete_exercise r/Leg Day Session e/Squats`"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**View Routine details** | `routine_view INDEX` | `routine_view 2`"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### 5.3 Lesson"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "--------|-------|-----------"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Create Lesson** | `lesson_add n/LESSON [t/TAG]...` | `lesson_add n/CS2100 t/priority t/homework`"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**Delete Lesson** | `lesson_delete INDEX` | `lesson_delete 1`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Edit Lesson** | `lesson_edit INDEX [n/LESSON] [t/TAG]...` | `lesson_edit 3 n/MA1521 t/core`"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Find Lesson** | `lesson_find KEYWORD [MORE_KEYWORDS]...` | `lesson_find CS GER`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**List Lesson** | `lesson_list` | `lesson_list`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### 5.4 Timetable"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "--------|-------|-----------"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Add Routine to Timetable** | `timetable_add_routine r/ROUTINE D/DAY T/TIME` | `timetable_add_routine r/Leg Day Session D/Monday T/1600-1800`"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Add Lesson to Timetable** | `timetable_add_lesson n/LESSON D/DAY T/TIME` | `timetable_add_lesson n/CS2103T D/Tuesday T/1200-1400`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Delete Routine or Lesson from Timetable** | `timetable_delete_slot D/DAY T/TIME` | `timetable_delete_slot D/Monday T/1600-1800`"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### 5.5 BMI"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "--------|-------|-----------"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Add or edit Height** | `height h/HEIGHT` | `height h/170.5`"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Add or edit Weight** | `weight w/WEIGHT` | `weight w/72.8`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### 5.6 Calorie"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "--------|-------|-----------"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Add Calories** | `calorie_add c/CALORIE` | `calorie_add c/1000`"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Deduct Calories** | `calorie_minus c/CALORIE` | `calorie_minus c/200`"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### 5.7 Miscellaneous"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "Action | Format | Examples"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "--------|-------|-----------"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Link to User Guide** | `help` | `help`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Clear all data entries from fitNUS** | `clear` | `clear`"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Save and exit fitNUS** | `exit` | `exit`"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "## 6. FAQ"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous fitNUS home folder."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Q**: How can I save the data I keyed into fitNUS?"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**A**: Data is automatically saved into the computer after you input any command that changes the data. Manual saving is not needed."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "## 7. Glossary"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Application**: The fitNUS program you are using"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**BMI**: Body Mass Index is a convenient measurement which reflects an individual\u0027s health"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Calorie**: Measures how much energy your body can obtain from consuming it"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Command**: Instruction to be performed by fitNUS to achieve a desired result"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Data Entry**: Any inputted data or information such as exercise, routine or lesson etc"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Exercise**: The physical activity you intend to include as part of your workout routine"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Index**: The number beside the name of the corresponding data entry in fitNUS"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Keyword**: The user input to find matches during a search"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Lesson**: Module provided by NUS"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Routine**: Represents a collection of exercises"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Tag**: A word that describes a data entry"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "**Timetable**: A customisable workout planner to organize your weekly lessons and workout routines"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 480,
      "nicholasyeo": 79,
      "patricktan6": 12,
      "-": 93,
      "khor-jingqian": 87,
      "Licheng-Wu": 18
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"exercise_add e/Bicep\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"exercise_add e/Bicep\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : addExercise(e)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveFitNus(fitnus)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "-": 34,
      "khor-jingqian": 2
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNus *-right-\u003e \"1\" UniqueExerciseList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNus *-down-\u003e \"1\" UniqueLessonList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNus *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "UniqueTagList -[hidden]down- UniqueExerciseList"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "UniqueLessonList -[hidden]down- UniqueExerciseList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "UniqueExerciseList o-right-\u003e Exercise"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "UniqueLessonList o-right-\u003e Lesson"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Exercise o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Lesson o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Lesson *--\u003e Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Exercise *--\u003e Name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "khor-jingqian": 14
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \":FitNusParser\" as FitNusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \":ExerciseDeleteCommandParser\" as ExerciseDeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \"d:ExerciseDeleteCommand\" as ExerciseDeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[-\u003e LogicManager : execute(\"exercise_delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LogicManager -\u003e FitNusParser : parseCommand(\"exercise_delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate FitNusParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "create ExerciseDeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser -\u003e ExerciseDeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate ExerciseDeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommandParser --\u003e FitNusParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate ExerciseDeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser -\u003e ExerciseDeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate ExerciseDeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "create ExerciseDeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommandParser -\u003e ExerciseDeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate ExerciseDeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommand --\u003e ExerciseDeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate ExerciseDeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommandParser --\u003e FitNusParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate ExerciseDeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommandParser -[hidden]-\u003e FitNusParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "destroy ExerciseDeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate FitNusParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LogicManager -\u003e ExerciseDeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate ExerciseDeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommand -\u003e Model : getFilteredExerciseList()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Model --\u003e ExerciseDeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommand -\u003e Model : exerciseDelete(index)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Model --\u003e ExerciseDeleteCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "CommandResult --\u003e ExerciseDeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseDeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate ExerciseDeleteCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "khor-jingqian": 36
    }
  },
  {
    "path": "docs/diagrams/FindExercisesSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \":FitNusParser\" as FitNusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "participant \":FindExercisesCommandParser\" as FindExercisesCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "participant \"f:FindExercisesCommand\" as FindExercisesCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "[-\u003e LogicManager : execute(\"find_exercises bench\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LogicManager -\u003e FitNusParser : parseCommand(\"find_exercises bench\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate FitNusParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "create FindExercisesCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser -\u003e FindExercisesCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "activate FindExercisesCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FindExercisesCommandParser --\u003e FitNusParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "deactivate FindExercisesCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser -\u003e FindExercisesCommandParser : parse(\"bench\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "activate FindExercisesCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "create FindExercisesCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "FindExercisesCommandParser -\u003e FindExercisesCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "activate FindExercisesCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "FindExercisesCommand --\u003e FindExercisesCommandParser : f"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "deactivate FindExercisesCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FindExercisesCommandParser --\u003e FitNusParser : f"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "deactivate FindExercisesCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FindExercisesCommandParser -[hidden]-\u003e FitNusParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "destroy FindExercisesCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser --\u003e LogicManager : f"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate FitNusParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "LogicManager -\u003e FindExercisesCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "activate FindExercisesCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "FindExercisesCommand-\u003e Model : updateFilteredExerciseList(predicate)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Model --\u003e FindExercisesCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "FindExercisesCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "CommandResult --\u003e FindExercisesCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "FindExercisesCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "deactivate FindExercisesCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 10,
      "Licheng-Wu": 59
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class FitNusParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LogicManager --\u003e\"1\" FitNusParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d ExerciseAddCommand, \\nFindExercisesCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "khor-jingqian": 4
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Interface ReadOnlyFitNus \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class FitNus"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class ReadOnlyFitNus"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Package Exercise {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class Exercise"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class UniqueExerciseList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Package Routine {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class Routine"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class UniqueRoutineList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Package Body {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class Body"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class Height"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class Weight"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Package Calorie {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class CalorieLog"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class DailyCalorie"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Package Lesson {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class Lesson"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class UniqueLessonList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNus .up.|\u003e ReadOnlyFitNus"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ModelManager o--\u003e \"1\" FitNus"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNus *--\u003e \"1\" UniqueExerciseList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNus *--\u003e \"1\" UniqueLessonList"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "UniqueExerciseList o--\u003e \"*\" Exercise"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Exercise *--\u003e Name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Exercise *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNus *--\u003e \"1\" UniqueRoutineList"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "UniqueRoutineList o--\u003e \"*\" Routine"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Routine --\u003e \"*\" Exercise"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ModelManager --\u003e\"1\" Exercise : filtered list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNus *--\u003e \"1\" Body"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNus *--\u003e \"1\" CalorieLog"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "khor-jingqian": 44
    }
  },
  {
    "path": "docs/diagrams/RoutineAddSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \":FitNusParser\" as FitNusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \":RoutineCreateCommandParser\" as RoutineCreateCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \"r:RoutineCreateCommand\" as RoutineCreateCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[-\u003e LogicManager : execute(\"routine_create r/Leg Workout\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LogicManager -\u003e FitNusParser : parseCommand(\"routine_create r/Leg Workout\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate FitNusParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "create RoutineCreateCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser -\u003e RoutineCreateCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate RoutineCreateCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCreateCommandParser --\u003e FitNusParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate RoutineCreateCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser -\u003e RoutineCreateCommandParser : parse(\"r/Leg Workout\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate RoutineCreateCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "create RoutineCreateCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCreateCommandParser -\u003e RoutineCreateCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate RoutineCreateCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCreateCommand --\u003e RoutineCreateCommandParser : r"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate RoutineCreateCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCreateCommandParser --\u003e FitNusParser : r"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate RoutineCreateCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCreateCommandParser -[hidden]-\u003e FitNusParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "destroy RoutineCreateCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "FitNusParser --\u003e LogicManager : r"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate FitNusParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LogicManager -\u003e RoutineCreateCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate RoutineCreateCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCreateCommand -\u003e Model : addRoutine(r)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Model --\u003e RoutineCreateCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCreateCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "CommandResult --\u003e RoutineCreateCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCreateCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate RoutineCreateCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 69
    }
  },
  {
    "path": "docs/diagrams/RoutineCreateActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ":User starts fitNUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ":User types `routine_create r/Chest Workout` into fitNUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ":FitNusParser receives the input and creates a RoutineCreateCommandParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ":RoutineCreateCommandParser checks validity of input;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    if () then ([valid input format])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        :ParserUtil parses user input using Routine prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if () then ([valid Name format])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                :RoutineCreateCommandParser returns a RoutineCreateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                :RoutineCreateCommand checks Model if Routine already exists;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                if () then ([does not exists])"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                :Add Routine to Model, updating UI;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                :Return results;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                else ([else])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                :CommandException is thrown;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                endif"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            else ([else])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            :ParseException is thrown;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            endif"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    :ParseException is thrown;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "stop"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 33
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Interface FitNusStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class JsonFitNusStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "StorageManager o--\u003e FitNusStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "JsonFitNusStorage .left.|\u003e FitNusStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "JsonFitNusStorage .down.\u003e JsonSerializableFitNus"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "JsonSerializableFitNus .right.\u003e JsonAdaptedExercise"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "JsonAdaptedExercise .up.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "JsonSerializableFitNus .down.\u003e JsonAdaptedRoutine"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "JsonAdaptedRoutine .up.\u003e JsonAdaptedExercise"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "JsonSerializableFitNus .right.\u003e JsonAdaptedLesson"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "JsonAdaptedLesson .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "khor-jingqian": 12
    }
  },
  {
    "path": "docs/diagrams/TimetableAddRoutineSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "participant \":FitNusParser\" as FitNusParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "participant \":TimetableAddRoutineCommandParser\" as TimetableAddRoutineCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "participant \"t:TimetableAddRoutineCommand\" as TimetableAddRoutineCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "[-\u003e LogicManager : execute(\"timetable_add_routine r/Leg Workout D/Monday T/1600-1700\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "LogicManager -\u003e FitNusParser : parseCommand(\"timetable_add_routine r/Leg Workout D/Monday T/1600-1700\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "activate FitNusParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "create TimetableAddRoutineCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "FitNusParser -\u003e TimetableAddRoutineCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "activate TimetableAddRoutineCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommandParser --\u003e FitNusParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "deactivate TimetableAddRoutineCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "FitNusParser -\u003e TimetableAddRoutineCommandParser : parse(\"r/Leg Workout D/Monday T/1600-1700\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "activate TimetableAddRoutineCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "create TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommandParser -\u003e TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "activate TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommand --\u003e TimetableAddRoutineCommandParser : t"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "deactivate TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommandParser --\u003e FitNusParser : t"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "deactivate TimetableAddRoutineCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommandParser -[hidden]-\u003e FitNusParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "destroy TimetableAddRoutineCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "FitNusParser --\u003e LogicManager : t"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "deactivate FitNusParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "LogicManager -\u003e TimetableAddRoutineCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "activate TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommand -\u003e Model : retrieveRoutine(r)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Model --\u003e TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommand -\u003e Model : addSlotToTimetable(slot)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Model --\u003e TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "CommandResult --\u003e TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "TimetableAddRoutineCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "deactivate TimetableAddRoutineCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "nicholasyeo": 71
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class ExerciseListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class RoutineListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class LessonListPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class RoutineCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class ExerciseCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "Class LessonCard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Class HomePanel"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Class TimetablePanel"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Class SlotCard"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Class SlotListPanel"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Class CalorieGraph"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "Class BmiBox"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "MainWindow *-down-\u003e HomePanel"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "MainWindow *-down-\u003e TimetablePanel"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "HomePanel *-down-\u003e ExerciseListPanel"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "HomePanel *-down-\u003e RoutineListPanel"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "HomePanel *-down-\u003e LessonListPanel"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "HomePanel *-down-\u003e CalorieGraph"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "HomePanel *-down-\u003e BmiBox"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "TimetablePanel *-down-\u003e SlotListPanel"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseListPanel -down-\u003e ExerciseCard"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineListPanel -down-\u003e RoutineCard"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LessonListPanel -down-\u003e LessonCard"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "SlotListPanel -down-\u003e SlotCard"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseCard --|\u003e UiPart"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCard --|\u003e UiPart"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LessonCard --|\u003e UiPart"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "HomePanel --|\u003e UiPart"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "TimetablePanel --|\u003e UiPart"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "RoutineListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "ExerciseListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "LessonListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "SlotListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "SlotCard --|\u003e UiPart"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseCard ..\u003e Model"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineCard ..\u003e Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LessonCard ..\u003e Model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "BmiBox ..\u003e Model"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "CalorieGraph ..\u003e Model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "BmiBox ..\u003e Model"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "SlotCard ..\u003e Model"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "ExerciseListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "RoutineListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "LessonListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "khor-jingqian": 18,
      "Licheng-Wu": 26
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "title: fitNUS"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T09-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "fitNUS is tailored for **NUS students** that are interested in staying healthy and keeping fit. It is suitable for **all"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "fitness levels** and is equipped with a customisable **Timetable** for you to manage your time wisely and slot in your"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "workout routines with ease. fitNUS also displays a **Calorie Graph** to track your daily caloric intake and expenditure."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "The application is extremely easy to use, all you have to do is type in your commands in the command box, and the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "information will be reflected in the user interface for ease of viewing."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* If you are interested in using fitNUS, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* If you are interested about developing fitNUS, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "khor-jingqian": 11
    }
  },
  {
    "path": "docs/team/iqbxl.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "title: Muhammad Iqbal Bin Imran\u0027s Project Portfolio"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "## Project: fitNUS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "This portfolio page highlights some of my contributions to fitNUS - a Software Engineering Project developed in my third"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "year of undergraduate studies in the National University of Singapore (NUS)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "### About the Team"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "We are a group of 5 Computer Science undergraduates from Year 2 and Year 3 reading CS2103T: Software Engineering."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "#### About the Project"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "fitNUS represents a culmination of our team\u0027s efforts in morphing an existing [Address Book Level 3 (AB3) project](https://github.com/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "into a new product via Brownfield software development. fitNUS is a personal fitness tracker assistant which allows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "users to create customised workout routines, by having the flexibility to add exercises to the routines they have"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "created. To facilitate workouts around their busy schedules, users have an added option of slotting lessons and routines"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "to their timetable."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "The team has come up with a vast number of user-centric features to make fitNUS well-suited in order to provide both"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "convenience and utility in the long-run. Aimed at NUS students who are keen on improving their fitness levels, fitNUS is"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "the perfect solution in which the Graphical User Interface is integrated with Command Line Interface to provide a"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "wholesome user experience."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* **Code contributed**: You can view my code contributions to fitNUS [here](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003diqbxl\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  * Managed releases `v1.1` - `v1.4` (4 releases) on GitHub"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "## Contribution to the User Guide:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "[../UserGuide.md](https://github.com/AY2021S1-CS2103T-T09-2/tp/blob/master/docs/UserGuide.md#46-calorie) (Added documentation for the features `calorie_add` and `calorie_minus`)\u003cbr/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "[../UserGuide.md](https://github.com/AY2021S1-CS2103T-T09-2/tp/blob/master/docs/UserGuide.md#471-help-help) (Added documentation for the feature `help`)\u003cbr/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "[../UserGuide.md](https://github.com/AY2021S1-CS2103T-T09-2/tp/blob/master/docs/UserGuide.md#2-additional-information) (Added documentation for the section Additional Information)\u003cbr/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "[../UserGuide.md](https://github.com/AY2021S1-CS2103T-T09-2/tp/blob/master/docs/UserGuide.md#3-quick-start) (Did cosmetic tweaks to existing documentation: Quick Start section)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "## Contributions to the Developer Guide:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "[../DeveloperGuide.md](https://github.com/AY2021S1-CS2103T-T09-2/tp/blob/master/docs/DeveloperGuide.md#delete-lesson) (Added implementation details of the `lesson_delete` feature)\u003cbr/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 68
    }
  },
  {
    "path": "docs/team/khor-jingqian.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "title: Khor Jing Qian\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "## Project: fitNUS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "fitNUS is a desktop address book application that is targeted at NUS students that are looking to improve their fitness."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 15"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "### About the Team"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "We are a group of 5 Computer Science undergraduates from Year 2 and Year 3 reading CS2103T: Software Engineering."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#### About the Project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "fitNUS represents a culmination of our team\u0027s efforts in morphing an existing [Address Book Level 3 (AB3) project](https://github.com/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "into a new product via Brownfield software development. fitNUS is a personal fitness tracker assistant which allows"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "users to create customised workout routines, by having the flexibility to add exercises to the routines they have"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "created. To facilitate workouts around their busy schedules, users have an added option of slotting lessons and routines"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "to their timetable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "The team has come up with a vast number of user-centric features to make fitNUS well-suited in order to provide both"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "convenience and utility in the long-run. Aimed at NUS students who are keen on improving their fitness levels, fitNUS is"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "the perfect solution in which the Graphical User Interface is integrated with Command Line Interface to provide a"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "wholesome user experience."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* **New Feature**: Added Routine classes and implemented its relevant implementations."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  * What it does: allows the user to store pre-existing Exercises and users are able to add Routine into their timetable."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  * Justification: This is a core feature of fitNUS and allows users to customise what exercises they want in a routine and the time and date of when they want to try out this Routine."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  * Highlights: Implementing Routine required a deep understanding of how the original AB3 functioned. The implementation was made even more challenging by the fact that"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  it was built on Exercise and maintaining low coupling was tough and introduced many issues. Whenever an Exercise was deleted or edited, the corresponding Routine that has implemented it has to remove or edit the Exercise as well."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* **New Feature**: Added DailyCalorie classes and implemented its relevant implementations."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  * What it does: allows the user to track their daily calorie intake up to 7 days."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  * Justification: Calories is an important part of tracking your fitness and this implementation allows fitNUS to better help their users."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  * Highlights: Calorie tracking is done on a daily basis because the team believes that users should not be able to change future or past calorie count.  Implementation was tricky as I wanted any calorie features to be isolated and be able to run by itself. This meant that the calorie classes had to use LocalDate to remove the dependency on the user. This increased the difficulty of testing and equality checks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* **New Feature**: Implemented the graph for calorie tracking on the fitNUS GUI."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  * What it does: allows the user to track their daily calorie intake up to 7 days."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  * Justification: To appeal to the visual users of fitNUS to allow them to follow their progress using graphics."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  * Highlights: Calorie tracking is done on a daily basis. It was difficult to learn the JavaFX for LineChart and implementing such that it responds to user input of calories by actively charting new entries. I chose to implement the feature as an ObservableList of calorie entries for every day that the user has edited their calories. This way, the information of calories per day and which day its recording is encapsulated. This ObservableList is passed to the CalorieGraph class to translate into a Series and then plotted on the GUI."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  * Credits: Oracle document on LineChart, xAxis, yAxis and their tutorial."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* **New Feature**: Implemented the BMI display on GUI and Body class that supported it."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * What it does: allows the user to input their height and weight, displaying their BMI."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * Justification: body metrics are important in tracking your fitness journey, so we felt that it was essential to have this graphics on the GUI."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    * Highlights:  Implementation of the GUI treats the Body as an Observable object that detects any change in the Height or Weight classes that it contains. The GUI listens for changes, and updates the BMI accordingly. Body is wrapped in ObservableList and then in an unmodifiable copy of this. I considered refactoring and using ChangeListener to detect changes in Body. In this case, Weight and Height classes will be of SimpleObjectProperty and the listener will detect if there are changes to it. However, this meant exposing the Body object to Logic and Manager in order to pass the observed variables to MainWindow, whereas the other classes utilised the unmodifiable version of the ObservableList. Ultimately, I chose to implement it as defensively as possible so I chose to use ObservableList."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* **Code contributed**: You can view my code contributions to fitNUS [here](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dkhor-jingqian\u0026tabRepo\u003dAY2021S1-CS2103T-T09-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  * Managed releases `v1.3(trial)` and `v1.3` (2 releases) on GitHub"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  * Updated the GUI to fit our vision for fitNUS, adjusting the arrangement. [#104](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/104) [#100](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/100) [#184](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/184) [#188](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/188)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  * Wrote test cases for Routine, UniqueRoutineList, DailyCalorie, CalorieLog, Body, Height and Weight and all the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  linked classes. [#195](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/195) [#194](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/194) [#193](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/193) [#199](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/199)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  * Disallow the input of repeated prefixes for all the classes in fitNUS where AB3 would take the latest prefix command to be accurate, now only allowing 1 prefix when appropriate.  [#195](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/195)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "## Contributions to the team-based tasks:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* Set up assertions in Gradle for fitNUS. [#75](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/75)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* Release management, handled v1.3(trial) and v1.3."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* Maintaining issue-tracker and milestone, reminding team mates to make sure their workload is reflected in the issues."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* Timely reminders to close their issues and finish up before milestone deadline."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* Necessary code enhancements such as renaming it to fitNUS, finding a suitable product icon, recommending a layout."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "## Contribution to the User Guide:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* Writeup for Exercise, Routine and BMI, excluding pictures. [#76](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/76) [#85](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/85) [#90](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/90) [#92](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/92)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* Contributed some pictures for UG (refer to above links to UG edits)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* Wrote the command summary for User Guide(refer to above links to UG edits)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "## Contributions to the Developer Guide:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* Added implementation details of the command `routine_create`, showing in depth understanding of the sequence of method calls in fitNUS. [#85](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/85) [#92](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/92)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* Refactored architecture diagrams from AB3 to better reflect how fitNUS works. (refer to above links to DG edits)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* Wrote User Stories and Manual testing for the group. [#195](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/195)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* Added an Activity Diagram for `routine_create` for better clarity [#195](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/195)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "* Wrote design considerations for `routine_create` [#195](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/195)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "## Community"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  * Reported feature flaws and suggestions for other teams in the class during PE Dry Run. [#1](https://github.com/khor-jingqian/ped/issues/1) [#2](https://github.com/khor-jingqian/ped/issues/1) [#3](https://github.com/khor-jingqian/ped/issues/3)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  * Left non-trivial comments on team mate\u0027s PR. [#196](https://github.com/AY2021S1-CS2103T-T09-2/tp/pull/196)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 98
    }
  },
  {
    "path": "docs/team/licheng-wu.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "title: Wu Licheng\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "## Project: fitNUS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "### Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "fitNUS is a desktop application that is targeted at NUS students who are looking to improve their fitness."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "### About the Team"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "We are a group of 5 Computer Science undergraduates from Year 2 and Year 3 reading CS2103T: Software Engineering."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "### About the Project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "fitNUS represents a culmination of our team\u0027s efforts in morphing an existing [Address Book Level 3 (AB3) project](https://github.com/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "into a new product via Brownfield software development. fitNUS is a personal fitness tracker assistant which allows"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "users to create customised workout routines, by having the flexibility to add exercises to the routines they have"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "created. To facilitate workouts around their busy schedules, users have an added option of slotting lessons and routines"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "to their timetable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "The team has come up with a vast number of user-centric features to make fitNUS well-suited in order to provide both"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "convenience and utility in the long-run. Aimed at NUS students who are keen on improving their fitness levels, fitNUS is"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "the perfect solution in which the Graphical User Interface is integrated with Command Line Interface to provide a"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "wholesome user experience."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* **New Feature**: Added Exercise class and its relevant commands"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * What it does: Allows the user to add his chosen exercises into fitNUS"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * Justification: This is a core feature of fitNUS and allows users to add a list of exercises into fitNUS. This will enable"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  the user to create routines based on the exercises added, and subsequently add these routines to their timetable."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * Highlights: Implementing the exercise class and its relevant commands required a clear understanding of how parsing"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "   and storage functioned in the original AB3. Understanding of how fitNUS retrieves data from the data file is also"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "   needed in order to ensure that commands work as intended."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* **New Feature**: Added the feature allowing users to switch between the home screen and timetable screen"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * What it does: Allows the user view his timetable on a separate screen from his exercises, routines, lessons, calorie and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  BMI tracker."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * Justification: This user-centric feature greatly improves user experience by providing more space to display the timetable."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  This organizes the UI and makes it more convenient for users to find their next activity for the day."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * Highlights: The implementation of multiple tabs required a solid understanding of how AB3 uses FXML to display the GUI. Furthermore,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  did independent research to learn how tabs work in FXML, as well as how to integrate tabs into the current GUI."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* **New Feature**: Implemented the Timetable display on GUI"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * What it does: Allows the user view his timetable easily, with all lessons and routines on separate days and slots."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * Justification: This allows the user to easily view his schedule for the week. All his routines and lessons are grouped "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  based on the day, and arranged based on the time. This ease of viewing greatly improves user-experience ."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * Highlights: The implementation required additional thinking to filter and sort the routines and lessons chronologically,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  instead on based on when the user adds the activity to the timetable."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* **Code contributed**: You can view my code contributions to fitNUS [here](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dlicheng-wu\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * Managed releases `v1.1` - `v1.4` (4 releases) on GitHub"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * Updated the GUI to display exercises, routines and lessons added into 3 columns for ease of viewing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "## Contributions to the team-based tasks:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* Contributed to the planning and designing of the display and layout of fitNUS."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* Enhanced existing code written by teammates to ensure code quality and improve readability of code."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* Ensured code is well documented by checking for the necessary header comments in classes or methods to improve readability."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "## Contributions to the User Guide:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* Contributed to the introduction, and the documentation for Exercise."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * [Introduction](https://github.com/AY2021S1-CS2103T-T09-2/tp/blob/master/docs/UserGuide.md#1-introduction)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * [Exercise Commands](https://github.com/AY2021S1-CS2103T-T09-2/tp/blob/master/docs/UserGuide.md#41-exercise)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "## Contributions to the Developer Guide:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* Added implementation details of the command `find_exercises`, through the use of a sequence diagram"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "to illustrate the flow of method calls in fitNUS."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * [Find Exercises](https://github.com/AY2021S1-CS2103T-T09-2/tp/blob/master/docs/DeveloperGuide.md#find-exercises)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "* Updated the UI component from AB3 to better reflect how fitNUS works."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * [UI Components](https://github.com/AY2021S1-CS2103T-T09-2/tp/blob/master/docs/DeveloperGuide.md#ui-component)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "## Community"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class during PE Dry Run."
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 90
    }
  },
  {
    "path": "docs/team/nicholasyeo.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "title: Nicholas Yeo\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "## Project: fitNUS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "### Overview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "fitNUS is a desktop application that is targeted at NUS students who are looking to improve their fitness."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "### About the Team"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "We are a group of 5 Computer Science undergraduates from Year 2 and Year 3 reading CS2103T: Software Engineering."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "### About the Project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "fitNUS represents a culmination of our team\u0027s efforts in morphing an existing [Address Book Level 3 (AB3) project](https://github.com/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "into a new product via Brownfield software development. fitNUS is a personal fitness tracker assistant which allows"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "users to create customised workout routines, by having the flexibility to add exercises to the routines they have"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "created. To facilitate workouts around their busy schedules, users have an added option of slotting lessons and routines"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "to their timetable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "The team has come up with a vast number of user-centric features to make fitNUS well-suited in order to provide both"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "convenience and utility in the long-run. Aimed at NUS students who are keen on improving their fitness levels, fitNUS is"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "the perfect solution in which the Graphical User Interface is integrated with Command Line Interface to provide a"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "wholesome user experience."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* **New Feature**: Added Timetable and Slot classes together with their relevant implementations."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  * What it does: Allows the user to add existing Routines or Lessons in fitNUS into their timetable by creating a Slot."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  The Timetable class has a list of Slots, where each Slot encapsulates an Activity, the Day and Duration."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  * Justification: This is a core feature of fitNUS and allows users to have the flexibility of adding Routines/Lessons"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  to any day and time slot of their choice in their timetable. This allows users to integrate their workout sessions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  into their lesson timetable. To allow the adding of either Routine or Lesson into a Slot, both the Routine and Lesson"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  classes extend from the parent Activity class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  * Highlights: Implementing Timetable and Slot classes required a deep understanding of how the original AB3 functioned."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  Furthermore, the Slot class stores Routines or Lessons and it requires both classes to be implemented well before"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  Slot can properly encapsulate them."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* **New Feature**: Added the ability to store height and weight in fitNUS."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  * What it does: Allows the user to store his height and weight so that he can keep track of his fitness progress."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  * Justification: Such a feature improves our application significantly as it helps users to better track their fitness"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  levels and plan their fitness journey properly, such as the need for weight loss or weight gain."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  * Highlights: The implementation of the Height and Weight classes in fitNUS follow closely from the existing implementation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  of the Name class in Address Book Level 3. This is to provide consistency throughout the code base and makes the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  relevant command and parser classes easier to implement."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* **Code contributed**: You can view my code contributions to fitNUS [here](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dnicholasyeo\u0026tabRepo\u003dAY2021S1-CS2103T-T09-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  * Managed releases `v1.1` - `v1.4` (4 releases) on GitHub"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  * Wrote test cases for Timetable, Slot, Activity, Day, Duration as well as its relevant command and parser classes."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "## Contributions to the team-based tasks:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* Contributed to the planning and designing of the display and layout of fitNUS."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* Enhanced existing code written by teammates to ensure code quality and improve readability of code."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* Ensured code is well documented by checking for the necessary header comments in classes or methods to improve readability."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "## Contributions to the User Guide:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* Contributed to the documentation for Exercise, Lesson, and Timetable."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  * [Exercise Commands](https://github.com/AY2021S1-CS2103T-T09-2/tp/blob/master/docs/UserGuide.md#41-exercise)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  * [Lesson Commands](https://github.com/AY2021S1-CS2103T-T09-2/tp/blob/master/docs/UserGuide.md#43-lesson)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  * [Timetable Commands](https://github.com/AY2021S1-CS2103T-T09-2/tp/blob/master/docs/UserGuide.md#44-timetable)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* Contributed to the command summary for User Guide."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  * [Command Summary](https://github.com/AY2021S1-CS2103T-T09-2/tp/blob/master/docs/UserGuide.md#5-command-summary)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* Contributed to the structure of the User Guide such that there is better flow and improved readability."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* Contributed to the language and style of the User Guide by making it more reader-centric through the use of"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "active voice and you-language."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "## Contributions to the Developer Guide:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* Added implementation details of the command `timetable_add_routine`, through the use of a sequence diagram"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "to illustrate the flow of method calls in fitNUS."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  * [Add Routine to Timetable](https://github.com/AY2021S1-CS2103T-T09-2/tp/blob/master/docs/DeveloperGuide.md#add-routine-to-timetable)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "* Updated the Model component from AB3 to better reflect how fitNUS works."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  * [Model Components](https://github.com/AY2021S1-CS2103T-T09-2/tp/blob/master/docs/DeveloperGuide.md#model-component)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "## Community"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class during PE Dry Run."
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 97
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "Create a new `Remark` in `seedu.address.model.body`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 1,
      "-": 393
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.body.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 1,
      "-": 102
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            storage.saveFitNus(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "       model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    `JsonAddressBook#saveFitNus()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    * Converts a given {@code ReadOnlyFitNus} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyFitNus source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 4,
      "-": 246
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.storage.FitNusStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.storage.JsonFitNusStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing fitNUS ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        FitNusStorage fitNusStorage \u003d new JsonFitNusStorage(userPrefs.getFitNusFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        storage \u003d new StorageManager(fitNusStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s fitNUS and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The data from the sample fitNUS will be used instead if {@code storage}\u0027s fitNUS is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * or an empty fitNUS will be used instead if errors occur when reading {@code storage}\u0027s fitNUS."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Optional\u003cReadOnlyFitNus\u003e fitNusOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        ReadOnlyFitNus initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            fitNusOptional \u003d storage.readFitNus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            if (!fitNusOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample fitNUS\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            initialData \u003d fitNusOptional.orElseGet(SampleDataUtil::getSampleFitNus);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty fitNUS\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            initialData \u003d new FitNus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty fitNUS\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            initialData \u003d new FitNus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty fitNUS\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        logger.info(\"Starting fitNUS \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping fitNUS ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 23,
      "-": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String LOG_FILE \u003d \"fitNUS.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command. Enter help if you want a full command list.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX \u003d \"The exercise index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_INVALID_LESSON_DISPLAYED_INDEX \u003d \"The lesson index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_INVALID_ROUTINE_DISPLAYED_INDEX \u003d \"The routine index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_EXERCISES_LISTED_OVERVIEW \u003d \"%1$d exercises listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_LESSONS_LISTED_OVERVIEW \u003d \"%1$d lessons listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_ROUTINES_LISTED_OVERVIEW \u003d \"%1$d routines listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 5,
      "-": 9,
      "Licheng-Wu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code charChain}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   Ignores case, a partial char match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *       containsCharIgnoreCase(\"ABc\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *       containsCharIgnoreCase(\"def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *       containsCharIgnoreCase(\"ABc\", \"AB\") \u003d\u003d true // a partial char match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @param charChain cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static boolean containsCharIgnoreCase(String sentence, String charChain) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(charChain);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String preppedSentence \u003d sentence.trim().toUpperCase();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String preppedCharChain \u003d charChain.trim().toUpperCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        checkArgument(!preppedCharChain.isEmpty(), \"CharChain parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        checkArgument(preppedCharChain.split(\"\\\\s+\").length \u003d\u003d 1, \"CharChain parameter should be a \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                + \"single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return preppedSentence.contains(preppedCharChain);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 14,
      "-": 51,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Body;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.DailyCalorie;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns the fitNUS."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @see seedu.address.model.Model#getFitNus()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    ReadOnlyFitNus getFitNus();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of exercises */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    ObservableList\u003cExercise\u003e getFilteredExerciseList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of routines */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    ObservableList\u003cRoutine\u003e getFilteredRoutineList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of lessons */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    ObservableList\u003cLesson\u003e getFilteredLessonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of slots */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    ObservableList\u003cSlot\u003e getFilteredSlotList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of slots, filtered by chosen day */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    ObservableList\u003cSlot\u003e getFilteredSlotList(String day);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of calorie logs */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorie();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of body */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    ObservableList\u003cBody\u003e getFilteredBody();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns the user prefs\u0027 fitNUS file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    Path getFitNusFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 13,
      "nicholasyeo": 5,
      "-": 41,
      "khor-jingqian": 8,
      "Licheng-Wu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.FitNusParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Body;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.DailyCalorie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final FitNusParser fitNusParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNusParser \u003d new FitNusParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Command command \u003d fitNusParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            storage.saveFitNus(model.getFitNus());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ReadOnlyFitNus getFitNus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return model.getFitNus();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Path getFitNusFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return model.getFitNusFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cRoutine\u003e getFilteredRoutineList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return model.getFilteredRoutineList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return model.getFilteredLessonList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public ObservableList\u003cSlot\u003e getFilteredSlotList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return model.getFilteredSlotList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ObservableList\u003cSlot\u003e getFilteredSlotList(String day) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return model.getFilteredSlotList(day);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorie() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return model.getFilteredDailyCalorie();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cBody\u003e getFilteredBody() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return model.getFilteredBody();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 18,
      "nicholasyeo": 8,
      "-": 68,
      "khor-jingqian": 12,
      "Licheng-Wu": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddHeightCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Height;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "public class AddHeightCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"height\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds user\u0027s height (in cm) to fitNUS. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_HEIGHT + \"HEIGHT\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_HEIGHT + \"172.5\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Height added: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Height height;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Creates an AddHeightCommand to add the specified height in centimetres."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public AddHeightCommand(Height height) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        model.addHeight(height);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, height));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "                || (other instanceof AddHeightCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 this.height.equals(((AddHeightCommand) other).height));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "patricktan6": 37,
      "nicholasyeo": 4,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddWeightCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Weight;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "public class AddWeightCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"weight\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds user\u0027s weight (in kg) to fitNUS. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_WEIGHT + \"WEIGHT\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_WEIGHT + \"70.8\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Weight added: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Weight weight;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Creates an AddWeightCommand to add the specified weight in kilograms."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public AddWeightCommand(Weight weight) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        model.addWeight(weight);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, weight));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "                || (other instanceof AddWeightCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 this.weight.equals(((AddWeightCommand) other).weight));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "patricktan6": 37,
      "nicholasyeo": 4,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CalorieAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Adds a DailyCalorie to fitNUS."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieAddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calorie_add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds the user\u0027s caloric intake to today\u0027s sum. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_CALORIE + \"CALORIE \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + PREFIX_CALORIE + \"1000 \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Calories successfully added: %1$s\" + \"\\nToday\u0027s calories are: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"The calories that you are adding is too large! fitNUS is unable to \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"calculate such large values.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Calorie toAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Creates an CalorieAddCommand to add the specified {@code DailyCalorie}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public CalorieAddCommand(Calorie calorie) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        toAdd \u003d calorie;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int todayCalories \u003d model.getCalories();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (todayCalories \u003e Integer.MAX_VALUE - toAdd.getCalorie()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.addCalories(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        todayCalories +\u003d toAdd.getCalorie();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS + todayCalories, toAdd));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof CalorieAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 toAdd.equals(((CalorieAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "nicholasyeo": 7,
      "khor-jingqian": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CalorieMinusCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Adds an Daily Calorie to fitNUS."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieMinusCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calorie_minus\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \": Deducts the specified calorie amount from today\u0027s sum. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_CALORIE + \"CALORIE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + PREFIX_CALORIE + \"1000 \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Calories successfully deducted: %1$s\" + \"\\nToday\u0027s calories are: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"You are deducting a sum that is greater than today\u0027s calories!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Calorie toDeduct;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Creates an CalorieMinusCommand to add the specified {@code DailyCalorie}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public CalorieMinusCommand(Calorie calorie) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        toDeduct \u003d calorie;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int todayCalories \u003d model.getCalories();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (todayCalories \u003c toDeduct.getCalorie()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.minusCalories(toDeduct);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        todayCalories -\u003d toDeduct.getCalorie();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS + todayCalories, toDeduct));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof CalorieMinusCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 toDeduct.equals(((CalorieMinusCommand) other).toDeduct));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "nicholasyeo": 7,
      "khor-jingqian": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Clears fitNUS."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"fitNUS has been cleared. You can start afresh now!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model.setFitNus(new FitNus());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "-": 19,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting fitNUS as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String NO_COMMAND_MESSAGE \u003d \"There are no commands containing this keyword. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"A brief description of all possible commands is listed below.\\n\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String separator \u003d \"-----------------------------------------------------------------------\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"-----------------------------------------------------------------------------------------------------\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"help:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Shows program usage instructions and format for all commands.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Additionally, use a keyword to search for a group of commands.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: help OR help [COMMAND_KEYWORD]\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String CLEAR_MESSAGE \u003d \"clear:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Clears all data entries from fitNUS.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: clear\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String EXIT_MESSAGE \u003d \"exit:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Terminates the program.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: exit\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ADD_HEIGHT_MESSAGE \u003d \"height:\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Adds user\u0027s height (in cm) to fitNUS.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: height h/HEIGHT\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ADD_WEIGHT_MESSAGE \u003d \"weight:\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Adds user\u0027s weight (in kg) to fitNUS.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: weight w/WEIGHT\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String CALORIE_ADD_MESSAGE \u003d \"calorie_add:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Adds the user\u0027s caloric intake to today\u0027s sum.\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: calorie_add c/CALORIE\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String CALORIE_MINUS_MESSAGE \u003d \"calorie_minus:\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Deducts the specified calorie amount from today\u0027s sum.\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: calorie_minus c/CALORIE\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String EXERCISE_ADD_MESSAGE \u003d \"exercise_add:\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Adds an exercise to fitNUS.\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: exercise_add e/EXERCISE [t/TAG]...\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String EXERCISE_DELETE_MESSAGE \u003d \"exercise_delete:\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Deletes the exercise identified by the index number used in the displayed exercise list.\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: exercise_delete INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String EXERCISE_EDIT_MESSAGE \u003d \"exercise_edit:\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Edits the details of the exercise identified by the index number used in the displayed exercise list.\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: exercise_edit INDEX (must be a positive integer) [e/EXERCISE] [t/TAG]...\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String EXERCISE_FIND_MESSAGE \u003d \"exercise_find:\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Finds all exercises whose names contain all of the specified keywords (case-insensitive) and displays\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: exercise_find KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String EXERCISE_LIST_MESSAGE \u003d \"exercise_list:\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Displays a list of all exercises in fitNUS.\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: exercise_list\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ROUTINE_CREATE_MESSAGE \u003d \"routine_create:\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Creates a new routine in fitNUS.\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: routine_create r/ROUTINE\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ROUTINE_DELETE_MESSAGE \u003d \"routine_delete:\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Deletes the routine identified by the index number used in the displayed routine list.\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: routine_delete INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ROUTINE_FIND_MESSAGE \u003d \"routine_find:\\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Finds all routines whose names contain all of the specified keywords (case-insensitive) and displays\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: routine_find KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ROUTINE_LIST_MESSAGE \u003d \"routine_list\\n\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Displays a list of all routines in fitNUS.\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: routine_list\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ROUTINE_ADD_EXERCISE_MESSAGE \u003d \"routine_add_exercise:\\n\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Adds an existing exercise to a routine in fitNUS.\\n\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: routine_add_exercise r/ROUTINE e/EXERCISE\\n\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ROUTINE_DELETE_EXERCISE_MESSAGE \u003d \"routine_delete_exercise:\\n\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Deletes the exercise from the specified routine.\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: routine_delete_exercise r/ROUTINE e/EXERCISE\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String ROUTINE_VIEW_MESSAGE \u003d \"routine_view:\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Views all exercises contained in a routine in fitNUS.\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: routine_view INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String LESSON_ADD_MESSAGE \u003d \"lesson_add:\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Adds a lesson to fitNUS.\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: lesson_add n/LESSON [t/TAG]...\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String LESSON_DELETE_MESSAGE \u003d \"lesson_delete:\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Deletes the lesson identified by the index number used in the displayed lesson list.\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: lesson_delete INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String LESSON_EDIT_MESSAGE \u003d \"lesson_edit:\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Edits the details of the lesson identified by the index number used in the displayed lesson list.\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: lesson_edit INDEX (must be a positive integer) [n/LESSON] [t/TAG]...\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String LESSON_FIND_MESSAGE \u003d \"lesson_find:\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Finds all lessons whose names contain any of the specified keywords (case-insensitive) and displays\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: lesson_find KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String LESSON_LIST_MESSAGE \u003d \"lesson_list:\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Displays a list of all lessons in fitNUS.\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: lesson_list\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String TIMETABLE_ADD_ROUTINE_MESSAGE \u003d \"timetable_add_routine:\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Adds an existing routine to the timetable in fitNUS.\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: timetable_add_routine r/ROUTINE D/DAY T/TIME\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String TIMETABLE_ADD_LESSON_MESSAGE \u003d \"timetable_add_lesson:\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Adds an existing lesson to the timetable in fitNUS.\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: timetable_add_lesson n/LESSON D/DAY T/TIME\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String TIMETABLE_DELETE_SLOT_MESSAGE \u003d \"timetable_delete_slot:\\n\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Deletes the slot identified by its day and time.\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Format: timetable_delete_slot D/Day T/TIME\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + separator;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String STANDARDIZED_HELP_MESSAGE \u003d HELP_MESSAGE"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + CLEAR_MESSAGE"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + EXIT_MESSAGE"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ADD_HEIGHT_MESSAGE"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ADD_WEIGHT_MESSAGE"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + CALORIE_ADD_MESSAGE"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + CALORIE_MINUS_MESSAGE"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + EXERCISE_ADD_MESSAGE"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + EXERCISE_DELETE_MESSAGE"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + EXERCISE_EDIT_MESSAGE"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + EXERCISE_FIND_MESSAGE"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + EXERCISE_LIST_MESSAGE"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ROUTINE_CREATE_MESSAGE"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ROUTINE_DELETE_MESSAGE"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ROUTINE_FIND_MESSAGE"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ROUTINE_LIST_MESSAGE"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ROUTINE_ADD_EXERCISE_MESSAGE"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ROUTINE_DELETE_EXERCISE_MESSAGE"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + ROUTINE_VIEW_MESSAGE"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + LESSON_ADD_MESSAGE"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + LESSON_DELETE_MESSAGE"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + LESSON_EDIT_MESSAGE"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + LESSON_FIND_MESSAGE"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + LESSON_LIST_MESSAGE"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + TIMETABLE_ADD_ROUTINE_MESSAGE"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + TIMETABLE_ADD_LESSON_MESSAGE"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + TIMETABLE_DELETE_SLOT_MESSAGE;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final LinkedHashMap\u003cString, String\u003e privateMap \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static Set\u003cString\u003e privateSet;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static String filteredSearch;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public HelpCommand() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // for testing in HelpCommandTest class"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a HelpCommand to filter out the {@code String}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public HelpCommand(String keyword) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.keyword \u003d keyword.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        addMessagesToMap();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateSet \u003d keySet();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static String getFilteredSearch() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return filteredSearch;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Adds all help messages to the private HashMap."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private void addMessagesToMap() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"help\", HELP_MESSAGE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"clear\", CLEAR_MESSAGE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"exit\", EXIT_MESSAGE);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"height\", ADD_HEIGHT_MESSAGE);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"weight\", ADD_WEIGHT_MESSAGE);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"calorie_add\", CALORIE_ADD_MESSAGE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"calorie_minus\", CALORIE_MINUS_MESSAGE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"exercise_add\", EXERCISE_ADD_MESSAGE);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"exercise_delete\", EXERCISE_DELETE_MESSAGE);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"exercise_edit\", EXERCISE_EDIT_MESSAGE);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"exercise_find\", EXERCISE_FIND_MESSAGE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"exercise_list\", EXERCISE_LIST_MESSAGE);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"routine_create\", ROUTINE_CREATE_MESSAGE);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"routine_delete\", ROUTINE_DELETE_MESSAGE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"routine_find\", ROUTINE_FIND_MESSAGE);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"routine_list\", ROUTINE_LIST_MESSAGE);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"routine_add_exercise\", ROUTINE_ADD_EXERCISE_MESSAGE);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"routine_delete_exercise\", ROUTINE_DELETE_EXERCISE_MESSAGE);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"routine_view_exercise\", ROUTINE_VIEW_MESSAGE);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"lesson_add\", LESSON_ADD_MESSAGE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"lesson_delete\", LESSON_DELETE_MESSAGE);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"lesson_edit\", LESSON_EDIT_MESSAGE);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"lesson_find\", LESSON_FIND_MESSAGE);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"lesson_list\", LESSON_LIST_MESSAGE);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"timetable_add_routine\", TIMETABLE_ADD_ROUTINE_MESSAGE);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"timetable_add_lesson\", TIMETABLE_ADD_LESSON_MESSAGE);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        privateMap.put(\"timetable_delete_slot\", TIMETABLE_DELETE_SLOT_MESSAGE);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a set out of the key elements contained in the private HashMap"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @return a set having the keys of the HashMap"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Set\u003cString\u003e keySet() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return privateMap.keySet();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Gives a String of usage instructions for all commands containing the keyword as a char sequence."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @param keyword is the char sequence"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @return String that shows all commands containing the keyword"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private String printIfCharSequence(String keyword) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(privateSet);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        for (String command : privateSet) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            if (!command.contains(keyword)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            result \u003d result + privateMap.get(command);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private void setFilteredSearch() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (keyword \u003d\u003d null) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            filteredSearch \u003d STANDARDIZED_HELP_MESSAGE;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            filteredSearch \u003d printIfCharSequence(keyword);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (filteredSearch.isEmpty()) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            filteredSearch \u003d NO_COMMAND_MESSAGE + STANDARDIZED_HELP_MESSAGE;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        setFilteredSearch();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 254,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exercise/ExerciseAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Adds an exercise to fitNUS."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseAddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exercise_add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an exercise to fitNUS. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_EXERCISE + \"EXERCISE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_EXERCISE + \"Bench Press \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_TAG + \"Chest \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_TAG + \"Triceps\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New exercise added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in fitNUS\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Exercise toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Creates an ExerciseAddCommand to add the specified {@code Exercise}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseAddCommand(Exercise exercise) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        toAdd \u003d exercise;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (model.hasExercise(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        model.addExercise(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                || (other instanceof ExerciseAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ExerciseAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 7,
      "Licheng-Wu": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exercise/ExerciseDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Deletes an exercise identified using it\u0027s displayed index from fitNUS."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseDeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exercise_delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \": Deletes the exercise identified by the index number used in the displayed exercise list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_DELETE_EXERCISE_SUCCESS \u003d \"Deleted Exercise: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise exerciseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        model.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXERCISE_SUCCESS, exerciseToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                || (other instanceof ExerciseDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ExerciseDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "Licheng-Wu": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exercise/ExerciseEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXERCISES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ROUTINES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Edits the details of an existing exercise in fitNUS."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseEditCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exercise_edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the exercise identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"by the index number used in the displayed exercise list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"[\" + PREFIX_EXERCISE + \"EXERCISE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_EXERCISE + \"Shoulder Press \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_TAG + \"Deltoids\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_EDIT_EXERCISE_SUCCESS \u003d \"Edited Exercise: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in fitNUS\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final EditExerciseDescriptor editExerciseDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @param index of the exercise in the filtered exercise list to edit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @param editExerciseDescriptor details to edit the exercise with"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseEditCommand(Index index, EditExerciseDescriptor editExerciseDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(editExerciseDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.editExerciseDescriptor \u003d new EditExerciseDescriptor(editExerciseDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        List\u003cExercise\u003e lastShownList \u003d model.getFilteredExerciseList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise exerciseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise editedExercise \u003d createEditedExercise(exerciseToEdit, editExerciseDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!exerciseToEdit.isSameExercise(editedExercise) \u0026\u0026 model.hasExercise(editedExercise)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        model.setExercise(exerciseToEdit, editedExercise);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.updateFilteredRoutineList(PREDICATE_SHOW_ALL_ROUTINES);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Creates and returns a {@code Exercise} with the details of {@code exerciseToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * edited with {@code editExerciseDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static Exercise createEditedExercise(Exercise exerciseToEdit,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                                                 EditExerciseDescriptor editExerciseDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assert exerciseToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Name updatedName \u003d editExerciseDescriptor.getName().orElse(exerciseToEdit.getName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editExerciseDescriptor.getTags().orElse(exerciseToEdit.getTags());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new Exercise(updatedName, updatedTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!(other instanceof ExerciseEditCommand)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseEditCommand e \u003d (ExerciseEditCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 editExerciseDescriptor.equals(e.editExerciseDescriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Stores the details to edit the exercise with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * corresponding field value of the exercise."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static class EditExerciseDescriptor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public EditExerciseDescriptor() {}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public EditExerciseDescriptor(EditExerciseDescriptor toCopy) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            if (!(other instanceof EditExerciseDescriptor)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            EditExerciseDescriptor e \u003d (EditExerciseDescriptor) other;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 7,
      "nicholasyeo": 1,
      "khor-jingqian": 2,
      "Licheng-Wu": 176
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exercise/ExerciseFindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.ExerciseNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Finds and lists all exercises in fitNUS whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class ExerciseFindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exercise_find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all exercises whose names contain ALL of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" bench press morning\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final ExerciseNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates an ExerciseFindCommand to find the specified {@code ExerciseNameContainsKeywordsPredicate}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ExerciseFindCommand(ExerciseNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assert(predicate !\u003d null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        model.updateFilteredExerciseList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                String.format(Messages.MESSAGE_EXERCISES_LISTED_OVERVIEW, model.getFilteredExerciseList().size()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || (other instanceof ExerciseFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 predicate.equals(((ExerciseFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 12,
      "Licheng-Wu": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exercise/ExerciseListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXERCISES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Lists all exercises in fitNUS to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class ExerciseListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exercise_list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all exercises\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        model.updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return other instanceof ExerciseListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "nicholasyeo": 5,
      "Licheng-Wu": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/lessons/LessonAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.commands.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Adds a lesson to fitNUS."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonAddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lesson_add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a lesson to fitNUS. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_LESSON + \"LESSON \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_LESSON + \"CS2103T \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_TAG + \"core \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_TAG + \"priority\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New lesson added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"This lesson already exists in fitNUS\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final Lesson toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a LessonAddCommand to add the specified {@code Lesson}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonAddCommand(Lesson lesson) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        toAdd \u003d lesson;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (model.hasLesson(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model.addLesson(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || (other instanceof LessonAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 toAdd.equals(((LessonAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/lessons/LessonDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.commands.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Deletes a lesson identified using it\u0027s displayed index from fitNUS."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonDeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lesson_delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \": Deletes the lesson identified by the index number used in the displayed lesson list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_DELETE_LESSON_SUCCESS \u003d \"Deleted Lesson: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        List\u003cLesson\u003e lastShownList \u003d model.getFilteredLessonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lessonToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model.deleteLesson(lessonToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_LESSON_SUCCESS, lessonToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || (other instanceof LessonDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((LessonDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/lessons/LessonEditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.commands.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_LESSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Edits the details of an existing lesson in FitNUS."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonEditCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lesson_edit\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the lesson identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"by the index number used in the displayed lesson list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"[\" + PREFIX_LESSON + \"LESSON] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_LESSON + \"CS1231 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_TAG + \"core\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_EDIT_LESSON_SUCCESS \u003d \"Edited Lesson: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"This lesson already exists in fitNUS.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final EditLessonDescriptor editLessonDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @param index of the lesson in the filtered lesson list to edit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @param editLessonDescriptor details to edit the lesson with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonEditCommand(Index index, EditLessonDescriptor editLessonDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(editLessonDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.editLessonDescriptor \u003d new EditLessonDescriptor(editLessonDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        List\u003cLesson\u003e lastShownList \u003d model.getFilteredLessonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lessonToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson editedLesson \u003d createEditedLesson(lessonToEdit, editLessonDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!lessonToEdit.isSameLesson(editedLesson) \u0026\u0026 model.hasLesson(editedLesson)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model.setLesson(lessonToEdit, editedLesson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model.updateFilteredLessonList(PREDICATE_SHOW_ALL_LESSONS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_LESSON_SUCCESS, editedLesson));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates and returns a {@code Lesson} with the details of {@code lessonToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * edited with {@code editLessonDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static Lesson createEditedLesson(Lesson lessonToEdit, EditLessonDescriptor editLessonDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assert lessonToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Name updatedName \u003d editLessonDescriptor.getName().orElse(lessonToEdit.getName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editLessonDescriptor.getTags().orElse(lessonToEdit.getTags());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new Lesson(updatedName, updatedTags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!(other instanceof LessonEditCommand)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand e \u003d (LessonEditCommand) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 editLessonDescriptor.equals(e.editLessonDescriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Stores the details to edit the lesson with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * corresponding field value of the lesson."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static class EditLessonDescriptor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public EditLessonDescriptor() {}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public EditLessonDescriptor(EditLessonDescriptor toCopy) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, tags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            if (!(other instanceof EditLessonDescriptor)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            EditLessonDescriptor e \u003d (EditLessonDescriptor) other;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 182,
      "nicholasyeo": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/lessons/LessonFindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.commands.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.LessonNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Finds and lists all lessons in fitNUS whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonFindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lesson_find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all lessons whose names contain ANY of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" MA1521 geq cs\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final LessonNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a LessonFindCommand to find the specified {@code LessonNameContainsKeywordsPredicate}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonFindCommand(LessonNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assert(predicate !\u003d null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model.updateFilteredLessonList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                String.format(Messages.MESSAGE_LESSONS_LISTED_OVERVIEW, model.getFilteredLessonList().size()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || (other instanceof LessonFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 predicate.equals(((LessonFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/lessons/LessonListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.commands.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_LESSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Lists all lessons in fitNUS to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lesson_list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all lessons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model.updateFilteredLessonList(PREDICATE_SHOW_ALL_LESSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return other instanceof LessonListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 25,
      "nicholasyeo": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/routines/RoutineAddExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Adds an exercise to a routine in fitNUS."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineAddExerciseCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"routine_add_exercise\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an existing exercise to a routine in fitNUS. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_ROUTINE + \"ROUTINE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_EXERCISE + \"EXERCISE\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + PREFIX_ROUTINE + \"Leg Day Session \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_EXERCISE + \"Squats \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exercise added to Routine: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_MISSING_ROUTINE \u003d \"This routine does not exist in fitNUS\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_MISSING_EXERCISE \u003d \"This exercise does not exist in fitNUS\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"This exercise already exists in the routine!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Routine routineToAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Exercise exerciseToAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a RoutineAddExerciseCommand to add the specified {@code Exercise} to the {@code Routine}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineAddExerciseCommand(Routine routine, Exercise exercise) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(routine);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routineToAdd \u003d routine;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        exerciseToAdd \u003d exercise;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!model.hasRoutine(routineToAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_ROUTINE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (!model.hasExercise(exerciseToAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_EXERCISE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            model.addExerciseToRoutine(routineToAdd, exerciseToAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new CommandResult(String.format(String.format(MESSAGE_SUCCESS, routineToAdd), exerciseToAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (DuplicateExerciseException error) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof RoutineAddExerciseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 routineToAdd.equals(((RoutineAddExerciseCommand) other).routineToAdd))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 exerciseToAdd.equals(((RoutineAddExerciseCommand) other).exerciseToAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iqbxl": 12,
      "khor-jingqian": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/routines/RoutineCreateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Creates a new routine in fitNUS."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineCreateCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"routine_create\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new routine in fitNUS. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_ROUTINE + \"ROUTINE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + PREFIX_ROUTINE + \"Leg Day Session \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New routine added: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ROUTINE \u003d \"This routine already exists in fitNUS\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Routine toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a RoutineCreateCommand to create the specified {@code Routine}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineCreateCommand(Routine routine) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(routine);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        toAdd \u003d routine;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (model.hasRoutine(toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ROUTINE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.addRoutine(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof RoutineCreateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RoutineCreateCommand) other).toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "iqbxl": 5,
      "khor-jingqian": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/routines/RoutineDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Deletes a routine identified using it\u0027s displayed index from fitNUS."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineDeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"routine_delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \": Deletes the routine identified by the index number used in the displayed routine list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_DELETE_ROUTINE_SUCCESS \u003d \"Deleted Routine: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a RoutineDeleteCommand to delete the specified {@code Index} of the routine"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cRoutine\u003e lastShownList \u003d model.getFilteredRoutineList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ROUTINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routineToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.deleteRoutine(routineToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ROUTINE_SUCCESS, routineToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof RoutineDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RoutineDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 4,
      "khor-jingqian": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/routines/RoutineDeleteExerciseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Deletes an exercise from a routine in fitNUS."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineDeleteExerciseCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"routine_delete_exercise\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes the exercise from the specified routine. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_ROUTINE + \"ROUTINE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_EXERCISE + \"EXERCISE\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + PREFIX_ROUTINE + \"Leg Day Session \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_EXERCISE + \"Squats \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_DELETE_EXERCISE_SUCCESS \u003d \"Deleted Exercise from Routine: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_MISSING_ROUTINE \u003d \"This routine does not exist in fitNUS!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_MISSING_EXERCISE \u003d \"This exercise does not exist within this routine!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Routine routine;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Exercise exercise;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a RoutineDeleteExerciseCommand to delete the specified {@code Exercise} from the {@code Routine}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineDeleteExerciseCommand(Routine routine, Exercise exercise) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(routine);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.routine \u003d routine;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.exercise \u003d exercise;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!model.hasRoutine(routine)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_ROUTINE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (!model.hasExercise(exercise)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_EXERCISE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            model.deleteExerciseFromRoutine(routine, exercise);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new CommandResult(String.format(String.format(MESSAGE_DELETE_EXERCISE_SUCCESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    routine), exercise));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (ExerciseNotFoundException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_EXERCISE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof RoutineDeleteExerciseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 exercise.equals(((RoutineDeleteExerciseCommand) other).exercise) // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 routine.equals(((RoutineDeleteExerciseCommand) other).routine)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 12,
      "khor-jingqian": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/routines/RoutineFindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.RoutineNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Finds and lists all routines in fitNUS whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class RoutineFindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"routine_find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all routines whose names contain ALL of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Lower body\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final RoutineNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a RoutineFindCommand to find the specified {@code RoutineNameContainsKeywordsPredicate}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public RoutineFindCommand(RoutineNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assert(predicate !\u003d null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.updateFilteredRoutineList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                String.format(Messages.MESSAGE_ROUTINES_LISTED_OVERVIEW, model.getFilteredRoutineList().size()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || (other instanceof RoutineFindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 predicate.equals(((RoutineFindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 12,
      "khor-jingqian": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/routines/RoutineListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ROUTINES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Lists all routines in fitNUS to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"routine_list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all routines\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.updateFilteredRoutineList(PREDICATE_SHOW_ALL_ROUTINES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return other instanceof RoutineListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 6,
      "nicholasyeo": 5,
      "khor-jingqian": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/routines/RoutineViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Views all exercises for a specified routine in fitNUS."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineViewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"routine_view\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Views a certain routine by index \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 3\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Routine shown above:\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_OUT_OF_BOUNDS_ROUTINE \u003d \"This routine index is out of bounds!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Index toView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Creates a RoutineViewCommand to view all exercises for the specified {@code Index} of the routine"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineViewCommand(Index index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        toView \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cRoutine\u003e lastShownList \u003d model.getFilteredRoutineList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (toView.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new CommandException(MESSAGE_OUT_OF_BOUNDS_ROUTINE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routineToView \u003d lastShownList.get(toView.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.viewRoutine(routineToView);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof RoutineViewCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 this.toView.equals(((RoutineViewCommand) other).toView)); // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 4,
      "khor-jingqian": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/timetable/TimetableAddLessonCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.commands.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.timetable.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.timetable.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableAddLessonCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"timetable_add_lesson\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an existing lesson to the timetable in fitNUS. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_LESSON + \"LESSON \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_DAY + \"DAY \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_TIME + \"TIME\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_LESSON + \"CS2030 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_DAY + \"Monday \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_TIME + \"1600-1800\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Slot added to Timetable: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_MISSING_LESSON \u003d \"This lesson does not exist in fitNUS\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SLOT \u003d \"This slot already exists in your timetable\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_OVERLAP_SLOT \u003d \"This slot overlaps with another slot in your timetable\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Lesson lesson;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Day day;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Creates a TimetableAddLessonCommand to add the specified {@code Lesson} into Timetable."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public TimetableAddLessonCommand(Lesson lesson, Day day, Duration duration) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireAllNonNull(lesson, day, duration);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!model.hasLesson(lesson)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_LESSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Lesson lessonToAdd \u003d model.retrieveLesson(lesson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot slot \u003d new Slot(lessonToAdd, day, duration);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (model.hasSlot(slot)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SLOT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        } else if (model.hasOverlappingSlot(slot)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new CommandException(MESSAGE_OVERLAP_SLOT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        model.addSlotToTimetable(slot);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, slot));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || (other instanceof TimetableAddLessonCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 lesson.equals(((TimetableAddLessonCommand) other).lesson)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 day.equals(((TimetableAddLessonCommand) other).day)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 duration.isSameDuration(((TimetableAddLessonCommand) other).duration));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 7,
      "nicholasyeo": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/timetable/TimetableAddRoutineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.commands.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.timetable.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.timetable.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableAddRoutineCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"timetable_add_routine\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an existing routine to the timetable in fitNUS. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + PREFIX_ROUTINE + \"ROUTINE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_DAY + \"DAY \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_TIME + \"TIME\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_ROUTINE + \"Leg Day Session \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_DAY + \"Monday \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_TIME + \"1600-1800\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Slot added to Timetable: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_MISSING_ROUTINE \u003d \"This routine does not exist in fitNUS\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SLOT \u003d \"This slot already exists in your timetable\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_OVERLAP_SLOT \u003d \"This slot overlaps with another slot in your timetable\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Routine routine;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Day day;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Creates a TimetableAddRoutineCommand to add the specified {@code Routine} into Timetable."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public TimetableAddRoutineCommand(Routine routine, Day day, Duration duration) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireAllNonNull(routine, day, duration);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.routine \u003d routine;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!model.hasRoutine(routine)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_ROUTINE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Routine routineToAdd \u003d model.retrieveRoutine(routine);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot slot \u003d new Slot(routineToAdd, day, duration);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (model.hasSlot(slot)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SLOT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        } else if (model.hasOverlappingSlot(slot)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new CommandException(MESSAGE_OVERLAP_SLOT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        model.addSlotToTimetable(slot);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, slot));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || (other instanceof TimetableAddRoutineCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 routine.equals(((TimetableAddRoutineCommand) other).routine)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 day.equals(((TimetableAddRoutineCommand) other).day)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 duration.isSameDuration(((TimetableAddRoutineCommand) other).duration));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 5,
      "nicholasyeo": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/timetable/TimetableDeleteSlotCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.commands.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Deletes a slot from the timetable in fitNUS."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableDeleteSlotCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"timetable_delete_slot\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes the slot identified by its day and time. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_DAY + \"DAY \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_TIME + \"TIME\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_DAY + \"Monday \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            + PREFIX_TIME + \"1600-1800\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_DELETE_SLOT_SUCCESS \u003d \"Deleted Slot: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_MISSING_SLOT \u003d \"This slot does not exist in your timetable.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Slot slotToFind;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Creates a TimetableDeleteSlotCommand to delete the specified {@code Slot} from Timetable."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public TimetableDeleteSlotCommand(Slot slot) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        slotToFind \u003d slot;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        List\u003cSlot\u003e lastShownList \u003d model.getFilteredSlotList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        boolean hasSlot \u003d lastShownList.stream().anyMatch(slotToFind::isSameSlot);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!hasSlot) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new CommandException(MESSAGE_MISSING_SLOT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot slotToDelete \u003d lastShownList.stream().filter(slotToFind::isSameSlot).findFirst().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        model.deleteSlotFromTimetable(slotToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SLOT_SUCCESS, slotToDelete));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || (other instanceof TimetableDeleteSlotCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 slotToFind.equals(((TimetableDeleteSlotCommand) other).slotToFind));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "nicholasyeo": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddHeightCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.commands.AddHeightCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Height;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "public class AddHeightCommandParser implements Parser\u003cAddHeightCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddHeightCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * and returns an AddHeightCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public AddHeightCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_HEIGHT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_HEIGHT)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddHeightCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_HEIGHT).size() !\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddHeightCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Height height \u003d ParserUtil.parseHeight(argMultimap.getValue(PREFIX_HEIGHT).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return new AddHeightCommand(height);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "patricktan6": 40,
      "nicholasyeo": 2,
      "khor-jingqian": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddWeightCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.commands.AddWeightCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Weight;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class AddWeightCommandParser implements Parser\u003cAddWeightCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddWeightCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * and returns an AddWeightCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public AddWeightCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_WEIGHT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_WEIGHT)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddWeightCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_WEIGHT).size() !\u003d 1) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddWeightCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Weight weight \u003d ParserUtil.parseWeight(argMultimap.getValue(PREFIX_WEIGHT).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return new AddWeightCommand(weight);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "patricktan6": 39,
      "nicholasyeo": 2,
      "khor-jingqian": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CalorieAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CalorieAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Parses input arguments and creates a new CalorieAddCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieAddCommandParser implements Parser\u003cCalorieAddCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CalorieAddCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * and returns an CalorieAddCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CalorieAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CALORIE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CALORIE)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalorieAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_CALORIE).size() !\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalorieAddCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Calorie calorie \u003d ParserUtil.parseCalorie(argMultimap.getValue(PREFIX_CALORIE).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new CalorieAddCommand(calorie);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 3,
      "khor-jingqian": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CalorieMinusCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CalorieMinusCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Parses input arguments and creates a new CalorieMinusCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieMinusCommandParser implements Parser\u003cCalorieMinusCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CalorieMinusCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * and returns an CalorieMinusCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CalorieMinusCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CALORIE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CALORIE)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalorieMinusCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_CALORIE).size() !\u003d 1) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalorieMinusCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Calorie calorie \u003d ParserUtil.parseCalorie(argMultimap.getValue(PREFIX_CALORIE).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new CalorieMinusCommand(calorie);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 3,
      "khor-jingqian": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Prefix PREFIX_LESSON \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Prefix PREFIX_EXERCISE \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final Prefix PREFIX_ROUTINE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static final Prefix PREFIX_HEIGHT \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public static final Prefix PREFIX_WEIGHT \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Prefix PREFIX_DAY \u003d new Prefix(\"D/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"T/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final Prefix PREFIX_CALORIE \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "patricktan6": 2,
      "nicholasyeo": 1,
      "-": 11,
      "khor-jingqian": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FitNusParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.commands.AddHeightCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "import seedu.address.logic.commands.AddWeightCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CalorieAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CalorieMinusCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseAddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseDeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseEditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseFindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonAddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonDeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonEditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonFindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineAddExerciseCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineCreateCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineDeleteCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineDeleteExerciseCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineFindCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineViewCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.timetable.TimetableAddLessonCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.timetable.TimetableAddRoutineCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.timetable.TimetableDeleteSlotCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.exercise.ExerciseAddCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.exercise.ExerciseDeleteCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.exercise.ExerciseEditCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.exercise.ExerciseFindCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.lessons.LessonAddCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.lessons.LessonDeleteCommandParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.lessons.LessonEditCommandParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.lessons.LessonFindCommandParser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.routines.RoutineAddExerciseCommandParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.routines.RoutineCreateCommandParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.routines.RoutineDeleteCommandParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.routines.RoutineDeleteExerciseCommandParser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.routines.RoutineFindCommandParser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.routines.RoutineViewCommandParser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.timetable.TimetableAddLessonCommandParser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.timetable.TimetableAddRoutineCommandParser;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.timetable.TimetableDeleteSlotCommandParser;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class FitNusParser {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new HelpCommand(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case AddHeightCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new AddHeightCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case AddWeightCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new AddWeightCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case CalorieAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new CalorieAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case CalorieMinusCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new CalorieMinusCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        case ExerciseAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return new ExerciseAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case ExerciseDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new ExerciseDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        case ExerciseEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return new ExerciseEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case ExerciseFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new ExerciseFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case ExerciseListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new ExerciseListCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        case RoutineCreateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new RoutineCreateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        case RoutineDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return new RoutineDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case RoutineFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new RoutineFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        case RoutineListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new RoutineListCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        case RoutineAddExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new RoutineAddExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case RoutineDeleteExerciseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new RoutineDeleteExerciseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        case RoutineViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new RoutineViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case LessonAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new LessonAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case LessonDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new LessonDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case LessonEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new LessonEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case LessonFindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new LessonFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        case LessonListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new LessonListCommand();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        case TimetableAddRoutineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return new TimetableAddRoutineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        case TimetableAddLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return new TimetableAddLessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        case TimetableDeleteSlotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return new TimetableDeleteSlotCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 53,
      "patricktan6": 3,
      "nicholasyeo": 17,
      "-": 51,
      "khor-jingqian": 25,
      "Licheng-Wu": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Height;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Weight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.timetable.Day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.timetable.Duration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Name.isValidLength(trimmedName)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Parses a {@code String day} into a {@code Day}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @throws ParseException if the given {@code day} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static Day parseDay(String day) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Day dayEnum \u003d Day.getDayEnum(day.trim().toLowerCase());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (Day.isUnknownDay(dayEnum)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return dayEnum;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Parses a {@code String duration} into a {@code Duration}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @throws ParseException if the given {@code duration} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static Duration parseDuration(String duration) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String trimmedDuration \u003d duration.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Duration.isValidDuration(trimmedDuration)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(Duration.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String[] timeSplit \u003d trimmedDuration.split(\"-\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int startHour \u003d Integer.parseInt(timeSplit[0].substring(0, 2));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int startMinute \u003d Integer.parseInt(timeSplit[0].substring(2, 4));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LocalTime startTime \u003d LocalTime.of(startHour, startMinute);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int endHour \u003d Integer.parseInt(timeSplit[1].substring(0, 2));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int endMinute \u003d Integer.parseInt(timeSplit[1].substring(2, 4));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LocalTime endTime \u003d LocalTime.of(endHour, endMinute);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Duration.isValidDuration(startTime, endTime)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(Duration.MESSAGE_CONSTRAINTS_ORDER);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new Duration(startTime, endTime);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final Set\u003cString\u003e lowerCaseTagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            String lowerCaseTagName \u003d tagName.toLowerCase();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (lowerCaseTagSet.contains(lowerCaseTagName)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                throw new ParseException(\"Tags are case-sensitive! Please refrain from adding duplicates.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            lowerCaseTagSet.add(lowerCaseTagName);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Parses {@code String height} into a {@code Height}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static Height parseHeight(String height) throws ParseException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        requireNonNull(height);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        String trimmedHeight \u003d height.trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Height.isValidHeight(trimmedHeight)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(Height.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        double parsedHeight \u003d Double.parseDouble(trimmedHeight);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Height.isValidHeight(parsedHeight)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(Height.MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new Height(parsedHeight);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Parses {@code String weight} into a {@code Weight}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static Weight parseWeight(String weight) throws ParseException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        requireNonNull(weight);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        String trimmedWeight \u003d weight.trim();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Weight.isValidWeight(trimmedWeight)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(Weight.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        double parsedWeight \u003d Double.parseDouble(trimmedWeight);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Weight.isValidWeight(parsedWeight)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(Weight.MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new Weight(parsedWeight);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Parses a {@code String calorie} into a Calorie."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @throws ParseException if the given {@code calorie} is invalid."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static Calorie parseCalorie(String calorie) throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(calorie);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String trimmedCalorie \u003d calorie.trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Calorie.isValidCalorie(trimmedCalorie)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(Calorie.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int parsedCalorie \u003d Integer.parseInt(trimmedCalorie);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Calorie.isValidCalorie(parsedCalorie)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(Calorie.MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new Calorie(parsedCalorie);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "nicholasyeo": 71,
      "patricktan6": 12,
      "-": 90,
      "khor-jingqian": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exercise/ExerciseAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new ExerciseAddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseAddCommandParser implements Parser\u003cExerciseAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExerciseAddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * and returns an ExerciseAddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EXERCISE, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EXERCISE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExerciseAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_EXERCISE).size() !\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExerciseAddCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_EXERCISE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise exercise \u003d new Exercise(name, tagList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new ExerciseAddCommand(exercise);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 6,
      "nicholasyeo": 1,
      "khor-jingqian": 4,
      "Licheng-Wu": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exercise/ExerciseDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new ExerciseDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseDeleteCommandParser implements Parser\u003cExerciseDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExerciseDeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * and returns a ExerciseDeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExerciseDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new ExerciseDeleteCommand(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "nicholasyeo": 5,
      "Licheng-Wu": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exercise/ExerciseEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseEditCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Parses input arguments and creates a new ExerciseEditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseEditCommandParser implements Parser\u003cExerciseEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExerciseEditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * and returns an ExerciseEditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EXERCISE, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    ExerciseEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        EditExerciseDescriptor editExerciseDescriptor \u003d new EditExerciseDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EXERCISE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            editExerciseDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_EXERCISE).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editExerciseDescriptor::setTags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!editExerciseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new ParseException(ExerciseEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new ExerciseEditCommand(index, editExerciseDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 4,
      "nicholasyeo": 4,
      "Licheng-Wu": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exercise/ExerciseFindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseFindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.ExerciseNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new ExerciseFindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class ExerciseFindCommandParser implements Parser\u003cExerciseFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExerciseFindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a ExerciseFindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ExerciseFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExerciseFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new ExerciseFindCommand(new ExerciseNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 8,
      "Licheng-Wu": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/lessons/LessonAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.parser.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new LessonAddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonAddCommandParser implements Parser\u003cLessonAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LessonAddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a LessonAddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_LESSON, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_LESSON)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LessonAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_LESSON).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lesson \u003d new Lesson(name, tagList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new LessonAddCommand(lesson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 55,
      "nicholasyeo": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/lessons/LessonDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.parser.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new LessonDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonDeleteCommandParser implements Parser\u003cLessonDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LessonDeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a LessonDeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LessonDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new LessonDeleteCommand(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 26,
      "nicholasyeo": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/lessons/LessonEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.parser.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonEditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonEditCommand.EditLessonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new LessonEditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonEditCommandParser implements Parser\u003cLessonEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LessonEditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a LessonEditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_LESSON, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, LessonEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Index index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        EditLessonDescriptor editLessonDescriptor \u003d new EditLessonDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LESSON).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            editLessonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_LESSON).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editLessonDescriptor::setTags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!editLessonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new ParseException(LessonEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new LessonEditCommand(index, editLessonDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 69,
      "nicholasyeo": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/lessons/LessonFindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.parser.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonFindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.LessonNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new LessonFindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonFindCommandParser implements Parser\u003cLessonFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LessonFindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a LessonFindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LessonFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new LessonFindCommand(new LessonNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/routines/RoutineAddExerciseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineAddExerciseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new RoutineAddExerciseCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineAddExerciseCommandParser implements Parser\u003cRoutineAddExerciseCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineAddExerciseCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a RoutineAddExerciseCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineAddExerciseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROUTINE, PREFIX_EXERCISE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROUTINE, PREFIX_EXERCISE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    RoutineAddExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_ROUTINE).size() !\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineAddExerciseCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_EXERCISE).size() !\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineAddExerciseCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name routineName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_ROUTINE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Name exerciseName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_EXERCISE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routine \u003d new Routine(routineName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Exercise exercise \u003d new Exercise(exerciseName, tagList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new RoutineAddExerciseCommand(routine, exercise);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 8,
      "nicholasyeo": 1,
      "khor-jingqian": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/routines/RoutineCreateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineCreateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new RoutineCreateCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineCreateCommandParser implements Parser\u003cRoutineCreateCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineCreateCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a RoutineCreateCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineCreateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROUTINE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROUTINE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineCreateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_ROUTINE).size() !\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineCreateCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_ROUTINE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routine \u003d new Routine(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new RoutineCreateCommand(routine);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "nicholasyeo": 1,
      "khor-jingqian": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/routines/RoutineDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Parses input arguments and creates a new RoutineDeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineDeleteCommandParser implements Parser\u003cRoutineDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineDeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * and returns a RoutineDeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return new RoutineDeleteCommand(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 4,
      "khor-jingqian": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/routines/RoutineDeleteExerciseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineDeleteExerciseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new RoutineDeleteExerciseCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineDeleteExerciseCommandParser implements Parser\u003cRoutineDeleteExerciseCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineDeleteExerciseCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a RoutineDeleteExerciseCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineDeleteExerciseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROUTINE, PREFIX_EXERCISE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROUTINE, PREFIX_EXERCISE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    RoutineDeleteExerciseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_ROUTINE).size() !\u003d 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineDeleteExerciseCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_EXERCISE).size() !\u003d 1) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineDeleteExerciseCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name routineName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_ROUTINE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Name exerciseName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_EXERCISE).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routine \u003d new Routine(routineName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Exercise exercise \u003d new Exercise(exerciseName, tagList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new RoutineDeleteExerciseCommand(routine, exercise);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 8,
      "nicholasyeo": 1,
      "khor-jingqian": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/routines/RoutineFindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineFindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.RoutineNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Parses input arguments and creates a new RoutineFindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class RoutineFindCommandParser implements Parser\u003cRoutineFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineFindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * and returns a RoutineFindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public RoutineFindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new RoutineFindCommand(new RoutineNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 9,
      "khor-jingqian": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/routines/RoutineViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Parses input arguments and creates a new RoutineViewCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineViewCommandParser implements Parser\u003cRoutineViewCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineViewCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * and returns a RoutineViewCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new RoutineViewCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "khor-jingqian": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/timetable/TimetableAddLessonCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.parser.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.timetable.TimetableAddLessonCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.timetable.Day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.timetable.Duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * Parses input arguments and creates a new TimetableAddLessonCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableAddLessonCommandParser implements Parser\u003cTimetableAddLessonCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineAddExerciseCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * and returns an RoutineAddExerciseCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public TimetableAddLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_LESSON, PREFIX_DAY, PREFIX_TIME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_LESSON, PREFIX_DAY, PREFIX_TIME)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    TimetableAddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_LESSON).size() !\u003d 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableAddLessonCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_DAY).size() !\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableAddLessonCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_TIME).size() !\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableAddLessonCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Name lessonName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_LESSON).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Lesson lesson \u003d new Lesson(lessonName, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Day day \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new TimetableAddLessonCommand(lesson, day, duration);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 8,
      "nicholasyeo": 50,
      "khor-jingqian": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/timetable/TimetableAddRoutineCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.parser.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.timetable.TimetableAddRoutineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.timetable.Day;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.timetable.Duration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * Parses input arguments and creates a new TimetableAddRoutineCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableAddRoutineCommandParser implements Parser\u003cTimetableAddRoutineCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineAddExerciseCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * and returns an RoutineAddExerciseCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public TimetableAddRoutineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROUTINE, PREFIX_DAY, PREFIX_TIME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROUTINE, PREFIX_DAY, PREFIX_TIME)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    TimetableAddRoutineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_ROUTINE).size() !\u003d 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableAddRoutineCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_DAY).size() !\u003d 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableAddRoutineCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_TIME).size() !\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableAddRoutineCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Name routineName \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_ROUTINE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Routine routine \u003d new Routine(routineName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Day day \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new TimetableAddRoutineCommand(routine, day, duration);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "nicholasyeo": 55,
      "khor-jingqian": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/timetable/TimetableDeleteSlotCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.parser.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.timetable.TimetableDeleteSlotCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.timetable.Day;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.timetable.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * Parses input arguments and creates a new TimetableDeleteSlotCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableDeleteSlotCommandParser implements Parser\u003cTimetableDeleteSlotCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RoutineAddExerciseCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * and returns an RoutineAddExerciseCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public TimetableDeleteSlotCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DAY, PREFIX_TIME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DAY, PREFIX_TIME)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    TimetableDeleteSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_DAY).size() !\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableDeleteSlotCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (argMultimap.getAllValues(PREFIX_TIME).size() !\u003d 1) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableDeleteSlotCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Day day \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_DAY).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot slotToFind \u003d new Slot(day, duration);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new TimetableDeleteSlotCommand(slotToFind);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "nicholasyeo": 51,
      "khor-jingqian": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/FitNus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Body;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Height;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Weight;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.CalorieLog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.DailyCalorie;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.UniqueExerciseList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.UniqueLessonList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.UniqueRoutineList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.timetable.Timetable;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Wraps all data at the fitNUS level"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Duplicates are not allowed (by .isSameExercise comparison)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class FitNus implements ReadOnlyFitNus {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final UniqueExerciseList exercises;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final UniqueRoutineList routines;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final UniqueLessonList lessons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Timetable timetable;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final CalorieLog calorieLog;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final ObservableList\u003cBody\u003e body;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * among constructors."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exercises \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routines \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lessons \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        calorieLog \u003d new CalorieLog();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        body \u003d FXCollections.observableArrayList(new Body());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public FitNus() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a fitNUS using the data in the {@code toBeCopied}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public FitNus(ReadOnlyFitNus toBeCopied) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    //// user-level operations"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Adds the height of the user to fitNUS."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addHeight(Height height) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Body newBody \u003d this.body.get(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        newBody.setHeight(height);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        body.set(0, newBody);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Adds the weight of the user to fitNUS."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addWeight(Weight weight) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Body newBody \u003d this.body.get(0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        newBody.setWeight(weight);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        body.set(0, newBody);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns the height of the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Height getHeight() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Body newBody \u003d this.body.get(0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return newBody.getHeight();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns the weight of the user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Weight getWeight() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Body newBody \u003d this.body.get(0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return newBody.getWeight();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns the BMI of the user."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public double getBmi() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Body newBody \u003d body.get(0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return newBody.getBmi();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns the number of calories for today."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public int getCalories() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return calorieLog.getCalories();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Replaces the contents of exercise list with {@code exercises}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code exercises} must not contain duplicate exercises."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercises(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.exercises.setExercises(exercises);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the contents of routines list with {@code routines}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code routines} must not contain duplicate routines."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutines(List\u003cRoutine\u003e routines) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.routines.setRoutines(routines);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Replaces the contents of lesson list with {@code lessons}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.lessons.setLessons(lessons);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Replaces the contents of slot list with {@code slots}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * {@code slots} must not contain duplicate slots or overlapping slots."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlots(List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        timetable.setSlots(slots);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Resets the existing data of this {@code FitNus} with {@code newData}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void resetData(ReadOnlyFitNus newData) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        setExercises(newData.getExerciseList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        setLessons(newData.getLessonList());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        setRoutines(newData.getRoutineList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        setSlots(newData.getSlotList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        addCalorieEntries(newData.getDailyCalorieList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Body newBody \u003d newData.getBody().get(0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        addHeight(newBody.getHeight());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        addWeight(newBody.getWeight());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    //// body-level operations"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if an exercise with the same identity as {@code exercise} exists in fitNUS."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return exercises.contains(exercise);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if a routine with the same identity as {@code routine} exists in fitNUS."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean hasRoutine(Routine r) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(r);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return routines.contains(r);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if a lesson with the same identity as {@code lesson} exists in fitNUS."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return lessons.contains(lesson);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if a slot with the same identity as {@code slot} exists in the timetable."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasSlot(Slot slot) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return timetable.hasSlot(slot);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if a slot has an overlapping duration with another {@code slot} in the timetable."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasOverlappingDurationInSlot(Slot slot) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return timetable.hasOverlapDuration(slot);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if a dailyCalorie entry with the same identity as {@code dailyCalorie} exists in fitNUS."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean hasDailyCalorie(DailyCalorie dailyCalorie) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(dailyCalorie);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return calorieLog.contains(dailyCalorie);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Adds an exercise to fitNUS."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * The exercise must not already exist in fitNUS."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addExercise(Exercise e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        exercises.add(e);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Adds a routine to fitNUS."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The routine must not already exist in fitNUS."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void addRoutine(Routine routine) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        routines.add(routine);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Adds a lesson to fitNUS."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The lesson must not already exist in fitNUS."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void addLesson(Lesson e) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lessons.add(e);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Adds an exercise in fitNUS to an existing routine."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The exercise must not already exist in the routine."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void addExerciseToRoutine(Routine r, Exercise e) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(r);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(e);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Exercise retrievedExercise \u003d exercises.retrieveExercise(e);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Routine retrievedRoutine \u003d routines.retrieveRoutine(r);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        routines.addExercise(retrievedRoutine, retrievedExercise);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Adds a slot to the timetable in fitNUS."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The slot must not already exist nor overlap with any of the slots in the timetable."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void addSlotToTimetable(Slot slot) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        timetable.addSlot(slot);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Adds all the daily calorie entries into the calorie log."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @param entries Collection of all the entries of daily calorie."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void addCalorieEntries(List\u003cDailyCalorie\u003e entries) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        calorieLog.setCalorieLog(entries);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Adds calories into today\u0027s calorie log."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param calorie The amount of calories that the user wants to add."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addCalories(Calorie calorie) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        calorieLog.addCalories(calorie);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Deducts calories from today\u0027s calorie log."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param calorie The amount of calories that the user wants to deduct."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void minusCalories(Calorie calorie) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        calorieLog.minusCalories(calorie);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Replaces the given exercise {@code target} in the list with {@code editedExercise}."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code target} must exist in FitNUS."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * The exercise identity of {@code editedExercise} must not be the same as another existing exercise in FitNUS."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(editedExercise);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exercises.setExercise(target, editedExercise);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routines.setExercise(target, editedExercise);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Replaces the given lesson {@code target} in the list with {@code editedLesson}."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code target} must exist in FitNUS."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The lesson identity of {@code editedLesson} must not be the same as another existing lesson in FitNUS."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(editedLesson);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lessons.setLesson(target, editedLesson);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        timetable.setSlot(target, editedLesson);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Removes {@code key} from {@code fitNUS}."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code key} must exist in fitNUS."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void removeExercise(Exercise key) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exercises.remove(key);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routines.deleteExercise(key);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Removes {@code key} from {@code fitNUS}."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code key} must exist in fitNUS."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void removeRoutine(Routine key) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        routines.remove(key);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        timetable.deleteSlot(key);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Removes {@code key} from {@code fitNUS}."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code key} must exist in fitNUS."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void removeLesson(Lesson key) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lessons.remove(key);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        timetable.deleteSlot(key);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Removes {@code exercise} from {@code routine}."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code exercise} must exist in {@code routine}."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void deleteExerciseFromRoutine(Routine routine, Exercise exercise) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(routine);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Exercise retrievedExercise \u003d exercises.retrieveExercise(exercise);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Routine retrievedRoutine \u003d routines.retrieveRoutine(routine);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        routines.deleteExerciseFromRoutine(retrievedRoutine, retrievedExercise);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Removes {@code key} from timetable in {@code fitNUS}."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * {@code key} must exist in timetable."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void removeSlotFromTimetable(Slot key) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        timetable.deleteSlot(key);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Retrieves the routine object from UniqueRoutineList that the user specified."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @param routine Routine object that the user wants."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @return Routine object that exists within fitNUS that the user is looking for."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Routine retrieveRoutine(Routine routine) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return routines.retrieveRoutine(routine);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Retrieves the lesson object from UniqueLessonList that the user specified."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @param lesson Lesson object that the user wants."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @return Lesson object that exists within fitNUS that the user is looking for."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Lesson retrieveLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return lessons.retrieveLesson(lesson);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return lessons.asUnmodifiableObservableList().size() + \" lessons\";"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cExercise\u003e getExerciseList() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return exercises.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cRoutine\u003e getRoutineList() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return routines.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return lessons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cSlot\u003e getSlotList() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return timetable.getSlotList();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cDailyCalorie\u003e getDailyCalorieList() {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return calorieLog.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cBody\u003e getBody() {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        ObservableList\u003cBody\u003e unmodifiableBody \u003d FXCollections.unmodifiableObservableList(body);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return unmodifiableBody;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || (other instanceof FitNus // instanceof handles nulls"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 lessons.equals(((FitNus) other).lessons));"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return lessons.hashCode();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 193,
      "nicholasyeo": 62,
      "patricktan6": 18,
      "-": 51,
      "khor-jingqian": 64,
      "Licheng-Wu": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Body;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Height;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Weight;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.DailyCalorie;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    Predicate\u003cExercise\u003e PREDICATE_SHOW_ALL_EXERCISES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    Predicate\u003cRoutine\u003e PREDICATE_SHOW_ALL_ROUTINES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    Predicate\u003cLesson\u003e PREDICATE_SHOW_ALL_LESSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    Predicate\u003cDailyCalorie\u003e PREDICATE_SHOW_ALL_LOGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns the user prefs\u0027 fitNUS file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    Path getFitNusFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Sets the user prefs\u0027 fitNUS file path."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    void setFitNusFilePath(Path fitNusFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Replaces fitNUS data with the data in {@code fitNus}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    void setFitNus(ReadOnlyFitNus fitNus);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns the fitNUS."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    ReadOnlyFitNus getFitNus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Deletes the given exercise."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * The exercise must exist in fitNUS."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    void deleteExercise(Exercise target);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Deletes the given lesson."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The lesson must exist in fitNUS."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    void deleteLesson(Lesson target);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an unmodifiable view of the filtered exercise list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    ObservableList\u003cExercise\u003e getFilteredExerciseList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an unmodifiable view of the filtered lesson list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    ObservableList\u003cLesson\u003e getFilteredLessonList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns an unmodifiable view of the filtered slot list"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    ObservableList\u003cSlot\u003e getFilteredSlotList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an unmodifiable view of the filtered slot list, filtered by the chosen day."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    ObservableList\u003cSlot\u003e getFilteredSlotList(String day);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an unmodifiable view of the filtered body list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    ObservableList\u003cBody\u003e getFilteredBody();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Updates the filter of the filtered calorie log to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    void updateFilteredCalorieLog(Predicate\u003cDailyCalorie\u003e predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Updates the filter of the filtered exercise list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Updates the filter of the filtered lesson list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns true if a exercise with the same details as {@code exercise} exists in fitNUS."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    boolean hasExercise(Exercise exercise);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Adds the given exercise."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code exercise} must not already exist in fitNUS."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    void addExercise(Exercise exercise);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Replaces the given exercise {@code target} with {@code editedExercise}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code target} must exist in fitNUS."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * The exercise identity of {@code editedExercise} must not be the same as another existing exercise in FitNUS."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    void setExercise(Exercise target, Exercise editedExercise);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds the given routine."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code routine} must not already exist in fitNUS."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    void addRoutine(Routine routine);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if a routine with the same identity as {@code routine} exists in fitNUS."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    boolean hasRoutine(Routine r);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds the given exercise to the given routine."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code r} must already exist in fitNUS."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code e} must already exist in fitNUS."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    void addExerciseToRoutine(Routine r, Exercise e);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Updates the filter of the filtered routine list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    void updateFilteredRoutineList(Predicate\u003cRoutine\u003e predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Deletes the target routine."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The routine must exist in the fitNUS."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    void deleteRoutine(Routine target);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    boolean hasSlot(Slot slot);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    boolean hasOverlappingSlot(Slot slot);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    void addSlotToTimetable(Slot slot);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    void deleteSlotFromTimetable(Slot target);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    void addHeight(Height height);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    void addWeight(Weight weight);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    double getBmi();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if a lesson with the same details as {@code lesson} exists in timetable."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    boolean hasLesson(Lesson lesson);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Adds the given lesson."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code lesson} must not already exist in fitNUS."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    void addLesson(Lesson lesson);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Replaces the given body {@code target} with {@code editedLesson}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code target} must exist in FitNUS."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The lesson identity of {@code editedLesson} must not be the same as another existing lesson in FitNUS."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    void setLesson(Lesson target, Lesson editedLesson);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns an unmodifiable view of the filtered body list"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    ObservableList\u003cRoutine\u003e getFilteredRoutineList();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Retrieves the Lesson object from UniqueLessonList that the user specified."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param lesson Lesson object that the user wants."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return Lesson object that exists within fitNUS that the user is looking for."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Lesson retrieveLesson(Lesson lesson);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Retrieves the Routine object from UniqueRoutineList that the user specified."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param routine Routine object that the user wants."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return Routine object that exists within fitNUS that the user is looking for."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Routine retrieveRoutine(Routine routine);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Deletes the specified exercise from an existing routine."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code routine} must already exist within fitNUS."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code exercise} must already exist within fitNUS."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    void deleteExerciseFromRoutine(Routine routine, Exercise exercise);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    void viewRoutine(Routine routineToView);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    void addCalories(Calorie calorie);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    void minusCalories(Calorie calorie);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorie();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorieList();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    int getCalories();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 56,
      "nicholasyeo": 34,
      "patricktan6": 10,
      "-": 72,
      "khor-jingqian": 60,
      "Licheng-Wu": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Body;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Height;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Weight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.DailyCalorie;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.RoutineNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.SlotDayPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Represents the in-memory model of the fitNUS data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final FitNus fitNus;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final FilteredList\u003cExercise\u003e filteredExercises;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final FilteredList\u003cRoutine\u003e filteredRoutine;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final FilteredList\u003cLesson\u003e filteredLessons;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final FilteredList\u003cSlot\u003e filteredSlots;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final FilteredList\u003cDailyCalorie\u003e filteredDailyCalories;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final FilteredList\u003cBody\u003e filteredBody;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Initializes a ModelManager with the given fitNus and userPrefs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ModelManager(ReadOnlyFitNus fitNus, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireAllNonNull(fitNus, userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        logger.fine(\"Initializing with fitNUS: \" + fitNus + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.fitNus \u003d new FitNus(fitNus);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        filteredExercises \u003d new FilteredList\u003c\u003e(this.fitNus.getExerciseList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        filteredRoutine \u003d new FilteredList\u003c\u003e(this.fitNus.getRoutineList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        filteredLessons \u003d new FilteredList\u003c\u003e(this.fitNus.getLessonList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        filteredSlots \u003d new FilteredList\u003c\u003e(this.fitNus.getSlotList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        filteredDailyCalories \u003d new FilteredList\u003c\u003e(this.fitNus.getDailyCalorieList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        filteredBody \u003d new FilteredList\u003c\u003e(this.fitNus.getBody());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this(new FitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Path getFitNusFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return userPrefs.getFitNusFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setFitNusFilePath(Path fitNusFilePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(fitNusFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        userPrefs.setFitNusFilePath(fitNusFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FitNus \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setFitNus(ReadOnlyFitNus fitNus) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.fitNus.resetData(fitNus);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ReadOnlyFitNus getFitNus() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fitNus;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void deleteExercise(Exercise target) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.removeExercise(target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void deleteLesson(Lesson target) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.removeLesson(target);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteRoutine(Routine target) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.removeRoutine(target);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void deleteSlotFromTimetable(Slot target) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.removeSlotFromTimetable(target);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.addExercise(exercise);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.setExercise(target, editedExercise);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addRoutine(Routine routine) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.addRoutine(routine);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        updateFilteredRoutineList(PREDICATE_SHOW_ALL_ROUTINES);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addCalories(Calorie calorie) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        fitNus.addCalories(calorie);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        updateFilteredCalorieLog(PREDICATE_SHOW_ALL_LOGS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void updateFilteredCalorieLog(Predicate\u003cDailyCalorie\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        filteredDailyCalories.setPredicate(predicate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void minusCalories(Calorie calorie) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        fitNus.minusCalories(calorie);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int getCalories() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fitNus.getCalories();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorie() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return filteredDailyCalories;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean hasRoutine(Routine r) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(r);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fitNus.hasRoutine(r);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addExerciseToRoutine(Routine r, Exercise e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.addExerciseToRoutine(r, e);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        updateFilteredRoutineList(PREDICATE_SHOW_ALL_ROUTINES);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void deleteExerciseFromRoutine(Routine r, Exercise e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.deleteExerciseFromRoutine(r, e);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        updateFilteredRoutineList(PREDICATE_SHOW_ALL_ROUTINES);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        updateFilteredExerciseList(PREDICATE_SHOW_ALL_EXERCISES);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(exercise);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fitNus.hasExercise(exercise);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addHeight(Height height) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.addHeight(height);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addWeight(Weight weight) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.addWeight(weight);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    public double getBmi() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fitNus.getBmi();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds a Lesson into fitNUS."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param lesson Lesson object that is to be added to fitNUS."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.addLesson(lesson);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        updateFilteredLessonList(PREDICATE_SHOW_ALL_LESSONS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireAllNonNull(target, editedLesson);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.setLesson(target, editedLesson);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(lesson);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fitNus.hasLesson(lesson);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasSlot(Slot slot) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fitNus.hasSlot(slot);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasOverlappingSlot(Slot slot) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fitNus.hasOverlappingDurationInSlot(slot);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addSlotToTimetable(Slot slot) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.addSlotToTimetable(slot);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        updateFilteredCalorieLog(PREDICATE_SHOW_ALL_LOGS);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Lesson retrieveLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fitNus.retrieveLesson(lesson);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Routine retrieveRoutine(Routine routine) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fitNus.retrieveRoutine(routine);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void viewRoutine(Routine r) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String argument \u003d r.getName().fullName;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String[] nameKeywords \u003d argument.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        filteredRoutine.setPredicate("
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                new RoutineNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Routine} backed by the internal list of"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code versionedFitNus}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cRoutine\u003e getFilteredRoutineList() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return filteredRoutine;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Exercise} backed by the internal list of"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code versionedFitNus}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return filteredExercises;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Body} backed by the internal list of"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code versionedFitNus}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cBody\u003e getFilteredBody() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return filteredBody;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Lesson} backed by the internal list of"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code versionedFitNus}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return filteredLessons;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code DailyCalorie} backed by the internal list of"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code versionedFitNus}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorieList() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return filteredDailyCalories;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public ObservableList\u003cSlot\u003e getFilteredSlotList() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return filteredSlots;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ObservableList\u003cSlot\u003e getFilteredSlotList(String day) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        SlotDayPredicate predicate \u003d new SlotDayPredicate(Arrays.asList(day));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        ObservableList\u003cSlot\u003e slotObservableList \u003d this.fitNus.getSlotList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        FilteredList\u003cSlot\u003e filteredSlotsByDay \u003d new FilteredList\u003c\u003e(slotObservableList);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        filteredSlotsByDay.setPredicate(predicate);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return filteredSlotsByDay;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void updateFilteredRoutineList(Predicate\u003cRoutine\u003e predicate) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        filteredRoutine.setPredicate(predicate);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        filteredExercises.setPredicate(predicate);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        filteredLessons.setPredicate(predicate);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fitNus.equals(other.fitNus)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 filteredLessons.equals(other.filteredLessons);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 91,
      "nicholasyeo": 49,
      "patricktan6": 13,
      "-": 111,
      "khor-jingqian": 78,
      "Licheng-Wu": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyFitNus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Body;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.DailyCalorie;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Unmodifiable view of fitNUS"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public interface ReadOnlyFitNus {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns an unmodifiable view of the exercises list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * This list will not contain any duplicate exercises."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    ObservableList\u003cExercise\u003e getExerciseList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns an unmodifiable view of the routines list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * This list will not contain any duplicate routines."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    ObservableList\u003cRoutine\u003e getRoutineList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an unmodifiable view of the lessons list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * This list will not contain any duplicate lessons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    ObservableList\u003cLesson\u003e getLessonList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns an unmodifiable view of the slots list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * This list will not contain any duplicate slots."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    ObservableList\u003cSlot\u003e getSlotList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns an unmodifiable view of the daily calorie list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * This list will not contain any duplicate daily calorie entries."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    ObservableList\u003cDailyCalorie\u003e getDailyCalorieList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns an unmodifiable view of the Body."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * This list will not contain any duplicate Body."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    ObservableList\u003cBody\u003e getBody();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 11,
      "nicholasyeo": 8,
      "patricktan6": 2,
      "-": 8,
      "khor-jingqian": 16,
      "Licheng-Wu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    Path getFitNusFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Path fitNusFilePath \u003d Paths.get(\"data\" , \"fitNUS.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        setFitNusFilePath(newUserPrefs.getFitNusFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Path getFitNusFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fitNusFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setFitNusFilePath(Path fitNusFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(fitNusFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.fitNusFilePath \u003d fitNusFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 fitNusFilePath.equals(o.fitNusFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return Objects.hash(guiSettings, fitNusFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + fitNusFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/body/Body.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class Body {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private Height height;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private Weight weight;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Creates a Body object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Body() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.height \u003d new Height(160);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.weight \u003d new Weight(45);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Sets Height of this Body."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setHeight(Height h) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(h);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.height \u003d h;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Sets Weight of this Body."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setWeight(Weight w) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(w);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.weight \u003d w;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns Height of this Body."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return Height of this Body."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Height getHeight() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return this.height;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns Weight of this Body."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return Weight of this Body."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Weight getWeight() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return this.weight;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if both Body have the same data fields."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!(other instanceof Body)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Body otherBody \u003d (Body) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return height.equals(otherBody.getHeight()) \u0026\u0026 weight.equals(otherBody.getWeight());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return Objects.hash(this.height, this.weight);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return \"Body measurements: \\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + \"Height: \" + height + \"\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + \"Weight: \" + weight + \"\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Calculates the BMI of this Body."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return Double representing the BMI."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public double getBmi() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return weight.getWeight() / Math.pow((height.getHeight() / 100.0), 2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 18,
      "khor-jingqian": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/body/Height.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * Represents the user\u0027s height measured in centimetres in fitNUS."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class Height {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_FORMAT \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            \"Height should only contain positive numbers up to 2 decimal places, and it should not be blank.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_LIMIT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \"Height should be greater than 100cm and smaller than 250cm.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final double HEIGHT_LOWER_LIMIT \u003d 100;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final double HEIGHT_UPPER_LIMIT \u003d 250;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+(\\\\.\\\\d{1,2})?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final double height;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Constructs a {@code Height}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param height A valid height."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Height(double height) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public double getHeight() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return height;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if a given string is a valid height."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param test The string to be tested."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return True if the given string is a valid height."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static boolean isValidHeight(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if a given height is within a reasonable range."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param test The height to be tested."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return True if the given height is within a reasonable range."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static boolean isValidHeight(double test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return test \u003e HEIGHT_LOWER_LIMIT \u0026\u0026 test \u003c HEIGHT_UPPER_LIMIT;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return String.format(\"%.2f cm\", height);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || (other instanceof Height // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 height \u003d\u003d ((Height) other).getHeight()); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return Objects.hash(height);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 70,
      "khor-jingqian": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/body/Weight.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * Represents the user\u0027s weight measured in kilograms in fitNUS."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class Weight {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_FORMAT \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            \"Weight should only contain positive numbers up to 2 decimal places, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_LIMIT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \"Weight should be greater than 30kg and smaller than 200kg.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final double WEIGHT_LOWER_LIMIT \u003d 30;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final double WEIGHT_UPPER_LIMIT \u003d 200;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+(\\\\.\\\\d{1,2})?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final double weight;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Constructs a {@code Weight}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param weight A valid weight."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Weight(double weight) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public double getWeight() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if a given string is a valid weight."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param test The string to be tested."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return True if the given string is a valid weight."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static boolean isValidWeight(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if a given weight is within a reasonable range."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param test The weight to be tested."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return True if the given weight is within a reasonable range."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static boolean isValidWeight(double test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return test \u003e WEIGHT_LOWER_LIMIT \u0026\u0026 test \u003c WEIGHT_UPPER_LIMIT;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return String.format(\"%.2f kg\", weight);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || (other instanceof Weight // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 weight \u003d\u003d ((Weight) other).getWeight()); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return Objects.hash(weight);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 70,
      "khor-jingqian": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calorie/Calorie.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.calorie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * Represents a user input Calorie in fitNUS."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class Calorie {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_FORMAT \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            \"Calorie input must be a valid integer and not more than the Java\u0027s maximum\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    + \" integer value e.g. calorie_add c/100\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_LIMIT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            \"Calorie input should never be less than or equal to 0!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final double CALORIE_LOWER_LIMIT \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final int calorie;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Constructs a {@code Calorie}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param calorie A valid calorie."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Calorie(int calorie) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.calorie \u003d calorie;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public int getCalorie() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return calorie;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if a given string is a valid calorie."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param test The string to be tested."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return True if the given string is a valid calorie."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static boolean isValidCalorie(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if a given calorie is within a reasonable range."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param test The calorie to be tested."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return True if the given calorie is within a reasonable range."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static boolean isValidCalorie(int test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return test \u003e CALORIE_LOWER_LIMIT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return String.valueOf(calorie);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || (other instanceof Calorie // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 calorie \u003d\u003d ((Calorie) other).getCalorie()); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return Objects.hash(calorie);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calorie/CalorieLog.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.calorie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.exceptions.DailyCalorieNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.exceptions.DuplicateDailyCalorieException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * A list of daily calorie entries that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * A daily calorie entry is considered unique by comparing using {@code DailyCalorie#isSameDailyCalorie(DailyCalorie)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * daily calorie entries uses DailyCalorie#isSameDailyCalorie(DailyCalorie) for equality"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * so as to ensure that the entry being added or updated is unique in terms of identity in the CalorieLog."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * However, the removal of an entry uses DailyCalorie#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * as to ensure that the entry with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * @see DailyCalorie#isSameDailyCalorie(DailyCalorie)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieLog implements Iterable\u003cDailyCalorie\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final ObservableList\u003cDailyCalorie\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final ObservableList\u003cDailyCalorie\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if the list contains an equivalent DailyCalorie as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean contains(DailyCalorie toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDailyCalorie);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds a daily calorie entry to the log."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * The DailyCalorie must not already exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void add(DailyCalorie toAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DuplicateDailyCalorieException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Collections.sort(internalList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds a calories to an entry in the log."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * If DailyCalorie does not already exist in the list,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * then it must be a different day."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addCalories(Calorie calorie) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        boolean isContained \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (DailyCalorie entry : internalList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (entry.getDate().equals(LocalDate.now())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                int index \u003d internalList.indexOf(entry);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                entry.addCalories(calorie.getCalorie());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                internalList.set(index, entry);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                isContained \u003d true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!isContained) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (checkSize() \u003e\u003d 7) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                internalList.remove(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            DailyCalorie newDay \u003d new DailyCalorie(LocalDate.now());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            newDay.addCalories(calorie.getCalorie());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            internalList.add(newDay);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Collections.sort(internalList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds a calories to an entry in the log."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * If DailyCalorie does not already exist in the list,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * then it must be a different day."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void minusCalories(Calorie calorie) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        boolean isContained \u003d false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (DailyCalorie entry : internalList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (entry.getDate().equals(LocalDate.now())) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                int index \u003d internalList.indexOf(entry);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                entry.minusCalories(calorie.getCalorie());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                internalList.set(index, entry);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                isContained \u003d true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!isContained) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DailyCalorieNotFoundException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the dailyCalorie {@code target} in the list with {@code editedDailyCalorie}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * The DailyCalorie identity of {@code editedDailyCalorie} must not be the same as another existing dailyCalorie"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalorie(DailyCalorie target, DailyCalorie editedDailyCalorie) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireAllNonNull(target, editedDailyCalorie);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DailyCalorieNotFoundException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!target.isSameDailyCalorie(editedDailyCalorie) \u0026\u0026 contains(editedDailyCalorie)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DuplicateDailyCalorieException();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.set(index, editedDailyCalorie);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the existing DailyCalorie with DailyCalorie from a replacement CalorieLog."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param replacement CalorieLog to replace this existing one."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalories(CalorieLog replacement) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the contents of this list with {@code dailyCalories}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code dailyCalories} must not contain duplicate DailyCalorie entries."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalories(List\u003cDailyCalorie\u003e dailyCalories) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireAllNonNull(dailyCalories);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!entriesAreUnique(dailyCalories)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DuplicateDailyCalorieException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.setAll(dailyCalories);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if {@code dailyCalories} contains only unique Daily Calorie."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private boolean entriesAreUnique(List\u003cDailyCalorie\u003e dailyCalories) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (int i \u003d 0; i \u003c dailyCalories.size() - 1; i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            for (int j \u003d i + 1; j \u003c dailyCalories.size(); j++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                if (dailyCalories.get(i).isSameDailyCalorie(dailyCalories.get(j))) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Removes the equivalent DailyCalorie from the list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * The DailyCalorie must exist in the list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void remove(DailyCalorie toRemove) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DailyCalorieNotFoundException();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.remove(toRemove);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns the size of the CalorieLog."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return Integer of the size of the CalorieLog."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int checkSize() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return this.internalList.size();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the contents of this list with {@code calorieLog}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code calorieLog} must not contain duplicate dailyCalories."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setCalorieLog(List\u003cDailyCalorie\u003e calorieLog) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireAllNonNull(calorieLog);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!calorieLogsAreUnique(calorieLog)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DuplicateDailyCalorieException();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.setAll(calorieLog);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cDailyCalorie\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Iterator\u003cDailyCalorie\u003e iterator() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof CalorieLog // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 internalList.equals(((CalorieLog) other).internalList));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if {@code entries} contains only unique daily calorie entries."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private boolean calorieLogsAreUnique(List\u003cDailyCalorie\u003e calorieLogs) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (int i \u003d 0; i \u003c calorieLogs.size() - 1; i++) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            for (int j \u003d i + 1; j \u003c calorieLogs.size(); j++) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                if (calorieLogs.get(i).isSameDailyCalorie(calorieLogs.get(j))) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Retrieves the calories for today."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return The calorie count for today."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int getCalories() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (DailyCalorie entry : internalList) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (entry.getDate().equals(LocalDate.now())) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                return entry.getCalories();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "nicholasyeo": 5,
      "khor-jingqian": 239
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calorie/DailyCalorie.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.calorie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Represents a DailyCalorie in fitNUS."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DailyCalorie implements Comparable\u003cDailyCalorie\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private int calorieSum \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DailyCalorie(LocalDate date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireAllNonNull(date);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns the Date that this DailyCalorie is representing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return Date that the object is representing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns the calorie sum for the day."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int getCalories() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return calorieSum;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds the calories to the calorie sum."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addCalories(int calorieAddition) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        calorieSum +\u003d calorieAddition;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Minus the calories to the calorie sum."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void minusCalories(int calories) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assert(calorieSum \u003e 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        calorieSum -\u003d calories;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if both daily calorie log has the same date attached to it."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * This defines a weaker notion of equality between two daily calorie log."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean isSameDailyCalorie(DailyCalorie otherDailyCalorie) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (otherDailyCalorie \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return otherDailyCalorie !\u003d null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 otherDailyCalorie.getDate().isEqual(getDate());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if both exercises have the same identity and data fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * This defines a stronger notion of equality between two daily calorie logs."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!(other instanceof DailyCalorie)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie otherDailyCalorie \u003d (DailyCalorie) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return otherDailyCalorie.getDate().equals(getDate())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 otherDailyCalorie.getCalories() \u003d\u003d (getCalories());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return Objects.hash(date, calorieSum);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        builder.append(\"Daily calorie for: \")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .append(\" Calories: \")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .append(calorieSum);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int compareTo(DailyCalorie o) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return this.getDate().compareTo(o.getDate());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "khor-jingqian": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calorie/exceptions/DailyCalorieNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.calorie.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DailyCalorieNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DailyCalorieNotFoundException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(\"Today\u0027s calorie log has not been created!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "khor-jingqian": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calorie/exceptions/DuplicateDailyCalorieException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.calorie.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DuplicateDailyCalorieException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DuplicateDailyCalorieException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(\"There is already a log for today\u0027s calorie!\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "khor-jingqian": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/Exercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Represents an Exercise in fitNUS."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class Exercise {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public Exercise(Name name, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns true if both exercises of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * This defines a weaker notion of equality between two exercises."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean isSameExercise(Exercise otherExercise) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (otherExercise \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return otherExercise !\u003d null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 otherExercise.getName().equals(getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns true if both exercises have the same identity and data fields."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * This defines a stronger notion of equality between two exercises."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!(other instanceof Exercise)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise otherExercise \u003d (Exercise) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return otherExercise.getName().equals(getName())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 otherExercise.getTags().equals(getTags());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return Objects.hash(name, tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "nicholasyeo": 1,
      "Licheng-Wu": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/ExerciseNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Tests that a {@code Exercise}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseNameContainsKeywordsPredicate implements Predicate\u003cExercise\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean test(Exercise exercise) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsCharIgnoreCase(exercise.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                || (other instanceof ExerciseNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 keywords.equals(((ExerciseNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "khor-jingqian": 1,
      "Licheng-Wu": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/UniqueExerciseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * A list of exercises that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * An exercise is considered unique by comparing using {@code Exercise#isSameExercise(Exercise)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * exercises uses Exercise#isSameExercise(Exercise) for equality"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * so as to ensure that the exercise being added or updated is unique in terms of identity in the UniqueExerciseList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * However, the removal of an exercise uses Exercise#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * as to ensure that the exercise with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * @see Exercise#isSameExercise(Exercise)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class UniqueExerciseList implements Iterable\u003cExercise\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final ObservableList\u003cExercise\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns true if the list contains an equivalent exercise as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean contains(Exercise toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExercise);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Adds an exercise to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * The exercise must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void add(Exercise toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Replaces the exercise {@code target} in the list with {@code editedExercise}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * The exercise identity of {@code editedExercise} must not be the same as another existing exercise in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireAllNonNull(target, editedExercise);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!target.isSameExercise(editedExercise) \u0026\u0026 contains(editedExercise)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        internalList.set(index, editedExercise);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Removes the equivalent exercise from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * The exercise must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void remove(Exercise toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercises(UniqueExerciseList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Replaces the contents of this list with {@code exercises}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code exercises} must not contain duplicate exercises."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercises(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        requireAllNonNull(exercises);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!exercisesAreUnique(exercises)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        internalList.setAll(exercises);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ObservableList\u003cExercise\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public Iterator\u003cExercise\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                || (other instanceof UniqueExerciseList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueExerciseList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns true if {@code exercises} contains only unique exercises."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private boolean exercisesAreUnique(List\u003cExercise\u003e exercises) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        for (int i \u003d 0; i \u003c exercises.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            for (int j \u003d i + 1; j \u003c exercises.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                if (exercises.get(i).isSameExercise(exercises.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Retrieves the Exercise within UniqueExerciseList with the same name."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param e Exercise that is specified by the user."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return Exercise that is within fitNUS."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Exercise retrieveExercise(Exercise e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Exercise exercise : internalList) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (e.isSameExercise(exercise)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                return exercise;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return e;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "khor-jingqian": 14,
      "Licheng-Wu": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/exceptions/DuplicateExerciseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Signals that the operation will result in duplicate Exercises"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * (Exercises are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class DuplicateExerciseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public DuplicateExerciseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        super(\"Operation would result in duplicate exercises.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "Licheng-Wu": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exercise/exceptions/ExerciseNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.exercise.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Signals that the operation is unable to find the specified exercise."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "Licheng-Wu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/Lesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Represents a Lesson in user\u0027s timetable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class Lesson extends Activity {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Lesson(Name name, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if both lessons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * This defines a weaker notion of equality between two lessons."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean isSameLesson(Lesson otherLesson) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (otherLesson \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return otherLesson !\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 otherLesson.getName().equals(getName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if both lessons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * This defines a weaker notion of equality between two lessons."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean isSameActivity(Activity otherActivity) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (otherActivity \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!(otherActivity instanceof Lesson)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Lesson otherLesson \u003d (Lesson) otherActivity;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return otherLesson.getName().equals(getName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean isRoutine() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if both lessons have the same identity and data fields."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * This defines a stronger notion of equality between two exercises."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!(other instanceof Lesson)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson otherLesson \u003d (Lesson) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return otherLesson.getName().equals(getName())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 otherLesson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return Objects.hash(name, tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 89,
      "nicholasyeo": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/LessonNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Tests that a {@code Lesson}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonNameContainsKeywordsPredicate implements Predicate\u003cLesson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Constructor method that checks if the keywords are found in a lesson."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assert(keywords !\u003d null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean test(Lesson lesson) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsCharIgnoreCase(lesson.getName().fullName, keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || (other instanceof LessonNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 keywords.equals(((LessonNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/UniqueLessonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.exceptions.DuplicateLessonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.exceptions.LessonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * A list of lessons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * A lesson is considered unique by comparing using {@code Lesson#isSameActivity(Activity)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * lessons uses Lesson#isSameActivity(Activity) for equality"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * so as to ensure that the lesson being added or updated is unique in terms of identity in the UniqueLessonList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * However, the removal of a lesson uses Lesson#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * as to ensure that the lesson with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * @see Lesson#isSameActivity(Activity)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class UniqueLessonList implements Iterable\u003cLesson\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final ObservableList\u003cLesson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if the list contains an equivalent lesson as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean contains(Lesson toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameActivity);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Adds a lesson to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The lesson must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void add(Lesson toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Replaces the lesson {@code target} in the list with {@code editedLesson}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The lesson identity of {@code editedLesson} must not be the same as another existing lesson in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireAllNonNull(target, editedLesson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!target.isSameActivity(editedLesson) \u0026\u0026 contains(editedLesson)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        internalList.set(index, editedLesson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Removes the equivalent lesson from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * The lesson must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void remove(Lesson toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new LessonNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLessons(UniqueLessonList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Replaces the contents of this list with {@code lessons}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code lessons} must not contain duplicate lessons."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLessons(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireAllNonNull(lessons);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!lessonsAreUnique(lessons)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new DuplicateLessonException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        internalList.setAll(lessons);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cLesson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Iterator\u003cLesson\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                || (other instanceof UniqueLessonList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueLessonList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns true if {@code lessons} contains only unique lessons."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private boolean lessonsAreUnique(List\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        for (int i \u003d 0; i \u003c lessons.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            for (int j \u003d i + 1; j \u003c lessons.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                if (lessons.get(i).isSameActivity(lessons.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Retrieves the Lesson object from UniqueLessonList that the user specified."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param l Lesson object that the user wants."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return Lesson object that exists within fitNUS that the user is looking for."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Lesson retrieveLesson(Lesson l) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        for (Lesson lesson : internalList) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            if (lesson.isSameActivity(l)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                return lesson;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return l;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 133,
      "nicholasyeo": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/exceptions/DuplicateLessonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Signals that the operation will result in duplicate Lessons"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * (Lessons are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class DuplicateLessonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public DuplicateLessonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        super(\"Operation would result in duplicate lessons.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/lesson/exceptions/LessonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.lesson.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Signals that the operation is unable to find the specified lesson."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/routine/Routine.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.routine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class Routine extends Activity {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Set\u003cExercise\u003e exercises;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Routine(Name name) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.exercises \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Set\u003cExercise\u003e getExercises() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return this.exercises;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds an Exercise into the Routine object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param newExercise an existing Exercise in fitNUS."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addExercise(Exercise newExercise) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assert(!this.exercises.contains(newExercise));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.exercises.add(newExercise);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Deletes an Exercise from the Routine object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param oldExercise an existing Exercise in this particular Routine object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteExercise(Exercise oldExercise) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assert(this.exercises.contains(oldExercise));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.exercises.remove(oldExercise);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Checks if the input Exercise exists within this Routine."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param exercise the possible Exercise in this particular Routine object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return this.exercises.contains(exercise);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if both routines of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * This defines a weaker notion of equality between two routines."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean isSameActivity(Activity otherActivity) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (otherActivity \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!(otherActivity instanceof Routine)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Routine otherRoutine \u003d (Routine) otherActivity;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return otherRoutine.getName().equals(getName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean isRoutine() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if both routines have the same identity and data fields."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * This defines a stronger notion of equality between two routines."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!(other instanceof Routine)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine otherPerson \u003d (Routine) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 otherPerson.getExercises().equals(getExercises());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return Objects.hash(name, exercises);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Exercise exercise : exercises) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            builder.append(\"\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            builder.append(exercise.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "nicholasyeo": 21,
      "khor-jingqian": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/model/routine/RoutineNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.routine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineNameContainsKeywordsPredicate implements Predicate\u003cRoutine\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean test(Routine routine) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .allMatch(keyword -\u003e StringUtil.containsCharIgnoreCase(routine.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof RoutineNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 keywords.equals(((RoutineNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "khor-jingqian": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/routine/UniqueRoutineList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.routine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.exceptions.DuplicateRoutineException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.exceptions.RoutineNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Activity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * A list of routines that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * A routine is considered unique by comparing using {@code Routine#isSameActivity(Activity)}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * routines uses Routine#isSameActivity(Activity) for equality"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * so as to ensure that the routine being added or updated is unique in terms of identity in the UniqueRoutineList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * However, the removal of an routine uses Routine#equals(Object) so"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * as to ensure that the routine with exactly the same fields will be removed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * @see Routine#isSameActivity(Activity)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class UniqueRoutineList implements Iterable\u003cRoutine\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final ObservableList\u003cRoutine\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final ObservableList\u003cRoutine\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if the list contains an equivalent Routine as the given argument."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean contains(Routine toCheck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameActivity);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds a routine to the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * The Routine must not already exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void add(Routine toAdd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DuplicateRoutineException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Adds an existing Exercise within fitNUS into an existing Routine within fitNUS."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param r        Existing Routine."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param exercise Existing Exercise."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addExercise(Routine r, Exercise exercise) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!internalList.contains(r)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new RoutineNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            for (Routine routine : internalList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                if (routine.isSameActivity(r)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    Set\u003cExercise\u003e routineExercises \u003d routine.getExercises();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    int index \u003d internalList.indexOf(routine);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    if (routineExercises.contains(exercise)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        throw new DuplicateExerciseException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    routine.addExercise(exercise);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    internalList.set(index, routine);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the routine {@code target} in the list with {@code editedRoutine}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * The Routine identity of {@code editedRoutine} must not be the same as another existing routine in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutine(Routine target, Routine editedRoutine) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireAllNonNull(target, editedRoutine);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new RoutineNotFoundException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!target.isSameActivity(editedRoutine) \u0026\u0026 contains(editedRoutine)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DuplicateRoutineException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.set(index, editedRoutine);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Removes the equivalent routine from the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * The routine must exist in the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void remove(Routine toRemove) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new RoutineNotFoundException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.remove(toRemove);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns the size of the UniqueRoutineList."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return Integer of the size of the UniqueRoutineList."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int checkSize() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return this.internalList.size();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the existing Routines with Routines from a replacement UniqueRoutineList."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param replacement UniqueRoutineList to replace this existing one."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutines(UniqueRoutineList replacement) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the contents of this list with {@code routines}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * {@code routines} must not contain duplicate routines."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutines(List\u003cRoutine\u003e routines) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        requireAllNonNull(routines);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!routinesAreUnique(routines)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new DuplicateRoutineException();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        internalList.setAll(routines);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cRoutine\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Iterator\u003cRoutine\u003e iterator() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                || (other instanceof UniqueRoutineList // instanceof handles nulls"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRoutineList) other).internalList));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Returns true if {@code routines} contains only unique routines."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private boolean routinesAreUnique(List\u003cRoutine\u003e routines) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (int i \u003d 0; i \u003c routines.size() - 1; i++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            for (int j \u003d i + 1; j \u003c routines.size(); j++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                if (routines.get(i).isSameActivity(routines.get(j))) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Retrieves the Routine object from UniqueRoutineList that the user specified."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param r Routine object that the user wants."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @return Routine object that exists within fitNUS that the user is looking for."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Routine retrieveRoutine(Routine r) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Routine routine : internalList) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            if (routine.isSameActivity(r)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                return routine;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return r;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Deletes the specified Exercise from the specified Routine."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param retrievedRoutine  User-specified Routine."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param retrievedExercise User-specified Exercise."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteExerciseFromRoutine(Routine retrievedRoutine, Exercise retrievedExercise) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!internalList.contains(retrievedRoutine)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new RoutineNotFoundException();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Routine routine : internalList) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (routine.isSameActivity(retrievedRoutine)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                if (!routine.hasExercise(retrievedExercise)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    throw new ExerciseNotFoundException();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    int index \u003d internalList.indexOf(routine);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    routine.deleteExercise(retrievedExercise);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    internalList.set(index, routine);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Deletes specified Exercise from all Routines."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param retrievedExercise User-specified Exercise to remove from all Routines."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteExercise(Exercise retrievedExercise) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Routine routine : internalList) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            int index \u003d internalList.indexOf(routine);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Set\u003cExercise\u003e routineExercises \u003d routine.getExercises();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            routineExercises.remove(retrievedExercise);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            internalList.set(index, routine);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Replaces the edited Exercise by the user in the Routines that contain it."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param target Exercise that the user wants to edit."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param editedExercise Exercise that is the outcome of user\u0027s edits."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Routine routine : internalList) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Set\u003cExercise\u003e exercises \u003d routine.getExercises();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (exercises.contains(target)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                int index \u003d internalList.indexOf(routine);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                exercises.remove(target);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                exercises.add(editedExercise);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                internalList.set(index, routine);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 6,
      "nicholasyeo": 11,
      "khor-jingqian": 236
    }
  },
  {
    "path": "src/main/java/seedu/address/model/routine/exceptions/DuplicateRoutineException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.routine.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DuplicateRoutineException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DuplicateRoutineException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        super(\"Operation would result in duplicate routines.\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "khor-jingqian": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/routine/exceptions/RoutineNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.routine.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "khor-jingqian": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Represents a Tag in fitNUS."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/Activity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public abstract class Activity {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Activity EMPTY_ACTIVITY \u003d new Activity(new Name(\"Empty Activity\")) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public boolean isSameActivity(Activity otherActivity) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public boolean isRoutine() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    };"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Constructs an Activity object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param name The name of the activity."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Activity(Name name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static Activity empty() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return EMPTY_ACTIVITY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if both activities of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * This defines a weaker notion of equality between two activities."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public abstract boolean isSameActivity(Activity otherActivity);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public abstract boolean isRoutine();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/Day.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public enum Day {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    MONDAY(\"monday\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    TUESDAY(\"tuesday\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    WEDNESDAY(\"wednesday\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    THURSDAY(\"thursday\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    FRIDAY(\"friday\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    UNKNOWN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            \"Day should only be one of the following: Monday, Tuesday, Wednesday, Thursday, Friday\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Map\u003cString, Day\u003e MAPPING \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Day() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        day \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    Day(String day) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        for (Day day : Day.values()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            MAPPING.put(day.day, day);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static Day getDayEnum(String day) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Day dayEnum \u003d MAPPING.get(day);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (dayEnum \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return UNKNOWN;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return dayEnum;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if this day is the same as the other day."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param otherDay The other day to be checked."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return true if this day is the same as the other day."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean isSameDay(Day otherDay) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (otherDay \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return otherDay !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 otherDay.getDay().equals(day);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static boolean isUnknownDay(Day day) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return day.equals(UNKNOWN);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assert day !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        char firstLetterToUpperCase \u003d day.substring(0, 1).toUpperCase().charAt(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return day.replace(day.charAt(0), firstLetterToUpperCase);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "nicholasyeo": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/Duration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class Duration {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_FORMAT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            \"Duration has to be of the following format: HHmm-HHmm e.g. 1600-1800\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_ORDER \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            \"Start time has to be before end time\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(([0-1][0-9])|2[0-3])[0-5][0-9]-(([0-1][0-9])|2[0-3])[0-5][0-9]$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final LocalTime startTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final LocalTime endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Constructs a Duration object with a start and end time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param startTime The start time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param endTime The end time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Duration(LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireAllNonNull(startTime, endTime);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public LocalTime getStartTime() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static boolean isValidDuration(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static boolean isValidDuration(LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return startTime.isBefore(endTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if this duration is the same as the other duration."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param otherDuration The other duration to be checked."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return true if this duration is the same as the other duration."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean isSameDuration(Duration otherDuration) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (otherDuration \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return otherDuration !\u003d null"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 otherDuration.getStartTime().equals(startTime)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 otherDuration.getEndTime().equals(endTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if this duration has overlapping duration as the other duration."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param otherDuration The other duration to be checked."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return true if this duration has overlapping duration as the other duration."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasOverlapDuration(Duration otherDuration) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(otherDuration);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LocalTime otherStartTime \u003d otherDuration.getStartTime();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LocalTime otherEndTime \u003d otherDuration.getEndTime();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        boolean hasSameStartTime \u003d startTime.equals(otherStartTime);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        boolean hasSameEndTime \u003d endTime.equals(otherEndTime);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        boolean isStartTimeOverlap \u003d startTime.isAfter(otherStartTime) \u0026\u0026 startTime.isBefore(otherEndTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        boolean isEndTimeOverlap \u003d endTime.isAfter(otherStartTime) \u0026\u0026 endTime.isBefore(otherEndTime);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        boolean isCompletelyOverlap \u003d startTime.isBefore(otherStartTime) \u0026\u0026 endTime.isAfter(otherEndTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return hasSameStartTime || hasSameEndTime || isStartTimeOverlap || isEndTimeOverlap || isCompletelyOverlap;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return Objects.hash(startTime, endTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!(other instanceof Duration)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Duration otherDuration \u003d (Duration) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return otherDuration.getStartTime().equals(startTime)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 otherDuration.getEndTime().equals(endTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"HHmm\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return startTime.format(formatter) + \"-\" + endTime.format(formatter);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "nicholasyeo": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/Slot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class Slot implements Comparable\u003cSlot\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Activity activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Day day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Constructs a new Slot object with an empty Activity. This is used to identify the slot to delete in timetable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param day The day of the slot."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param duration The timeslot."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Slot(Day day, Duration duration) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        activity \u003d Activity.empty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Constructs a new Slot object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param activity The activity to be added to timetable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param day The day to add to."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param duration The duration to input in the timetable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Slot(Activity activity, Day day, Duration duration) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireAllNonNull(activity, day, duration);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Activity getActivity() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return activity;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if this slot has overlapping duration with the other slot."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param otherSlot The other slot to be checked."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return true if this slot has overlapping duration with the other slot."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasOverlapDuration(Slot otherSlot) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return day.isSameDay(otherSlot.getDay())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 duration.hasOverlapDuration(otherSlot.getDuration());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if both slots have the same day and duration."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * This defines a weaker notion of equality between two slots."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean isSameSlot(Slot otherSlot) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (otherSlot \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return otherSlot !\u003d null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 otherSlot.getDay().isSameDay(day)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 otherSlot.getDuration().isSameDuration(duration);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if both slots have the same activity, day and duration."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * This defines a stronger notion of equality between two slots."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!(other instanceof Slot)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot otherSlot \u003d (Slot) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return otherSlot.getActivity().equals(activity)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 otherSlot.getDay().equals(day)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 otherSlot.getDuration().isSameDuration(duration);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return Objects.hash(activity, day, duration);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return activity.getName() + \" on \" + day.toString() + \" \" + duration.toString();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public int compareTo(Slot o) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return this.getDuration().getStartTime().compareTo(o.getDuration().getStartTime());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 104,
      "Licheng-Wu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/SlotDayPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Tests that a {@code Slot}\u0027s {@code Day} matches the day given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class SlotDayPredicate implements Predicate\u003cSlot\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public SlotDayPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean test(Slot slot) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsCharIgnoreCase(slot.getDay().getDay(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                || (other instanceof SlotDayPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 keywords.equals(((SlotDayPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "nicholasyeo": 1,
      "Licheng-Wu": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/Timetable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class Timetable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final UniqueSlotList slots;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        slots \u003d new UniqueSlotList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if this Slot is already in use in the Timetable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param slot The slot to be checked."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return true if this Slot is already in use in the Timetable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasSlot(Slot slot) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return slots.contains(slot);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if this slot has overlapping duration with the other slots in timetable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param slot The slot to be checked."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return true if this slot has overlapping duration with the other slots in timetable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasOverlapDuration(Slot slot) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return slots.hasOverlapDuration(slot);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addSlot(Slot slot) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        slots.add(slot);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void deleteSlot(Slot slot) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        slots.remove(slot);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void deleteSlot(Activity activity) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        slots.remove(activity);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlot(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        slots.setSlot(target, editedActivity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlots(List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.slots.setSlots(slots);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public ObservableList\u003cSlot\u003e getSlotList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return slots.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "nicholasyeo": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/UniqueSlotList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.exceptions.DuplicateSlotException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.exceptions.SlotNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.exceptions.SlotOverlapDurationException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * A list of slots that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * A slot is considered unique by comparing using {@code Slot#isSameSlot(Slot)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * slots uses Slot#isSameSlot(Slot) for equality"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * so as to ensure that the slot being added or updated is unique in terms of identity in the UniqueSlotList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * However, the removal of a slot uses Slot#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * as to ensure that the slot with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * @see Slot#isSameSlot(Slot)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class UniqueSlotList implements Iterable\u003cSlot\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final ObservableList\u003cSlot\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final ObservableList\u003cSlot\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if the list contains an equivalent Slot as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean contains(Slot toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameSlot);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if the list contains a Slot with overlapping duration as the given argument."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param toCheck The slot to check."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return True if the list contains a Slot with overlapping duration as the Slot to check."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean hasOverlapDuration(Slot toCheck) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::hasOverlapDuration);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Adds a slot to the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * The Slot must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void add(Slot toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new DuplicateSlotException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (hasOverlapDuration(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new SlotOverlapDurationException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        FXCollections.sort(internalList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Removes the equivalent slot from the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * The slot must exist in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void remove(Slot toRemove) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assert(internalList.contains(toRemove));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new SlotNotFoundException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Removes all slots in the list that contains the specified Activity."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param toRemove The Activity to remove."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void remove(Activity toRemove) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        internalList.removeIf(slot -\u003e slot.getActivity().isSameActivity(toRemove));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlot(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireAllNonNull(target, editedActivity);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        for (Slot slot : internalList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            if (slot.getActivity().isSameActivity(target)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                int index \u003d internalList.indexOf(slot);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                Slot editedSlot \u003d new Slot(editedActivity, slot.getDay(), slot.getDuration());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                internalList.set(index, editedSlot);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlots(UniqueSlotList replacement) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Replaces the contents of this list with {@code slots}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * {@code slots} must not contain duplicate slots."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlots(List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        requireNonNull(slots);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!areSlotsUnique(slots)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new DuplicateSlotException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (areSlotsOverlapping(slots)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new SlotOverlapDurationException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        internalList.setAll(slots);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if {@code slots} contains only unique slots."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean areSlotsUnique(List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        for (int i \u003d 0; i \u003c slots.size() - 1; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            for (int j \u003d i + 1; j \u003c slots.size(); j++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                if (slots.get(i).isSameSlot(slots.get(j))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if {@code slots} contains no overlapping slots."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean areSlotsOverlapping(List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        for (int i \u003d 0; i \u003c slots.size() - 1; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            for (int j \u003d i + 1; j \u003c slots.size(); j++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                if (slots.get(i).hasOverlapDuration(slots.get(j))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public ObservableList\u003cSlot\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Iterator\u003cSlot\u003e iterator() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                || (other instanceof UniqueSlotList // instanceof handles nulls"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueSlotList) other).internalList));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 171,
      "Licheng-Wu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/exceptions/DuplicateSlotException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.timetable.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class DuplicateSlotException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String MESSAGE \u003d \"Operation would result in duplicate slots in your timetable.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public DuplicateSlotException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        super(MESSAGE);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/exceptions/SlotNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.timetable.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class SlotNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String MESSAGE \u003d \"The slot does not exist in the timetable.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public SlotNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        super(MESSAGE);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/timetable/exceptions/SlotOverlapDurationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.timetable.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class SlotOverlapDurationException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String MESSAGE \u003d \"Operation would result in overlapping durations in your timetable.\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public SlotOverlapDurationException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        super(MESSAGE);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Represents a name in fitNUS."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_FORMAT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_LIMIT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            \"Names should not have character count exceeding 50.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final int CHARACTER_LIMIT \u003d 50;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        checkArgument(isValidLength(name), MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns true if a given string has a valid character limit."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param test The string to be tested."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return true if the given string has a valid character limit."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static boolean isValidLength(String test) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return test.length() \u003c\u003d CHARACTER_LIMIT;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                \u0026\u0026 fullName.toLowerCase().equals(((Name) other).fullName.toLowerCase())); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "nicholasyeo": 18,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Contains utility methods for populating {@code FitNus} with sample data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static Lesson[] getSampleLessons() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new Lesson[] {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            new Lesson(new Name(\"GER1000\"), getTagSet(\"easy\")),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            new Lesson(new Name(\"GEQ2000\"), getTagSet(\"chill\", \"webcasted\")),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            new Lesson(new Name(\"GEH3000\"), getTagSet(\"hard\")),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            new Lesson(new Name(\"GET4000\"), getTagSet(\"priority\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            new Lesson(new Name(\"GES5000\"), getTagSet(\"fun\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            new Lesson(new Name(\"GEX6000\"), getTagSet(\"hard\"))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static ReadOnlyFitNus getSampleFitNus() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        FitNus sampleFitNus \u003d new FitNus();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        for (Lesson sampleLesson : getSampleLessons()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            sampleFitNus.addLesson(sampleLesson);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return sampleFitNus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 16,
      "-": 26,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/FitNusStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Represents a storage for {@link seedu.address.model.FitNus}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public interface FitNusStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    Path getFitNusFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns FitNus data as a {@link ReadOnlyFitNus}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    Optional\u003cReadOnlyFitNus\u003e readFitNus() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @see #getFitNusFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    Optional\u003cReadOnlyFitNus\u003e readFitNus(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Saves the given {@link ReadOnlyFitNus} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @param fitNus cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    void saveFitNus(ReadOnlyFitNus fitNus) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @see #saveFitNus(ReadOnlyFitNus)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    void saveFitNus(ReadOnlyFitNus fitNus, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 13,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBody.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Body;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Height;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Weight;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Jackson-friendly version of {@link Body}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "class JsonAdaptedBody {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Body\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final double height;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final double weight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Constructs a {@code JsonAdaptedBody} with the given body details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public JsonAdaptedBody(@JsonProperty(\"height\") double height,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                               @JsonProperty(\"weight\") double weight) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.height \u003d height;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.weight \u003d weight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Converts a given {@code Body} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public JsonAdaptedBody(Body source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.height \u003d source.getHeight().getHeight();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.weight \u003d source.getWeight().getWeight();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Converts this Jackson-friendly adapted Body object into the model\u0027s {@code Body} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Body."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Body toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!Height.isValidHeight(height)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new IllegalValueException(Height.MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else if (!Weight.isValidWeight(weight)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new IllegalValueException(Weight.MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Body newBody \u003d new Body();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        newBody.setHeight(new Height(height));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        newBody.setWeight(new Weight(weight));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return newBody;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 8,
      "khor-jingqian": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDailyCalorie.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.DailyCalorie;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Jackson-friendly version of {@link DailyCalorie}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "class JsonAdaptedDailyCalorie {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"DailyCalorie\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String INVALID_CALORIE_MESSAGE_FORMAT \u003d \"DailyCalorie\u0027s calorie field is incorrect!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final String calories;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Constructs a {@code JsonAdaptedDailyCalorie} with the given daily calorie details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public JsonAdaptedDailyCalorie(@JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                              @JsonProperty(\"calories\") String calories) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Converts a given {@code DailyCalorie} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public JsonAdaptedDailyCalorie(DailyCalorie source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        calories \u003d Integer.toString(source.getCalories());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Converts this Jackson-friendly adapted daily calorie object into the model\u0027s {@code DailyCalorie} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted daily calorie."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public DailyCalorie toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    LocalDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        LocalDate modelLocalDate \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie modelDailyCalorie \u003d new DailyCalorie(modelLocalDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        int modelCalories;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            modelCalories \u003d Integer.parseInt(calories);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            modelDailyCalorie.addCalories(modelCalories);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new IllegalValueException(INVALID_CALORIE_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (modelCalories \u003c 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new IllegalValueException(INVALID_CALORIE_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return modelDailyCalorie;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 6,
      "khor-jingqian": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedExercise.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Jackson-friendly version of {@link Exercise}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "class JsonAdaptedExercise {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Exercise\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Constructs a {@code JsonAdaptedExercise} with the given body details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public JsonAdaptedExercise(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Converts a given {@code Exercise} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public JsonAdaptedExercise(Exercise source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Converts this Jackson-friendly adapted exercise object into the model\u0027s {@code Exercise} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted exercise."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public Exercise toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        final List\u003cTag\u003e exerciseTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            exerciseTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(exerciseTags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new Exercise(modelName, modelTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "nicholasyeo": 3,
      "Licheng-Wu": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedLesson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Jackson-friendly version of {@link Lesson}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "class JsonAdaptedLesson {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Lesson\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Constructs a {@code JsonAdaptedLesson} with the given lesson details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public JsonAdaptedLesson(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                               @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Converts a given {@code Lesson} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public JsonAdaptedLesson(Lesson source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Converts this Jackson-friendly adapted lesson object into the model\u0027s {@code Lesson} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted lesson."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Lesson toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        final List\u003cTag\u003e lessonTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            lessonTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(lessonTags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new Lesson(modelName, modelTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 69,
      "nicholasyeo": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRoutine.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Jackson-friendly version of {@link Routine}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "class JsonAdaptedRoutine {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Routine\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final String routineName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final List\u003cJsonAdaptedExercise\u003e exercisesIncluded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Constructs a {@code JsonAdaptedRoutine} with the given routine details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public JsonAdaptedRoutine(@JsonProperty(\"routineName\") String routineName,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                             @JsonProperty(\"exercisesIncluded\") List\u003cJsonAdaptedExercise\u003e tagged) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.routineName \u003d routineName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            this.exercisesIncluded.addAll(tagged);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Converts a given {@code Routine} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public JsonAdaptedRoutine(Routine source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routineName \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        exercisesIncluded.addAll(source.getExercises().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .map(JsonAdaptedExercise::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Converts this Jackson-friendly adapted routine object into the model\u0027s {@code Routine} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted routine."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Routine toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final List\u003cExercise\u003e routineExercises \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (JsonAdaptedExercise exercise : exercisesIncluded) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            routineExercises.add(exercise.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (routineName \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!Name.isValidName(routineName)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final Name modelName \u003d new Name(routineName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        final Set\u003cExercise\u003e modelExercise \u003d new HashSet\u003c\u003e(routineExercises);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine modelRoutine \u003d new Routine(modelName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Exercise exercise : modelExercise) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            modelRoutine.addExercise(exercise);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return modelRoutine;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 7,
      "nicholasyeo": 4,
      "khor-jingqian": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSlot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Activity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.timetable.Day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.timetable.Duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * Jackson-friendly version of {@link Slot}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class JsonAdaptedSlot {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String TYPE_ROUTINE \u003d \"routine\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String TYPE_LESSON \u003d \"lesson\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Slot\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final String activityName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final String duration;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagsForLesson \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final List\u003cJsonAdaptedExercise\u003e exercisesForRoutine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Constructs a {@code JsonAdaptedSlot} with the given slot details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public JsonAdaptedSlot(@JsonProperty(\"activityName\") String activityName,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                           @JsonProperty(\"type\") String type,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                           @JsonProperty(\"day\") String day,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                           @JsonProperty(\"duration\") String duration,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                           @JsonProperty(\"tagsForLesson\") List\u003cJsonAdaptedTag\u003e tags,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                           @JsonProperty(\"exercisesForRoutine\") List\u003cJsonAdaptedExercise\u003e exercises) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.activityName \u003d activityName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (type.equals(TYPE_LESSON)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            if (tags !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                tagsForLesson.addAll(tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            if (exercises !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                exercisesForRoutine.addAll(exercises);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Converts a given {@code Slot} into this class for Jackson use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public JsonAdaptedSlot(Slot source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        activityName \u003d source.getActivity().getName().fullName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        type \u003d source.getActivity() instanceof Routine"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                ? TYPE_ROUTINE"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                : TYPE_LESSON;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        day \u003d source.getDay().toString().toLowerCase();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        duration \u003d source.getDuration().toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (type.equals(TYPE_LESSON)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            Lesson lesson \u003d (Lesson) source.getActivity();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            tagsForLesson.addAll(lesson.getTags()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            Routine routine \u003d (Routine) source.getActivity();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            exercisesForRoutine.addAll(routine.getExercises()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    .map(JsonAdaptedExercise::new)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Converts this Jackson-friendly adapted slot object into the model\u0027s {@code Slot} object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted slot."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Slot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (activityName \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Name.isValidName(activityName)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (Day.isUnknownDay(Day.getDayEnum(day))) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Duration.isValidDuration(duration)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new IllegalValueException(Duration.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        final Name modelName \u003d new Name(activityName);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        final Activity modelActivity;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (type.equals(TYPE_LESSON)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            final List\u003cTag\u003e lessonTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            for (JsonAdaptedTag tag : tagsForLesson) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                lessonTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(lessonTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            modelActivity \u003d new Lesson(modelName, modelTags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            final List\u003cExercise\u003e routineExercises \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            for (JsonAdaptedExercise exercise : exercisesForRoutine) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                routineExercises.add(exercise.toModelType());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            final Set\u003cExercise\u003e modelExercise \u003d new HashSet\u003c\u003e(routineExercises);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            Routine modelRoutine \u003d new Routine(modelName);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            for (Exercise exercise : modelExercise) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                modelRoutine.addExercise(exercise);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            modelActivity \u003d modelRoutine;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        final Day modelDay \u003d Day.getDayEnum(day);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        final Duration modelDuration \u003d parseDuration(duration);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new Slot(modelActivity, modelDay, modelDuration);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private Duration parseDuration(String toParse) throws IllegalValueException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String[] timeSplit \u003d toParse.split(\"-\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int startHour \u003d Integer.parseInt(timeSplit[0].substring(0, 2));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int startMinute \u003d Integer.parseInt(timeSplit[0].substring(2, 4));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LocalTime startTime \u003d LocalTime.of(startHour, startMinute);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int endHour \u003d Integer.parseInt(timeSplit[1].substring(0, 2));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        int endMinute \u003d Integer.parseInt(timeSplit[1].substring(2, 4));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LocalTime endTime \u003d LocalTime.of(endHour, endMinute);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        if (!Duration.isValidDuration(startTime, endTime)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new IllegalValueException(Duration.MESSAGE_CONSTRAINTS_ORDER);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new Duration(startTime, endTime);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 6,
      "nicholasyeo": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonFitNusStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * A class to access FitNus data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class JsonFitNusStorage implements FitNusStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFitNusStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public JsonFitNusStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Path getFitNusFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Optional\u003cReadOnlyFitNus\u003e readFitNus() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return readFitNus(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Similar to {@link #readFitNus()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Optional\u003cReadOnlyFitNus\u003e readFitNus(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Optional\u003cJsonSerializableFitNus\u003e jsonFitNus \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                filePath, JsonSerializableFitNus.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!jsonFitNus.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return Optional.of(jsonFitNus.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void saveFitNus(ReadOnlyFitNus fitNus) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        saveFitNus(fitNus, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Similar to {@link #saveFitNus(ReadOnlyFitNus)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void saveFitNus(ReadOnlyFitNus fitNus, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(fitNus);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFitNus(fitNus), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 20,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableFitNus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Body;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.DailyCalorie;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * An Immutable FitNus that is serializable to JSON format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "@JsonRootName(value \u003d \"fitnus\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "class JsonSerializableFitNus {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_LESSON \u003d \"Lesson list contains duplicate lesson(s).\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXERCISE \u003d \"Exercise list contains duplicate exercise(s).\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ROUTINE \u003d \"Routine list contains duplicate routine(s).\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SLOT \u003d \"Slot list contains duplicate slot(s).\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_OVERLAP_SLOT \u003d \"Slot list contains overlapping slot(s).\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DAILYCALORIE \u003d \"Calorie log contains duplicate calorie log(s).\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final List\u003cJsonAdaptedExercise\u003e exercises \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final List\u003cJsonAdaptedLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final List\u003cJsonAdaptedRoutine\u003e routines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final List\u003cJsonAdaptedSlot\u003e slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final List\u003cJsonAdaptedDailyCalorie\u003e dailyCalories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final JsonAdaptedBody body;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Constructs a {@code JsonSerializableFitNus} with the given data entries."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public JsonSerializableFitNus(@JsonProperty(\"exercises\") List\u003cJsonAdaptedExercise\u003e exercises,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                                  @JsonProperty(\"lessons\") List\u003cJsonAdaptedLesson\u003e lessons,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                                  @JsonProperty(\"routines\") List\u003cJsonAdaptedRoutine\u003e routines,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                                  @JsonProperty(\"slots\") List\u003cJsonAdaptedSlot\u003e slots,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                  @JsonProperty(\"dailyCalories\") List\u003cJsonAdaptedDailyCalorie\u003e dailyCalories,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                                  @JsonProperty(\"body\") JsonAdaptedBody body) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.exercises.addAll(exercises);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.lessons.addAll(lessons);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.routines.addAll(routines);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.slots.addAll(slots);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.dailyCalories.addAll(dailyCalories);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Converts a given {@code ReadOnlyFitNus} into this class for Jackson use."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFitNus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public JsonSerializableFitNus(ReadOnlyFitNus source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exercises.addAll(source.getExerciseList().stream().map(JsonAdaptedExercise::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lessons.addAll(source.getLessonList().stream().map(JsonAdaptedLesson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routines.addAll(source.getRoutineList().stream().map(JsonAdaptedRoutine::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        slots.addAll(source.getSlotList().stream().map(JsonAdaptedSlot::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        dailyCalories.addAll(source.getDailyCalorieList().stream().map(JsonAdaptedDailyCalorie::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        body \u003d source.getBody().stream().map(JsonAdaptedBody::new).collect(Collectors.toList()).get(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Converts this fitNUS into the model\u0027s {@code FitNus} object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public FitNus toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        FitNus fitNus \u003d new FitNus();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        for (JsonAdaptedExercise jsonAdaptedExercise : exercises) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            Exercise exercise \u003d jsonAdaptedExercise.toModelType();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            if (fitNus.hasExercise(exercise)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            fitNus.addExercise(exercise);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        for (JsonAdaptedLesson jsonAdaptedLesson : lessons) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            Lesson lesson \u003d jsonAdaptedLesson.toModelType();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            if (fitNus.hasLesson(lesson)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            fitNus.addLesson(lesson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (JsonAdaptedRoutine jsonAdaptedRoutine : routines) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Routine routine \u003d jsonAdaptedRoutine.toModelType();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            if (fitNus.hasRoutine(routine)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ROUTINE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            fitNus.addRoutine(routine);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        for (JsonAdaptedSlot jsonAdaptedSlot : slots) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            Slot slot \u003d jsonAdaptedSlot.toModelType();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            if (fitNus.hasSlot(slot)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SLOT);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            if (fitNus.hasOverlappingDurationInSlot(slot)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                throw new IllegalValueException(MESSAGE_OVERLAP_SLOT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            fitNus.addSlotToTimetable(slot);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cDailyCalorie\u003e calorieLog \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Map\u003cLocalDate, Integer\u003e dateTracker \u003d new HashMap\u003cLocalDate, Integer\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (JsonAdaptedDailyCalorie jsonAdaptedDailyCalorie: dailyCalories) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            DailyCalorie dailyCalorie \u003d jsonAdaptedDailyCalorie.toModelType();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (dateTracker.containsKey(dailyCalorie.getDate())) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DAILYCALORIE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            dateTracker.put(dailyCalorie.getDate(), 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            calorieLog.add(dailyCalorie);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Collections.sort(calorieLog);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.addCalorieEntries(calorieLog);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (body !\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            Body newBody \u003d body.toModelType();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            fitNus.addHeight(newBody.getHeight());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            fitNus.addWeight(newBody.getWeight());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fitNus;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 40,
      "nicholasyeo": 19,
      "patricktan6": 1,
      "-": 32,
      "khor-jingqian": 39,
      "Licheng-Wu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public interface Storage extends FitNusStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    Path getFitNusFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    Optional\u003cReadOnlyFitNus\u003e readFitNus() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    void saveFitNus(ReadOnlyFitNus fitNus) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Manages storage of fitNUS data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private FitNusStorage fitNusStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code FitNusStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public StorageManager(FitNusStorage fitNusStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.fitNusStorage \u003d fitNusStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d fitNUS methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Path getFitNusFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fitNusStorage.getFitNusFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Optional\u003cReadOnlyFitNus\u003e readFitNus() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return readFitNus(fitNusStorage.getFitNusFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Optional\u003cReadOnlyFitNus\u003e readFitNus(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fitNusStorage.readFitNus(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void saveFitNus(ReadOnlyFitNus fitNus) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        saveFitNus(fitNus, fitNusStorage.getFitNusFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void saveFitNus(ReadOnlyFitNus fitNus, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNusStorage.saveFitNus(fitNus, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 17,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BmiBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Body;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class BmiBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String FXML \u003d \"BmiBox.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalorieGraph.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private ObservableList\u003cBody\u003e body;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Label bmi2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /** Constructs BmiBox"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param body"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public BmiBox(ObservableList\u003cBody\u003e body) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Body observedBody \u003d body.get(0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String text \u003d \"BMI Metrics: \\n\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + \"Height: \" + observedBody.getHeight().toString() + \"\\n\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + \"Weight: \" + observedBody.getWeight().toString() + \"\\n\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + \"BMI: \" + String.format(\"%.2f\", observedBody.getBmi());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        bmi2.setText(text);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        body.addListener((ListChangeListener\u003cBody\u003e) change -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            update();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private void update() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Body observedBody \u003d body.get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String text \u003d \"BMI Metrics: \\n\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + \"Height: \" + observedBody.getHeight().toString() + \"\\n\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + \"Weight: \" + observedBody.getWeight().toString() + \"\\n\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + \"BMI: \" + String.format(\"%.2f\", observedBody.getBmi());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        bmi2.setText(text);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 11,
      "khor-jingqian": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalorieGraph.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.DailyCalorie;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieGraph extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String FXML \u003d \"CalorieGraph.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalorieGraph.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private ObservableList\u003cDailyCalorie\u003e calorieLog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final XYChart.Series\u003cString, Number\u003e series;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private CategoryAxis xAxis;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private LineChart\u003cString, Number\u003e graph;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /** Constructs CalorieGraph"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @param calorieLog"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public CalorieGraph(ObservableList\u003cDailyCalorie\u003e calorieLog) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.calorieLog \u003d calorieLog;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        series \u003d new XYChart.Series\u003cString, Number\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        xAxis.setLabel(\"Day\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        yAxis.setLabel(\"Daily Calories\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        graph.setTitle(\"Calorie Graph\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        graph.setLegendVisible(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        graph.getData().add(series);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        calorieLog.addListener((ListChangeListener\u003cDailyCalorie\u003e) change -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            update();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private void update() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        series.getData().clear();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (calorieLog.size() !\u003d 0) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            for (DailyCalorie entry : calorieLog) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                series.getData().add("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        new XYChart.Data\u003c\u003e(entry.getDate().getDayOfWeek().toString(), entry.getCalories())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (!graph.getData().contains(series)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                graph.getData().add(series);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            graph.getData().remove(series);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "khor-jingqian": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExerciseCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * An UI component that displays information of a {@code Exercise}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static final String FXML \u003d \"ExerciseListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on FitNus level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public final Exercise exercise;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Creates a {@code ExerciseCode} with the given {@code Exercise} and index to display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseCard(Exercise exercise, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.exercise \u003d exercise;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        name.setText(exercise.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exercise.getTags().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!(other instanceof ExerciseCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseCard card \u003d (ExerciseCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 exercise.equals(card.exercise);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "khor-jingqian": 1,
      "Licheng-Wu": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExerciseListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Panel containing the list of exercises."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static final String FXML \u003d \"ExerciseListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExerciseListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private ListView\u003cExercise\u003e exerciseListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Creates a {@code ExerciseListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseListPanel(ObservableList\u003cExercise\u003e exerciseList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exerciseListView.setItems(exerciseList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exerciseListView.setCellFactory(listView -\u003e new ExerciseListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Exercise} using a {@code ExerciseCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    class ExerciseListViewCell extends ListCell\u003cExercise\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        protected void updateItem(Exercise exercise, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            super.updateItem(exercise, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            if (empty || exercise \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                setGraphic(new ExerciseCard(exercise, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "Licheng-Wu": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t09-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the full user guide: \" + USERGUIDE_URL + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            + \"A summarized version of the user guide with all the commands is displayed below.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String summarizedGuide \u003d HelpCommand.STANDARDIZED_HELP_MESSAGE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private TextArea commandMessage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        commandMessage.setText(summarizedGuide);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setGuide(String summarizedGuide) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        requireNonNull(summarizedGuide);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        commandMessage.setText(summarizedGuide);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 18,
      "-": 100,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HomePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.Background;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.BackgroundFill;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.CornerRadii;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class HomePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static final String FXML \u003d \"HomePanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private ExerciseListPanel exerciseListPanel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private LessonListPanel lessonListPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private RoutineListPanel routineListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private CalorieGraph lineChart;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private BmiBox bmiBox;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane routineListPanelPlaceholder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane exerciseListPanelPlaceholder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane lessonListPanelPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private HBox graph;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private VBox bmi1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /** Constructs HomePanel"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @param logic"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public HomePanel(Logic logic) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exerciseListPanel \u003d new ExerciseListPanel(logic.getFilteredExerciseList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        exerciseListPanelPlaceholder.getChildren().add(exerciseListPanel.getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        lessonListPanel \u003d new LessonListPanel(logic.getFilteredLessonList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        lessonListPanelPlaceholder.getChildren().add(lessonListPanel.getRoot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        routineListPanelPlaceholder.setBackground(new Background(new BackgroundFill(Color.YELLOW, CornerRadii.EMPTY,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                Insets.EMPTY)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        routineListPanel \u003d new RoutineListPanel(logic.getFilteredRoutineList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        routineListPanelPlaceholder.getChildren().add(routineListPanel.getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        lineChart \u003d new CalorieGraph(logic.getFilteredDailyCalorie());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        graph.getChildren().add(lineChart.getRoot());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        bmiBox \u003d new BmiBox(logic.getFilteredBody());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        bmi1.getChildren().add(bmiBox.getRoot());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 17,
      "Licheng-Wu": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LessonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * An UI component that displays information of a {@code Lesson}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String FXML \u003d \"LessonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on FitNus level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public final Lesson lesson;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a {@code LessonCode} with the given {@code Lesson} and index to display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonCard(Lesson lesson, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        name.setText(lesson.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lesson.getTags().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (!(other instanceof LessonCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonCard card \u003d (LessonCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u0026\u0026 lesson.equals(card.lesson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 13,
      "-": 54,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LessonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Panel containing the list of lessons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String FXML \u003d \"LessonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LessonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private ListView\u003cLesson\u003e lessonListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a {@code LessonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonListPanel(ObservableList\u003cLesson\u003e lessonList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lessonListView.setItems(lessonList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lessonListView.setCellFactory(listView -\u003e new LessonListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Lesson} using a {@code LessonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    class LessonListViewCell extends ListCell\u003cLesson\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        protected void updateItem(Lesson lesson, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            super.updateItem(lesson, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            if (empty || lesson \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                setGraphic(new LessonCard(lesson, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private HomePanel homePanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private TimetablePanel timetablePanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane homeContentPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane timetableContentPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private TabPane tabPanePlaceHolder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        homePanel \u003d new HomePanel(logic);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        homeContentPlaceholder.getChildren().add(homePanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        timetablePanel \u003d new TimetablePanel(logic);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        timetableContentPlaceholder.getChildren().add(timetablePanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getFitNusFilePath());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        tabPanePlaceHolder.setMinWidth(530);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        tabPanePlaceHolder.setMinHeight(50);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        VBox.setVgrow(tabPanePlaceHolder, Priority.ALWAYS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Handles the MainWindow if the Help command is used."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void handleHelpHelper(String summarizedGuide) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        helpWindow.setGuide(HelpCommand.getFilteredSearch());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                handleHelpHelper(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 13,
      "-": 187,
      "khor-jingqian": 3,
      "Licheng-Wu": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoutineCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * An UI component that displays information of a {@code Exercise}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String FXML \u003d \"RoutineListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on FitNus level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public final Routine routine;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Creates a {@code ExerciseCode} with the given {@code Exercise} and index to display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineCard(Routine routine, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        this.routine \u003d routine;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        name.setText(routine.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routine.getExercises().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .sorted(Comparator.comparing(exercise -\u003e exercise.getName().fullName))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .forEach(exercise -\u003e tags.getChildren().add(new Label(exercise.getName().fullName)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!(other instanceof RoutineCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineCard card \u003d (RoutineCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u0026\u0026 routine.equals(card.routine);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "khor-jingqian": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RoutineListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Panel containing the list of routines."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String FXML \u003d \"RoutineListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RoutineListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private ListView\u003cRoutine\u003e routineListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private ListView\u003cInteger\u003e lv;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Creates a {@code RoutineListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public RoutineListPanel(ObservableList\u003cRoutine\u003e routineList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routineListView.setItems(routineList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        routineListView.setCellFactory(listView -\u003e new RoutineListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Routine} using a {@code RoutineCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    class RoutineListViewCell extends ListCell\u003cRoutine\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        protected void updateItem(Routine routine, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            super.updateItem(routine, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            if (empty || routine \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                setGraphic(new RoutineCard(routine, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "khor-jingqian": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SlotCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * An UI component that displays information of a {@code Slot}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class SlotCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static final String FXML \u003d \"SlotListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on FitNus level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public final Slot slot;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Creates a {@code SlotCode} with the given {@code Slot} and index to display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public SlotCard(Slot slot, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.slot \u003d slot;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        name.setText(slot.getActivity().getName().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        time.setText(slot.getDuration().getStartTime().toString() + \" - \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                + slot.getDuration().getEndTime().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        if (!(other instanceof SlotCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        SlotCard card \u003d (SlotCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u0026\u0026 slot.equals(card.slot);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 1,
      "khor-jingqian": 1,
      "Licheng-Wu": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SlotListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.geometry.Orientation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Panel containing the list of slots."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class SlotListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static final String FXML \u003d \"SlotListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SlotListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private ListView\u003cSlot\u003e slotListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Creates a {@code SlotListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public SlotListPanel(ObservableList\u003cSlot\u003e slotList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        slotListView.setItems(slotList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        slotListView.setOrientation(Orientation.HORIZONTAL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        slotListView.setCellFactory(listView -\u003e new SlotListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Slot} using a {@code SlotCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    class SlotListViewCell extends ListCell\u003cSlot\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        protected void updateItem(Slot slot, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            super.updateItem(slot, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            if (empty || slot \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                setGraphic(new SlotCard(slot, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 1,
      "Licheng-Wu": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimetablePanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class TimetablePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static final String FXML \u003d \"TimetablePanel.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private SlotListPanel mondayListPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private SlotListPanel tuesdayListPanel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private SlotListPanel wednesdayListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private SlotListPanel thursdayListPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private SlotListPanel fridayListPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane mondayListPanelPlaceholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane tuesdayListPanelPlaceholder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane wednesdayListPanelPlaceholder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane thursdayListPanelPlaceholder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private StackPane fridayListPanelPlaceholder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /** Constructs TimetablePanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * @param logic"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public TimetablePanel(Logic logic) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        mondayListPanel \u003d new SlotListPanel(logic.getFilteredSlotList(\"Monday\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        mondayListPanelPlaceholder.getChildren().add(mondayListPanel.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        tuesdayListPanel \u003d new SlotListPanel(logic.getFilteredSlotList(\"Tuesday\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        tuesdayListPanelPlaceholder.getChildren().add(tuesdayListPanel.getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        wednesdayListPanel \u003d new SlotListPanel(logic.getFilteredSlotList(\"Wednesday\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        wednesdayListPanelPlaceholder.getChildren().add(wednesdayListPanel.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        thursdayListPanel \u003d new SlotListPanel(logic.getFilteredSlotList(\"Thursday\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        thursdayListPanelPlaceholder.getChildren().add(thursdayListPanel.getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        fridayListPanel \u003d new SlotListPanel(logic.getFilteredSlotList(\"Friday\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        fridayListPanelPlaceholder.getChildren().add(fridayListPanel.getRoot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/fitnus.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 88,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 88,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/main/resources/view/BmiBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cLabel fx:id\u003d\"bmi2\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c/Label\u003e"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 10
    }
  },
  {
    "path": "src/main/resources/view/CalorieGraph.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cLineChart fx:id\u003d\"graph\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefWidth\u003d\"725\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   \u003cxAxis\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      \u003cCategoryAxis fx:id\u003d\"xAxis\" side\u003d\"BOTTOM\" tickLabelFill\u003d\"white\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\" prefWidth\u003d\"Infinity\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   \u003cyAxis\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "      \u003cNumberAxis fx:id\u003d\"yAxis\" side\u003d\"LEFT\" tickLabelFill\u003d\"white\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" prefHeight\u003d\"Infinity\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "   \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c/LineChart\u003e"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 14
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ".list-cell:filled:selected #routineCardPane {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-border-color: #4b7b91;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-padding: 1 5 1 5;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-padding: 5 1 5 1;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#routineCardPane {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#timetable {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-background-color: #FFF000;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#calories {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-background-color: #FFFFFF;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#sideBox {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     -fx-background-color: #FF7F50;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#headers {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-text-fill: #FFFFFF"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#bmi1 {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-background-color: #ADD8E6;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-background-radius: 30;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#bmi2 {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-background-color: #ADD8E6;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#logo {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-background-color: #FFF123;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "#routineListPanel {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    -fx-background-color: #FFFFFF;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 349,
      "khor-jingqian": 45,
      "Licheng-Wu": 3
    }
  },
  {
    "path": "src/main/resources/view/ExerciseListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 33
    }
  },
  {
    "path": "src/main/resources/view/ExerciseListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003cListView fx:id\u003d\"exerciseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 8
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ".chart-title {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ".axis-label {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " -fx-text-fill: #FFFFFF;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "khor-jingqian": 8
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003cfx:root height\u003d\"600.0\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        \u003cScene stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            \u003cAnchorPane stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u003cVBox AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                        \u003cHBox stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                            \u003cLabel fx:id\u003d\"helpMessage\" styleClass\u003d\"help-label\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                    \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                    \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/Button\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"15.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                        \u003cTextArea fx:id\u003d\"commandMessage\" editable\u003d\"false\" layoutX\u003d\"-1.0\" layoutY\u003d\"43.0\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                  text\u003d\"\\$commandGuide\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                                  AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"43.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 20,
      "-": 25
    }
  },
  {
    "path": "src/main/resources/view/HomePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cVBox maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003cHBox maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"50\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cHBox fx:id\u003d\"graph\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cVBox prefHeight\u003d\"350\" prefWidth\u003d\"610\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"bmi1\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003cHBox prefWidth\u003d\"450\" prefHeight\u003d\"50\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cVBox prefWidth\u003d\"340\" alignment\u003d\"BOTTOM_CENTER\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cLabel text\u003d\"Exercises:\" id\u003d\"headers\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cVBox prefWidth\u003d\"340\" alignment\u003d\"BOTTOM_CENTER\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cLabel text\u003d\"Routines:\" id\u003d\"headers\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cVBox prefWidth\u003d\"340\" alignment\u003d\"BOTTOM_CENTER\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cLabel text\u003d\"Lessons:\" id\u003d\"headers\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003cHBox prefHeight\u003d\"350.0\" prefWidth\u003d\"200.0\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cVBox fx:id\u003d\"exerciseList\" minWidth\u003d\"200\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cStackPane fx:id\u003d\"exerciseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cVBox fx:id\u003d\"routineList\" minWidth\u003d\"200\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cStackPane fx:id\u003d\"routineListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cVBox fx:id\u003d\"lessonList\" minWidth\u003d\"200\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cStackPane fx:id\u003d\"lessonListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 30,
      "Licheng-Wu": 39
    }
  },
  {
    "path": "src/main/resources/view/LessonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 33
    }
  },
  {
    "path": "src/main/resources/view/LessonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \u003cListView fx:id\u003d\"lessonListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "\u003cfx:root minHeight\u003d\"700\" minWidth\u003d\"900\" onCloseRequest\u003d\"#handleExit\" title\u003d\"fitNUS\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003cImage url\u003d\"@/images/fitnus.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cVBox fx:id\u003d\"tabsContainer\" VBox.vgrow\u003d\"ALWAYS\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "          \u003cHBox id\u003d\"tabsVBox\" HBox.hgrow\u003d\"ALWAYS\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cTabPane fx:id\u003d\"tabPanePlaceHolder\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                     VBox.vgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                     HBox.hgrow\u003d\"ALWAYS\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                     tabClosingPolicy\u003d\"UNAVAILABLE\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                     stylesheets\u003d\"@css/Tab.css\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "              \u003cTab text\u003d\"HOME\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cStackPane fx:id\u003d\"homeContentPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "              \u003cTab text\u003d\"TIMETABLE\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cStackPane fx:id\u003d\"timetableContentPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "              \u003c/Tab\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "          \u003c/HBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"Infinity\"  minHeight\u003d\"75\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "nicholasyeo": 1,
      "-": 42,
      "khor-jingqian": 13,
      "Licheng-Wu": 13
    }
  },
  {
    "path": "src/main/resources/view/RoutineListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cHBox id\u003d\"routineCardPane\" fx:id\u003d\"routineCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" \u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 33
    }
  },
  {
    "path": "src/main/resources/view/RoutineListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cVBox id\u003d\"routineListPanel\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxWidth\u003d\"Infinity\" maxHeight\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003cListView fx:id\u003d\"routineListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 9
    }
  },
  {
    "path": "src/main/resources/view/SlotListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"200\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"40\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 34
    }
  },
  {
    "path": "src/main/resources/view/SlotListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003cListView fx:id\u003d\"slotListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 8
    }
  },
  {
    "path": "src/main/resources/view/TimetablePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e\u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        \u003cVBox prefWidth\u003d\"50\" prefHeight\u003d\"50\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cVBox prefWidth\u003d\"50\" minHeight\u003d\"50\" alignment\u003d\"CENTER\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cLabel text\u003d\"Mon\" id\u003d\"headers\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cVBox prefWidth\u003d\"50\" minHeight\u003d\"85\" alignment\u003d\"CENTER\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cLabel text\u003d\"Tue\" id\u003d\"headers\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cVBox prefWidth\u003d\"50\" minHeight\u003d\"85\" alignment\u003d\"CENTER\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cLabel text\u003d\"Wed\" id\u003d\"headers\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cVBox prefWidth\u003d\"50\" minHeight\u003d\"85\" alignment\u003d\"CENTER\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cLabel text\u003d\"Thur\" id\u003d\"headers\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \u003cVBox prefWidth\u003d\"50\" minHeight\u003d\"85\" alignment\u003d\"CENTER\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cLabel text\u003d\"Fri\" id\u003d\"headers\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \u003cVBox prefHeight\u003d\"430.0\" prefWidth\u003d\"800.0\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cVBox fx:id\u003d\"mondayList\" minWidth\u003d\"150\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cStackPane fx:id\u003d\"mondayListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cVBox fx:id\u003d\"tuesdayList\" minWidth\u003d\"150\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cStackPane fx:id\u003d\"tuesdayListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cVBox fx:id\u003d\"wednesdayList\" minWidth\u003d\"150\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cStackPane fx:id\u003d\"wednesdayListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cVBox fx:id\u003d\"thursdayList\" minWidth\u003d\"150\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cStackPane fx:id\u003d\"thursdayListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003cVBox fx:id\u003d\"fridayList\" minWidth\u003d\"150\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                \u003cStackPane fx:id\u003d\"fridayListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    \u003c/children\u003e\u003c/HBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 9,
      "Licheng-Wu": 62
    }
  },
  {
    "path": "src/main/resources/view/css/Tab.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-margin: 0 -15 0 5;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-padding: 0 0 0 5;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-background-color: #313133;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ".tab-header-background {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-padding: 11 0 13 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-border-radius: 10 10 0 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-border-width: 1px 1px 3px 1px;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-border-color: #383838 #383838 #e0e0e0 #383838;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-min-width: 100px;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-focus-color: transparent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-faint-focus-color: transparent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-open-tab-animation: NONE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-close-tab-animation: NONE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ".tab-label {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-text-fill: #8DBE6A;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-font-size: 18;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-padding: 0px 5px 0px 5px;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ".tab:selected {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-border-width: 1px 1.5px 4px 1px;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    -fx-border-color: #2AC3CB #2AC3CB salmon #2AC3CB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 36
    }
  },
  {
    "path": "src/test/data/JsonFitNusStorageTest/invalidAndValidLessonFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"exercises\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"lessons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"name\": \"CS1101S\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"name\": \"CS!101S\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"routines\" : [ ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"slots\" : [ ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"dailyCalories\" : [ ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 15
    }
  },
  {
    "path": "src/test/data/JsonFitNusStorageTest/invalidLessonFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"exercises\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"lessons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"name\": \"Lesson with invalid name field: CS12!4\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"routines\" : [ ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"slots\" : [ ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"dailyCalories\" : [ ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 13
    }
  },
  {
    "path": "src/test/data/JsonSerializableFitNusTest/duplicateDailyCalorieFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"exercises\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"lessons\" : [ ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"routines\" : [ ],"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"slots\" : [ ],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"dailyCalories\" : [ {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \"date\" : \"2020-11-08\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \"calories\" : \"1500\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \"date\" : \"2020-11-08\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \"calories\" : \"2000\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  }],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 17
    }
  },
  {
    "path": "src/test/data/JsonSerializableFitNusTest/duplicateExerciseFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"exercises\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"name\" : \"Bench press\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagged\" : [ \"chest\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"name\" : \"Bench press\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"lessons\" : [ ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"routines\" : [ ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"slots\" : [ ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"dailyCalories\" : [ ],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 17
    }
  },
  {
    "path": "src/test/data/JsonSerializableFitNusTest/duplicateLessonFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"exercises\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"lessons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"name\": \"CS2100\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"tagged\": [ \"core\" ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"name\": \"CS2100\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"routines\" : [ ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"slots\" : [ ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"dailyCalories\" : [ ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 16
    }
  },
  {
    "path": "src/test/data/JsonSerializableFitNusTest/duplicateRoutineFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"exercises\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"lessons\" : [ ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"routines\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"routineName\" : \"Leg Day\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesIncluded\" : [ ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"routineName\" : \"Leg Day\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesIncluded\" : [ ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"slots\" : [ ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"dailyCalories\" : [ ],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 17
    }
  },
  {
    "path": "src/test/data/JsonSerializableFitNusTest/duplicateSlotFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"exercises\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"lessons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"name\" : \"MA1101R\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"name\" : \"MA1521\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"routines\" : [ {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"routineName\" : \"Leg Day\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesIncluded\" : [ ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"slots\" : [ {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"activityName\" : \"Leg Day\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"type\" : \"routine\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"day\" : \"wednesday\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"duration\" : \"1600-1800\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagsForLesson\" : [ ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesForRoutine\" : [ ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"activityName\" : \"Leg Day\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"type\" : \"routine\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"day\" : \"wednesday\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"duration\" : \"1600-1800\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagsForLesson\" : [ ],"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesForRoutine\" : [ ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"dailyCalories\" : [ ],"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 34
    }
  },
  {
    "path": "src/test/data/JsonSerializableFitNusTest/invalidDailyCalorieFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"exercises\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"lessons\" : [ ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"routines\" : [ ],"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"slots\" : [ ],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"dailyCalories\" : [ {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \"date\" : \"2020-11-08\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \"calories\" : \"-1000\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  }],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 14
    }
  },
  {
    "path": "src/test/data/JsonSerializableFitNusTest/invalidExerciseFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"exercises\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"name\" : \"Bench press$$$$\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagged\" : [ \"chest\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"name\" : \"Squats\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagged\" : [ \"Legs\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"lessons\" : [ ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"routines\" : [ ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"slots\" : [ ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"dailyCalories\" : [ ],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 17
    }
  },
  {
    "path": "src/test/data/JsonSerializableFitNusTest/invalidLessonFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"exercises\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"lessons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"name\": \"CS20!0\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"routines\" : [ ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"slots\" : [ ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"dailyCalories\" : [ ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 13
    }
  },
  {
    "path": "src/test/data/JsonSerializableFitNusTest/invalidRoutineFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"exercises\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"lessons\" : [ ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"routines\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"routineName\" : \"Leg Day%%%\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesIncluded\" : [ ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"routineName\" : \"Upper Body\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesIncluded\" : [ ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"slots\" : [ ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"dailyCalories\" : [ ],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 17
    }
  },
  {
    "path": "src/test/data/JsonSerializableFitNusTest/invalidSlotFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"exercises\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"lessons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"name\" : \"MA1101R\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"name\" : \"MA1521\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"routines\" : [ {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"routineName\" : \"Leg Day\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesIncluded\" : [ ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"slots\" : [ {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"activityName\" : \"Leg Day%%\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"type\" : \"routine\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"day\" : \"wednesday\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"duration\" : \"1600-1800\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagsForLesson\" : [ ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesForRoutine\" : [ ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"dailyCalories\" : [ ],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 27
    }
  },
  {
    "path": "src/test/data/JsonSerializableFitNusTest/overlapSlotFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"exercises\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"lessons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"name\" : \"MA1101R\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"name\" : \"MA1521\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"routines\" : [ {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"routineName\" : \"Leg Day\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesIncluded\" : [ ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"slots\" : [ {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"activityName\" : \"Leg Day\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"type\" : \"routine\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"day\" : \"wednesday\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"duration\" : \"1600-1800\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagsForLesson\" : [ ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesForRoutine\" : [ ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"activityName\" : \"MA1101R\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"type\" : \"lesson\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"day\" : \"wednesday\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"duration\" : \"1630-1730\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagsForLesson\" : [ ],"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesForRoutine\" : [ ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"dailyCalories\" : [ ],"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 34
    }
  },
  {
    "path": "src/test/data/JsonSerializableFitNusTest/typicalDailyCalorieFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"exercises\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"lessons\" : [ ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"routines\" : [ ],"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"slots\" : [ ],"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"dailyCalories\" : [ {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \"date\" : \"2020-11-08\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \"calories\" : \"1500\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  }],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 14
    }
  },
  {
    "path": "src/test/data/JsonSerializableFitNusTest/typicalExercisesFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"exercises\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"name\" : \"Bench press\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagged\" : [ \"chest\" ]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"name\" : \"Squats\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagged\" : [ \"Legs\" ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"lessons\" : [ ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"routines\" : [ ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"slots\" : [ ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"dailyCalories\" : [ ],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 17
    }
  },
  {
    "path": "src/test/data/JsonSerializableFitNusTest/typicalLessonsFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"_comment\": \"fitNUS saves file which contains the same Lesson values as in TypicalLessons#getTypicalFitNus()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"exercises\" : [ ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"lessons\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"name\" : \"GES1028\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"tagged\" : [ \"auditorium\" ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"name\" : \"GEH1030\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"tagged\" : [ \"music\", \"auditorium\" ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"name\" : \"GET1011\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"name\" : \"GER1000\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"tagged\" : [ \"auditorium\" ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"name\" : \"GEQ1000\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"name\" : \"IS1103\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"name\" : \"PC1141\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"routines\" : [ ],"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"slots\" : [ ],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"dailyCalories\" : [ ],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 33
    }
  },
  {
    "path": "src/test/data/JsonSerializableFitNusTest/typicalRoutinesFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"exercises\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"lessons\" : [ ],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"routines\" : [ {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"routineName\" : \"Leg Day\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesIncluded\" : [ ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"routineName\" : \"Upper Body\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesIncluded\" : [ ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"slots\" : [ ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"dailyCalories\" : [ ],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 17
    }
  },
  {
    "path": "src/test/data/JsonSerializableFitNusTest/typicalSlotsFitNus.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"exercises\" : [ ],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"lessons\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"name\" : \"MA1101R\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"name\" : \"MA1521\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"routines\" : [ {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"routineName\" : \"Leg Day\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesIncluded\" : [ ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"slots\" : [ {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"activityName\" : \"Leg Day\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"type\" : \"routine\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"day\" : \"wednesday\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"duration\" : \"1600-1800\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagsForLesson\" : [ ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesForRoutine\" : [ ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"activityName\" : \"MA1101R\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"type\" : \"lesson\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"day\" : \"thursday\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"duration\" : \"1600-1800\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagsForLesson\" : [ ],"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesForRoutine\" : [ ]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"activityName\" : \"MA1521\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"type\" : \"lesson\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"day\" : \"friday\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"duration\" : \"1600-1800\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"tagsForLesson\" : [ ],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"exercisesForRoutine\" : [ ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"dailyCalories\" : [ ],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  \"body\" : {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"height\" : 160.0,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    \"weight\" : 45.0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "  }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 41
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"fitNusFilePath\" : \"fitnus.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "  \"fitNusFilePath\" : \"fitnus.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/fitnus.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    //---------------- Tests for containsCharIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void containsCharIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsCharIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void containsCharIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"CharChain parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            -\u003e StringUtil.containsCharIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void containsCharIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"CharChain parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            -\u003e StringUtil.containsCharIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void containsCharIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsCharIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Valid equivalence partitions for CharChain:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   - any charChain"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   - charChain containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   - charChain with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   - one charChain"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   - multiple charChains"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   - charChain matches any part of sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   - matches multiple charChains"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     *   - query charChain does not match any part of sentence"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void containsCharIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(StringUtil.containsCharIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(StringUtil.containsCharIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than CharChain"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(StringUtil.containsCharIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // CharChain bigger than sentence word"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(StringUtil.containsCharIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 31,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LESSON_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.CS2030;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonAddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.storage.JsonFitNusStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        JsonFitNusStorage fitNusStorage \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                new JsonFitNusStorage(temporaryFolder.resolve(\"fitNUS.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        StorageManager storage \u003d new StorageManager(fitNusStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String lessonDeleteCommand \u003d \"lesson_delete 9\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandException(lessonDeleteCommand, MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String lessonListCommand \u003d LessonListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandSuccess(lessonListCommand, LessonListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // Setup LogicManager with JsonFitNusIoExceptionThrowingStub"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        JsonFitNusStorage fitNusStorage \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                new JsonFitNusIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionfitNUS.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        StorageManager storage \u003d new StorageManager(fitNusStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // Execute lesson add command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String lessonAddCommand \u003d LessonAddCommand.COMMAND_WORD + LESSON_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson expectedLesson \u003d new LessonBuilder(CS2030).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedModel.addLesson(expectedLesson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandFailure(lessonAddCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void getFilteredLessonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredLessonList().remove(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static class JsonFitNusIoExceptionThrowingStub extends JsonFitNusStorage {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        private JsonFitNusIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void saveFitNus(ReadOnlyFitNus fitNus, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 31,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonAddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Body;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Height;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Weight;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.DailyCalorie;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void constructor_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LessonAddCommand(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_lessonAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        ModelStubAcceptingLessonAdded modelLessonStub \u003d new ModelStubAcceptingLessonAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson validLesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        CommandResult commandResult \u003d new LessonAddCommand(validLesson).execute(modelLessonStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(String.format(LessonAddCommand.MESSAGE_SUCCESS, validLesson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(Arrays.asList(validLesson), modelLessonStub.lessonsAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_duplicateLesson_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson validLesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonAddCommand lessonAddCommand \u003d new LessonAddCommand(validLesson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        ModelStub modelLessonStub \u003d new ModelStubWithLesson(validLesson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(CommandException.class, LessonAddCommand.MESSAGE_DUPLICATE_LESSON, () -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                lessonAddCommand.execute(modelLessonStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void lessonEquals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson cs1000 \u003d new LessonBuilder().withName(\"CS1000\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson cs2000 \u003d new LessonBuilder().withName(\"CS2000\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonAddCommand lessonAddCS1000Command \u003d new LessonAddCommand(cs1000);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonAddCommand lessonAddCS2000Command \u003d new LessonAddCommand(cs2000);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(lessonAddCS1000Command.equals(lessonAddCS1000Command));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonAddCommand lessonAddCS1000CommandCopy \u003d new LessonAddCommand(cs1000);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(lessonAddCS1000Command.equals(lessonAddCS1000CommandCopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(lessonAddCS1000Command.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(lessonAddCS1000Command.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // different body -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(lessonAddCS1000Command.equals(lessonAddCS2000Command));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public Path getFitNusFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void setFitNusFilePath(Path fitNusFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void addRoutine(Routine routine) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public boolean hasRoutine(Routine r) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void addExerciseToRoutine(Routine r, Exercise e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void updateFilteredRoutineList(Predicate\u003cRoutine\u003e predicate) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void deleteRoutine(Routine target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public void addHeight(Height height) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public void addWeight(Weight weight) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        public double getBmi() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "patricktan6"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cRoutine\u003e getFilteredRoutineList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void setFitNus(ReadOnlyFitNus newData) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public ReadOnlyFitNus getFitNus() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public boolean hasSlot(Slot slot) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public boolean hasOverlappingSlot(Slot slot) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public void addSlotToTimetable(Slot slot) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public void deleteSlotFromTimetable(Slot slot) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public void deleteExercise(Exercise target) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void deleteLesson(Lesson target) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public Lesson retrieveLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public Routine retrieveRoutine(Routine routine) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void deleteExerciseFromRoutine(Routine routine, Exercise exercise) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void viewRoutine(Routine routineToView) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public void addCalories(Calorie calories) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public void minusCalories(Calorie calories) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorie() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorieList() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public int getCalories() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cBody\u003e getFilteredBody() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public ObservableList\u003cSlot\u003e getFilteredSlotList() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public ObservableList\u003cSlot\u003e getFilteredSlotList(String day) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void updateFilteredCalorieLog(Predicate\u003cDailyCalorie\u003e predicate) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * A Model stub that contains a single lesson."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private class ModelStubWithLesson extends ModelStub {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        private final Lesson lesson;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        ModelStubWithLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            requireNonNull(lesson);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            this.lesson \u003d lesson;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            requireNonNull(lesson);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return this.lesson.isSameLesson(lesson);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * A Model stub that always accept the lesson being added."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private class ModelStubAcceptingLessonAdded extends ModelStub {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        final ArrayList\u003cLesson\u003e lessonsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            requireNonNull(lesson);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return lessonsAdded.stream().anyMatch(lesson::isSameLesson);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            requireNonNull(lesson);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            lessonsAdded.add(lesson);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public ReadOnlyFitNus getFitNus() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new FitNus();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 86,
      "nicholasyeo": 45,
      "patricktan6": 8,
      "-": 145,
      "khor-jingqian": 50,
      "Licheng-Wu": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.getTypicalFitNus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_emptyFitNus_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_nonEmptyFitNus_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedModel.setFitNus(new FitNus());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 5,
      "-": 25,
      "khor-jingqian": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseEditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonEditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.exercise.ExerciseNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.LessonNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.EditLessonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String VALID_LESSON_NAME_CS2030 \u003d \"CS2030\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String VALID_LESSON_NAME_CS2106 \u003d \"CS2106\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String VALID_LESSON_TAG_EASY \u003d \"easy\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String VALID_LESSON_TAG_LECTURE \u003d \"lecture\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String VALID_EXERCISE_NAME_BENCH \u003d \"Bench press\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String VALID_EXERCISE_NAME_SQUATS \u003d \"Squats\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String VALID_EXERCISE_TAG_CHEST \u003d \"chest\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String VALID_EXERCISE_TAG_LEGS \u003d \"Legs\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String VALID_EXERCISE_TAG_ARMS \u003d \"Arms\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String LESSON_NAME_DESC_CS2030 \u003d \" \" + PREFIX_LESSON + VALID_LESSON_NAME_CS2030;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String LESSON_NAME_DESC_CS2106 \u003d \" \" + PREFIX_LESSON + VALID_LESSON_NAME_CS2106;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String LESSON_TAG_DESC_EASY \u003d \" \" + PREFIX_TAG + VALID_LESSON_TAG_EASY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String LESSON_TAG_DESC_LECTURE \u003d \" \" + PREFIX_TAG + VALID_LESSON_TAG_LECTURE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String EXERCISE_NAME_DESC_BENCH \u003d \" \" + PREFIX_EXERCISE + VALID_EXERCISE_NAME_BENCH;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String EXERCISE_NAME_DESC_SQUATS \u003d \" \" + PREFIX_EXERCISE + VALID_EXERCISE_NAME_SQUATS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String EXERCISE_TAG_DESC_CHEST \u003d \" \" + PREFIX_TAG + VALID_EXERCISE_TAG_CHEST;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String EXERCISE_TAG_DESC_LEGS \u003d \" \" + PREFIX_TAG + VALID_EXERCISE_TAG_LEGS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String EXERCISE_TAG_DESC_ARMS \u003d \" \" + PREFIX_TAG + VALID_EXERCISE_TAG_ARMS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String INVALID_LESSON_NAME_DESC \u003d \" \" + PREFIX_LESSON + \"CS3230\u0026\"; // \u0027\u0026\u0027 not allowed in lessons"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String INVALID_LESSON_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hard*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String INVALID_EXERCISE_NAME_DESC \u003d \" \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            + PREFIX_EXERCISE + \"Bench\u0026\"; // \u0027\u0026\u0027 not allowed in exercises"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String INVALID_EXERCISE_TAG_DESC \u003d \" \" + PREFIX_TAG + \"Legs*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final LessonEditCommand.EditLessonDescriptor DESC_CS2030;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final LessonEditCommand.EditLessonDescriptor DESC_CS2106;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final ExerciseEditCommand.EditExerciseDescriptor DESC_BENCH;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final ExerciseEditCommand.EditExerciseDescriptor DESC_SQUATS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        DESC_CS2030 \u003d new EditLessonDescriptorBuilder().withName(VALID_LESSON_NAME_CS2030)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .withTags(VALID_LESSON_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        DESC_CS2106 \u003d new EditLessonDescriptorBuilder().withName(VALID_LESSON_NAME_CS2106)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .withTags(VALID_LESSON_TAG_EASY, VALID_LESSON_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        DESC_BENCH \u003d new EditExerciseDescriptorBuilder().withName(VALID_EXERCISE_NAME_BENCH)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .withTags(VALID_EXERCISE_TAG_CHEST).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        DESC_SQUATS \u003d new EditExerciseDescriptorBuilder().withName(VALID_EXERCISE_NAME_SQUATS)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .withTags(VALID_EXERCISE_TAG_LEGS).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * - the fitNUS, filtered lesson list and selected lesson in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        FitNus expectedFitNus \u003d new FitNus(actualModel.getFitNus());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        List\u003cLesson\u003e expectedFilteredLessonList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredLessonList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(expectedFitNus, actualModel.getFitNus());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(expectedFilteredLessonList, actualModel.getFilteredLessonList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Updates {@code model}\u0027s filtered lesson list to show only the lesson at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * {@code model}\u0027s fitNUS."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static void showLessonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredLessonList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lesson \u003d model.getFilteredLessonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        final String[] splitName \u003d lesson.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model.updateFilteredLessonList(new LessonNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(1, model.getFilteredLessonList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Updates {@code model}\u0027s filtered exercise list to show only the exercise at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * {@code model}\u0027s fitNUS."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static void showExerciseAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise exercise \u003d model.getFilteredExerciseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        final String[] splitName \u003d exercise.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        model.updateFilteredExerciseList(new ExerciseNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertEquals(1, model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 37,
      "-": 75,
      "Licheng-Wu": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Body;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Height;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Weight;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.DailyCalorie;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setFitNusFilePath(Path fitNusFilePath) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Path getFitNusFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setFitNus(ReadOnlyFitNus newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ReadOnlyFitNus getFitNus() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setExercise(Exercise target, Exercise editedExercise) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLesson(Lesson target, Lesson editedLesson) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public double getBmi() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public int getCalories() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void addExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void addRoutine(Routine routine) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void addLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void addExerciseToRoutine(Routine r, Exercise e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void addSlotToTimetable(Slot slot) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void addHeight(Height height) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void addWeight(Weight weight) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addCalories(Calorie calories) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void minusCalories(Calorie calories) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean hasExercise(Exercise exercise) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public boolean hasRoutine(Routine r) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean hasLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean hasSlot(Slot slot) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public boolean hasOverlappingSlot(Slot slot) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void deleteExercise(Exercise target) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void deleteRoutine(Routine target) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteLesson(Lesson target) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void deleteExerciseFromRoutine(Routine routine, Exercise exercise) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void deleteSlotFromTimetable(Slot slot) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Routine retrieveRoutine(Routine routine) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public Lesson retrieveLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void viewRoutine(Routine routineToView) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cExercise\u003e getFilteredExerciseList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cRoutine\u003e getFilteredRoutineList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cLesson\u003e getFilteredLessonList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cSlot\u003e getFilteredSlotList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cSlot\u003e getFilteredSlotList(String day) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorie() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public ObservableList\u003cDailyCalorie\u003e getFilteredDailyCalorieList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public ObservableList\u003cBody\u003e getFilteredBody() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void updateFilteredExerciseList(Predicate\u003cExercise\u003e predicate) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void updateFilteredRoutineList(Predicate\u003cRoutine\u003e predicate) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void updateFilteredLessonList(Predicate\u003cLesson\u003e predicate) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void updateFilteredCalorieLog(Predicate\u003cDailyCalorie\u003e predicate) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 42,
      "nicholasyeo": 7,
      "khor-jingqian": 204
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/body/AddHeightCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.AddHeightCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Height;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.testutil.FitNusBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Invalid inputs such as entering negative values, zero, or impossible numbers"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * will be handled by AddHeightCommandParser. AddHeightCommand asserts that the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * value it receives is correct."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class AddHeightCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static FitNusBuilder fitNusBuilder \u003d new FitNusBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final Model typicalModel \u003d new ModelManager(fitNusBuilder.build(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_validHeight_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Pre-configured BMI is 17.58 which is the figure we will compare to."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(String.format(\"%.2f\", typicalModel.getBmi()), \"17.58\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Height newHeight \u003d new Height(170);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        typicalModel.addHeight(newHeight);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        AddHeightCommand addHeightCommand \u003d new AddHeightCommand(newHeight);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(AddHeightCommand.MESSAGE_SUCCESS, newHeight);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertEquals(expectedMessage, addHeightCommand.execute(typicalModel).getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            //After updating Height of the user, the BMI will naturally change and we will check that."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertEquals(String.format(\"%.2f\", typicalModel.getBmi()), \"15.57\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Height heightFirst \u003d new Height(170);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Height heightSecond \u003d new Height(180);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        AddHeightCommand addHeightCommandFirst \u003d new AddHeightCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                heightFirst);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        AddHeightCommand addHeightCommandSecond \u003d new AddHeightCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                heightSecond);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(addHeightCommandFirst.equals(addHeightCommandFirst));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        AddHeightCommand addHeightCommandFirstCopy \u003d new AddHeightCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                heightFirst"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(addHeightCommandFirst.equals(addHeightCommandFirstCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(addHeightCommandFirst.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(addHeightCommandFirst.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different Height -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(addHeightCommandFirst.equals(addHeightCommandSecond));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 1,
      "khor-jingqian": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/body/AddWeightCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.AddWeightCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Weight;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.testutil.FitNusBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Invalid inputs such as entering negative values, zero, or impossible numbers"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * will be handled by AddWeightCommandParser. AddWeightCommand asserts that the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * value it receives is correct."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class AddWeightCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static FitNusBuilder fitNusBuilder \u003d new FitNusBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final Model typicalModel \u003d new ModelManager(fitNusBuilder.build(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_validWeight_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Pre-configured BMI is 17.58 which is the figure we will compare to."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(String.format(\"%.2f\", typicalModel.getBmi()), \"17.58\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Weight newWeight \u003d new Weight(75);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        typicalModel.addWeight(newWeight);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        AddWeightCommand addWeightCommand \u003d new AddWeightCommand(newWeight);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(AddWeightCommand.MESSAGE_SUCCESS, newWeight);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertEquals(expectedMessage, addWeightCommand.execute(typicalModel).getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            //After updating Weight of the user, the BMI will naturally change and we will check that."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertEquals(String.format(\"%.2f\", typicalModel.getBmi()), \"29.30\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Weight weightFirst \u003d new Weight(75);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Weight weightSecond \u003d new Weight(76);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        AddWeightCommand addWeightCommandFirst \u003d new AddWeightCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                weightFirst);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        AddWeightCommand addWeightCommandSecond \u003d new AddWeightCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                weightSecond);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(addWeightCommandFirst.equals(addWeightCommandFirst));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        AddWeightCommand addWeightCommandFirstCopy \u003d new AddWeightCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                weightFirst"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(addWeightCommandFirst.equals(addWeightCommandFirstCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(addWeightCommandFirst.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(addWeightCommandFirst.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different Weight -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(addWeightCommandFirst.equals(addWeightCommandSecond));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 1,
      "khor-jingqian": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/calories/CalorieAddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.calories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CalorieAddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.ModelStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.calorie.DailyCalorie;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieAddCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_dailyCalorieAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ModelStubAcceptingDailyCalorie modelStub \u003d new ModelStubAcceptingDailyCalorie();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Calorie calorie \u003d new Calorie(1000);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        CommandResult commandResult \u003d new CalorieAddCommand(calorie).execute(modelStub);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(String.format(CalorieAddCommand.MESSAGE_SUCCESS, calorie) + modelStub.getCalories(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_invalidCalorieInput_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        CalorieAddCommand command \u003d new CalorieAddCommand(new Calorie(2147483647));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithDailyCalorie("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                new DailyCalorie(LocalDate.of(2020, 11, 3)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //To tip the integer value to be too large"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        modelStub.addCalories(new Calorie(1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                CalorieAddCommand.MESSAGE_FAILURE, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        CalorieAddCommand firstCommand \u003d new CalorieAddCommand(new Calorie(10));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        CalorieAddCommand secondCommand \u003d new CalorieAddCommand(new Calorie(20));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        CalorieAddCommand firstCommandCopy \u003d new CalorieAddCommand(new Calorie(10));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommandCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(firstCommand.equals(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different DailyCalorie -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Stub used to contain a single DailyCalorie."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private class ModelStubWithDailyCalorie extends ModelStub {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private final DailyCalorie dailyCalorie;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ModelStubWithDailyCalorie(DailyCalorie dailyCalorie) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            requireNonNull(dailyCalorie);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            this.dailyCalorie \u003d dailyCalorie;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public int getCalories() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return dailyCalorie.getCalories();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public void addCalories(Calorie calorie) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            dailyCalorie.addCalories(calorie.getCalorie());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Stub that accepts any DailyCalorie added to it."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private class ModelStubAcceptingDailyCalorie extends ModelStub {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final ArrayList\u003cDailyCalorie\u003e dailyCalories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private int calories \u003d 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ReadOnlyFitNus getFitNus() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new FitNus();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public int getCalories() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return calories;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public void addCalories(Calorie calorie) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            calories +\u003d calorie.getCalorie();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 13,
      "khor-jingqian": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/calories/CalorieMinusCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.calories;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CalorieMinusCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.ModelStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.calorie.DailyCalorie;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieMinusCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_dailyCalorieAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ModelStubAcceptingDailyCalorie modelStub \u003d new ModelStubAcceptingDailyCalorie();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Calorie calorie \u003d new Calorie(1000);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        CommandResult commandResult \u003d new CalorieMinusCommand(calorie).execute(modelStub);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(String.format(CalorieMinusCommand.MESSAGE_SUCCESS, calorie) + modelStub.getCalories(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_twoDailyCalorieWithSameDate_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        CalorieMinusCommand command \u003d new CalorieMinusCommand(new Calorie(1000));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithDailyCalorie("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                new DailyCalorie(LocalDate.now()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        modelStub.addCalories(new Calorie(1001));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Assertion Error is thrown because there are 2 conflicting DailyCalorie entries with the same LocalDate."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Under normal circumstances, this will never occur."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_invalidCalorieInput_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        CalorieMinusCommand command \u003d new CalorieMinusCommand(new Calorie(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithDailyCalorie("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                new DailyCalorie(LocalDate.of(2020, 11, 3)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                CalorieMinusCommand.MESSAGE_FAILURE, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        CalorieMinusCommand firstCommand \u003d new CalorieMinusCommand(new Calorie(10));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        CalorieMinusCommand secondCommand \u003d new CalorieMinusCommand(new Calorie(20));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        CalorieMinusCommand firstCommandCopy \u003d new CalorieMinusCommand(new Calorie(10));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(firstCommand.equals(firstCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(firstCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(firstCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different DailyCalorie -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(firstCommand.equals(secondCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Stub used to contain a single DailyCalorie."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private class ModelStubWithDailyCalorie extends ModelStub {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private final DailyCalorie dailyCalorie;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ModelStubWithDailyCalorie(DailyCalorie dailyCalorie) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            requireNonNull(dailyCalorie);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            this.dailyCalorie \u003d dailyCalorie;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public int getCalories() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return dailyCalorie.getCalories();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public void addCalories(Calorie calorie) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            dailyCalorie.addCalories(calorie.getCalorie());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Stub that accepts any DailyCalorie added to it."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private class ModelStubAcceptingDailyCalorie extends ModelStub {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final ArrayList\u003cDailyCalorie\u003e dailyCalories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private int calories \u003d 1001;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ReadOnlyFitNus getFitNus() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return new FitNus();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public int getCalories() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return calories;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public void minusCalories(Calorie calorie) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            calories -\u003d calorie.getCalorie();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 14,
      "khor-jingqian": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/exercise/EditExerciseDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BENCH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SQUATS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXERCISE_NAME_SQUATS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXERCISE_TAG_ARMS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseEditCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class EditExerciseDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        EditExerciseDescriptor descriptorWithSameValues \u003d new EditExerciseDescriptor(DESC_BENCH);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(DESC_BENCH.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(DESC_BENCH.equals(DESC_BENCH));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(DESC_BENCH.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(DESC_BENCH.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(DESC_BENCH.equals(DESC_SQUATS));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different exercise -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        EditExerciseDescriptor editedBench \u003d new EditExerciseDescriptorBuilder(DESC_BENCH)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .withName(VALID_EXERCISE_NAME_SQUATS).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(DESC_BENCH.equals(editedBench));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        editedBench \u003d new EditExerciseDescriptorBuilder(DESC_BENCH).withTags(VALID_EXERCISE_TAG_ARMS).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(DESC_BENCH.equals(editedBench));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/exercise/ExerciseAddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalFitNus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ExerciseAddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        model \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void execute_newExercise_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise validExercise \u003d new ExerciseBuilder().withName(\"Bench\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        expectedModel.addExercise(validExercise);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertCommandSuccess(new ExerciseAddCommand(validExercise), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                String.format(ExerciseAddCommand.MESSAGE_SUCCESS, validExercise), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void execute_duplicateExercise_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise exerciseInList \u003d model.getFitNus().getExerciseList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertCommandFailure(new ExerciseAddCommand(exerciseInList), model,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                ExerciseAddCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/exercise/ExerciseDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExerciseAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalFitNus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * {@code ExerciseDeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseDeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void execute_validIndexUnfilteredExerciseList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise exerciseToDelete \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseDeleteCommand exerciseDeleteCommand \u003d new ExerciseDeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        String expectedMessage \u003d String.format(ExerciseDeleteCommand.MESSAGE_DELETE_EXERCISE_SUCCESS, exerciseToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        expectedModel.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertCommandSuccess(exerciseDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void execute_invalidIndexUnfilteredExerciseList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExerciseList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseDeleteCommand exerciseDeleteCommand \u003d new ExerciseDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertCommandFailure(exerciseDeleteCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void execute_validIndexFilteredExerciseList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise exerciseToDelete \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseDeleteCommand exerciseDeleteCommand \u003d new ExerciseDeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        String expectedMessage \u003d String.format(ExerciseDeleteCommand.MESSAGE_DELETE_EXERCISE_SUCCESS, exerciseToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        expectedModel.deleteExercise(exerciseToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        showNoExercise(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertCommandSuccess(exerciseDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void execute_invalidIndexFilteredExerciseList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of fitNUS list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFitNus().getExerciseList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseDeleteCommand exerciseDeleteCommand \u003d new ExerciseDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertCommandFailure(exerciseDeleteCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseDeleteCommand exerciseDeleteFirstCommand \u003d new ExerciseDeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseDeleteCommand exerciseDeleteSecondCommand \u003d new ExerciseDeleteCommand(INDEX_SECOND_EXERCISE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(exerciseDeleteFirstCommand.equals(exerciseDeleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseDeleteCommand exerciseDeleteFirstCommandCopy \u003d new ExerciseDeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(exerciseDeleteFirstCommand.equals(exerciseDeleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(exerciseDeleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(exerciseDeleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different exercise -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(exerciseDeleteFirstCommand.equals(exerciseDeleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Updates {@code model}\u0027s filtered exercise list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private void showNoExercise(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        model.updateFilteredExerciseList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(model.getFilteredExerciseList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/exercise/ExerciseEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BENCH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SQUATS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXERCISE_NAME_BENCH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXERCISE_NAME_SQUATS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXERCISE_TAG_ARMS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExerciseAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalFitNus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseEditCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * and unit tests for ExerciseEditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseEditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredExerciseList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise editedExercise \u003d new ExerciseBuilder().withName(\"Sprints\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder(editedExercise).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseEditCommand exerciseEditCommand \u003d new ExerciseEditCommand(INDEX_FIRST_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        String expectedMessage \u003d String.format(ExerciseEditCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FitNus(model.getFitNus()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        expectedModel.setExercise(model.getFilteredExerciseList().get(0), editedExercise);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertCommandSuccess(exerciseEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredExerciseList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Index indexLastExercise \u003d Index.fromOneBased(model.getFilteredExerciseList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise lastExercise \u003d model.getFilteredExerciseList().get(indexLastExercise.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseBuilder exerciseInList \u003d new ExerciseBuilder(lastExercise);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise editedExercise \u003d exerciseInList.withName(VALID_EXERCISE_NAME_SQUATS)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .withTags(VALID_EXERCISE_TAG_ARMS).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder().withName(VALID_EXERCISE_NAME_SQUATS)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .withTags(VALID_EXERCISE_TAG_ARMS).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseEditCommand exerciseEditCommand \u003d new ExerciseEditCommand(indexLastExercise, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        String expectedMessage \u003d String.format(ExerciseEditCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FitNus(model.getFitNus()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        expectedModel.setExercise(lastExercise, editedExercise);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertCommandSuccess(exerciseEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredExerciseList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseEditCommand exerciseEditCommand \u003d new ExerciseEditCommand(INDEX_FIRST_EXERCISE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                new EditExerciseDescriptor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise editedExercise \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        String expectedMessage \u003d String.format(ExerciseEditCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FitNus(model.getFitNus()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertCommandSuccess(exerciseEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void execute_filteredExerciseList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise exerciseInFilteredList \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise editedExercise \u003d new ExerciseBuilder(exerciseInFilteredList)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .withName(VALID_EXERCISE_NAME_BENCH).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseEditCommand exerciseEditCommand \u003d new ExerciseEditCommand(INDEX_FIRST_EXERCISE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_EXERCISE_NAME_BENCH).build());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        String expectedMessage \u003d String.format(ExerciseEditCommand.MESSAGE_EDIT_EXERCISE_SUCCESS, editedExercise);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FitNus(model.getFitNus()), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        expectedModel.setExercise(model.getFilteredExerciseList().get(0), editedExercise);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertCommandSuccess(exerciseEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void execute_duplicateExerciseUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise firstExercise \u003d model.getFilteredExerciseList().get(INDEX_FIRST_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder(firstExercise).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseEditCommand exerciseEditCommand \u003d new ExerciseEditCommand(INDEX_SECOND_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertCommandFailure(exerciseEditCommand, model, ExerciseEditCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void execute_duplicateExerciseFilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // edit exercise in filtered list into a duplicate in fitNUS"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise exerciseInList \u003d model.getFitNus().getExerciseList().get(INDEX_SECOND_EXERCISE.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseEditCommand exerciseEditCommand \u003d new ExerciseEditCommand(INDEX_FIRST_EXERCISE,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                new EditExerciseDescriptorBuilder(exerciseInList).build());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertCommandFailure(exerciseEditCommand, model, ExerciseEditCommand.MESSAGE_DUPLICATE_EXERCISE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void execute_invalidExerciseIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExerciseList().size() + 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .withName(VALID_EXERCISE_NAME_BENCH).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseEditCommand exerciseEditCommand \u003d new ExerciseEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertCommandFailure(exerciseEditCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Edit filtered exercise list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * but smaller than size of fitNUS"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void execute_invalidExerciseIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of fitNUS list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFitNus().getExerciseList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseEditCommand exerciseEditCommand \u003d new ExerciseEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                new EditExerciseDescriptorBuilder().withName(VALID_EXERCISE_NAME_BENCH).build());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertCommandFailure(exerciseEditCommand, model, Messages.MESSAGE_INVALID_EXERCISE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        final ExerciseEditCommand standardCommand \u003d new ExerciseEditCommand(INDEX_FIRST_EXERCISE, DESC_BENCH);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        EditExerciseDescriptor copyDescriptor \u003d new EditExerciseDescriptor(DESC_BENCH);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseEditCommand commandWithSameValues \u003d new ExerciseEditCommand(INDEX_FIRST_EXERCISE, copyDescriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(standardCommand.equals(new ExerciseEditCommand(INDEX_SECOND_EXERCISE, DESC_SQUATS)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(standardCommand.equals(new ExerciseEditCommand(INDEX_FIRST_EXERCISE, DESC_SQUATS)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 177
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/exercise/ExerciseFindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalFitNus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.exercise.ExerciseNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ExerciseFindCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseFindCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                new ExerciseNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                new ExerciseNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseFindCommand exerciseFindFirstCommand \u003d new ExerciseFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseFindCommand exerciseFindSecondCommand \u003d new ExerciseFindCommand(secondPredicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(exerciseFindFirstCommand.equals(exerciseFindFirstCommand));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseFindCommand exerciseFindFirstCommandCopy \u003d new ExerciseFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(exerciseFindFirstCommand.equals(exerciseFindFirstCommandCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(exerciseFindFirstCommand.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(exerciseFindFirstCommand.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different exercise -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(exerciseFindFirstCommand.equals(exerciseFindSecondCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Parses {@code userInput} into a {@code ExerciseNameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private ExerciseNameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new ExerciseNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/exercise/ExerciseListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.commands.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExerciseAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalFitNus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ExerciseListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        model \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void execute_exerciseListIsNotFiltered_showsSameExerciseList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertCommandSuccess(new ExerciseListCommand(), model, ExerciseListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void execute_exerciseListIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        showExerciseAtIndex(model, INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertCommandSuccess(new ExerciseListCommand(), model, ExerciseListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/lessons/EditLessonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.commands.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2030;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2106;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_NAME_CS2106;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_TAG_EASY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonEditCommand.EditLessonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.EditLessonDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class EditLessonDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        EditLessonDescriptor descriptorWithSameValues \u003d new EditLessonDescriptor(DESC_CS2030);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(DESC_CS2030.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(DESC_CS2030.equals(DESC_CS2030));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(DESC_CS2030.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(DESC_CS2030.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(DESC_CS2030.equals(DESC_CS2106));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different lesson -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        EditLessonDescriptor editedCS2030 \u003d new EditLessonDescriptorBuilder(DESC_CS2030)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .withName(VALID_LESSON_NAME_CS2106).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(DESC_CS2030.equals(editedCS2030));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        editedCS2030 \u003d new EditLessonDescriptorBuilder(DESC_CS2030).withTags(VALID_LESSON_TAG_EASY).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(DESC_CS2030.equals(editedCS2030));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/lessons/LessonAddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.commands.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.getTypicalFitNus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code LessonAddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonAddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_newLesson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson validLesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedModel.addLesson(validLesson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandSuccess(new LessonAddCommand(validLesson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                String.format(LessonAddCommand.MESSAGE_SUCCESS, validLesson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_duplicateLesson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lessonInList \u003d model.getFitNus().getLessonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandFailure(new LessonAddCommand(lessonInList), model, LessonAddCommand.MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/lessons/LessonDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.commands.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showLessonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LESSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_LESSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.getTypicalFitNus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * {@code LessonDeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonDeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_validIndexUnfilteredLessonList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lessonToDelete \u003d model.getFilteredLessonList().get(INDEX_FIRST_LESSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonDeleteCommand lessonDeleteCommand \u003d new LessonDeleteCommand(INDEX_FIRST_LESSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String expectedMessage \u003d String.format(LessonDeleteCommand.MESSAGE_DELETE_LESSON_SUCCESS, lessonToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedModel.deleteLesson(lessonToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandSuccess(lessonDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_invalidIndexUnfilteredLessonList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredLessonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonDeleteCommand lessonDeleteCommand \u003d new LessonDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandFailure(lessonDeleteCommand, model, Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_validIndexFilteredLessonList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        showLessonAtIndex(model, INDEX_FIRST_LESSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lessonToDelete \u003d model.getFilteredLessonList().get(INDEX_FIRST_LESSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonDeleteCommand lessonDeleteCommand \u003d new LessonDeleteCommand(INDEX_FIRST_LESSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String expectedMessage \u003d String.format(LessonDeleteCommand.MESSAGE_DELETE_LESSON_SUCCESS, lessonToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedModel.deleteLesson(lessonToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        showNoLesson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandSuccess(lessonDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_invalidIndexFilteredLessonList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        showLessonAtIndex(model, INDEX_FIRST_LESSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_LESSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of fitNUS list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFitNus().getLessonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonDeleteCommand lessonDeleteCommand \u003d new LessonDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandFailure(lessonDeleteCommand, model, Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonDeleteCommand lessonDeleteFirstCommand \u003d new LessonDeleteCommand(INDEX_FIRST_LESSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonDeleteCommand lessonDeleteSecondCommand \u003d new LessonDeleteCommand(INDEX_SECOND_LESSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(lessonDeleteFirstCommand.equals(lessonDeleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonDeleteCommand lessonDeleteFirstCommandCopy \u003d new LessonDeleteCommand(INDEX_FIRST_LESSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(lessonDeleteFirstCommand.equals(lessonDeleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(lessonDeleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(lessonDeleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different lesson -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(lessonDeleteFirstCommand.equals(lessonDeleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Updates {@code model}\u0027s filtered lesson list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private void showNoLesson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model.updateFilteredLessonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(model.getFilteredLessonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/lessons/LessonEditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.commands.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2030;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_CS2106;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_NAME_CS2106;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_TAG_EASY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showLessonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LESSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_LESSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.getTypicalFitNus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonEditCommand.EditLessonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.EditLessonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * and unit tests for LessonEditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonEditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredLessonList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson editedLesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        EditLessonDescriptor descriptor \u003d new EditLessonDescriptorBuilder(editedLesson).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand lessonEditCommand \u003d new LessonEditCommand(INDEX_FIRST_LESSON, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String expectedMessage \u003d String.format(LessonEditCommand.MESSAGE_EDIT_LESSON_SUCCESS, editedLesson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FitNus(model.getFitNus()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedModel.setLesson(model.getFilteredLessonList().get(0), editedLesson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandSuccess(lessonEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredLessonList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Index indexLastLesson \u003d Index.fromOneBased(model.getFilteredLessonList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lastLesson \u003d model.getFilteredLessonList().get(indexLastLesson.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonBuilder lessonInList \u003d new LessonBuilder(lastLesson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson editedLesson \u003d lessonInList.withName(VALID_LESSON_NAME_CS2106).withTags(VALID_LESSON_TAG_EASY).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        EditLessonDescriptor descriptor \u003d new EditLessonDescriptorBuilder().withName(VALID_LESSON_NAME_CS2106)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .withTags(VALID_LESSON_TAG_EASY).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand lessonEditCommand \u003d new LessonEditCommand(indexLastLesson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String expectedMessage \u003d String.format(LessonEditCommand.MESSAGE_EDIT_LESSON_SUCCESS, editedLesson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FitNus(model.getFitNus()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedModel.setLesson(lastLesson, editedLesson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandSuccess(lessonEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredLessonList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand lessonEditCommand \u003d new LessonEditCommand(INDEX_FIRST_LESSON, new EditLessonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson editedLesson \u003d model.getFilteredLessonList().get(INDEX_FIRST_LESSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String expectedMessage \u003d String.format(LessonEditCommand.MESSAGE_EDIT_LESSON_SUCCESS, editedLesson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FitNus(model.getFitNus()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandSuccess(lessonEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_filteredLessonList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        showLessonAtIndex(model, INDEX_FIRST_LESSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lessonInFilteredList \u003d model.getFilteredLessonList().get(INDEX_FIRST_LESSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson editedLesson \u003d new LessonBuilder(lessonInFilteredList).withName(VALID_LESSON_NAME_CS2106).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand lessonEditCommand \u003d new LessonEditCommand(INDEX_FIRST_LESSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                new EditLessonDescriptorBuilder().withName(VALID_LESSON_NAME_CS2106).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String expectedMessage \u003d String.format(LessonEditCommand.MESSAGE_EDIT_LESSON_SUCCESS, editedLesson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new FitNus(model.getFitNus()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedModel.setLesson(model.getFilteredLessonList().get(0), editedLesson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandSuccess(lessonEditCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_duplicateLessonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson firstLesson \u003d model.getFilteredLessonList().get(INDEX_FIRST_LESSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        EditLessonDescriptor descriptor \u003d new EditLessonDescriptorBuilder(firstLesson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand lessonEditCommand \u003d new LessonEditCommand(INDEX_SECOND_LESSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandFailure(lessonEditCommand, model, LessonEditCommand.MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_duplicateLessonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        showLessonAtIndex(model, INDEX_FIRST_LESSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // edit lesson in filtered list into a duplicate in fitNUS"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lessonInList \u003d model.getFitNus().getLessonList().get(INDEX_SECOND_LESSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand lessonEditCommand \u003d new LessonEditCommand(INDEX_FIRST_LESSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                new EditLessonDescriptorBuilder(lessonInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandFailure(lessonEditCommand, model, LessonEditCommand.MESSAGE_DUPLICATE_LESSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_invalidLessonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredLessonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        EditLessonDescriptor descriptor \u003d new EditLessonDescriptorBuilder().withName(VALID_LESSON_NAME_CS2106).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand lessonEditCommand \u003d new LessonEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandFailure(lessonEditCommand, model, Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Edit filtered lesson list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * but smaller than size of fitNUS"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_invalidLessonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        showLessonAtIndex(model, INDEX_FIRST_LESSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_LESSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of fitNUS list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFitNus().getLessonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand lessonEditCommand \u003d new LessonEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                new EditLessonDescriptorBuilder().withName(VALID_LESSON_NAME_CS2106).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandFailure(lessonEditCommand, model, Messages.MESSAGE_INVALID_LESSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        final LessonEditCommand standardCommand \u003d new LessonEditCommand(INDEX_FIRST_LESSON, DESC_CS2030);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        EditLessonDescriptor copyDescriptor \u003d new EditLessonDescriptor(DESC_CS2030);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand commandWithSameValues \u003d new LessonEditCommand(INDEX_FIRST_LESSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(standardCommand.equals(new LessonEditCommand(INDEX_SECOND_LESSON, DESC_CS2030)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(standardCommand.equals(new LessonEditCommand(INDEX_FIRST_LESSON, DESC_CS2106)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 173
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/lessons/LessonFindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.commands.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_LESSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.GEQ1000;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.GET1011;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.IS1103;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.getTypicalFitNus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.LessonNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code LessonFindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonFindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                new LessonNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                new LessonNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonFindCommand lessonFindFirstCommand \u003d new LessonFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonFindCommand lessonFindSecondCommand \u003d new LessonFindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(lessonFindFirstCommand.equals(lessonFindFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonFindCommand lessonFindFirstCommandCopy \u003d new LessonFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(lessonFindFirstCommand.equals(lessonFindFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(lessonFindFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(lessonFindFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different lesson -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(lessonFindFirstCommand.equals(lessonFindSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_zeroKeywords_noLessonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_LESSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonFindCommand command \u003d new LessonFindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedModel.updateFilteredLessonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredLessonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_multipleKeywords_multipleLessonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_LESSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"1011 geq 1103\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonFindCommand command \u003d new LessonFindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedModel.updateFilteredLessonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(Arrays.asList(GET1011, GEQ1000, IS1103), model.getFilteredLessonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses {@code userInput} into a {@code LessonNameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private LessonNameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new LessonNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/lessons/LessonListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.commands.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showLessonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LESSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.getTypicalFitNus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for LessonListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        model \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_lessonListIsNotFiltered_showsSameLessonList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandSuccess(new LessonListCommand(), model, LessonListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void execute_lessonListIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        showLessonAtIndex(model, INDEX_FIRST_LESSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertCommandSuccess(new LessonListCommand(), model, LessonListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/routines/RoutineAddExerciseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.SQUATS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalFitNus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.UPPER_BODY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.getPopulatedFitNus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * {@code RoutineAddExerciseCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineAddExerciseCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Exercise added to Routine: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String MESSAGE_MISSING_ROUTINE \u003d \"This routine does not exist in fitNUS\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String MESSAGE_MISSING_EXERCISE_FITNUS \u003d \"This exercise does not exist in fitNUS\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final Model typicalModel \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final Model populatedModel \u003d new ModelManager(getPopulatedFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_validExercise_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine chestDay \u003d new Routine(new Name(\"Chest Day\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        typicalModel.addRoutine(chestDay);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineAddExerciseCommand routineAddExerciseCommand \u003d new RoutineAddExerciseCommand("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                chestDay, BENCH_PRESS"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, chestDay);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedMessage +\u003d \"\\n\" + BENCH_PRESS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertFalse(chestDay.hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertEquals(expectedMessage, routineAddExerciseCommand.execute(typicalModel).getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertTrue(chestDay.hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_invalidRoutine_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineAddExerciseCommand routineAddExerciseCommand \u003d new RoutineAddExerciseCommand(UPPER_BODY,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                SQUATS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandFailure(routineAddExerciseCommand, typicalModel, MESSAGE_MISSING_ROUTINE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_invalidExerciseInFitNus_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine upperBody \u003d populatedModel.getFilteredRoutineList().get(1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineAddExerciseCommand routineAddExerciseCommand \u003d new RoutineAddExerciseCommand(upperBody,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                SQUATS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandFailure(routineAddExerciseCommand, populatedModel, MESSAGE_MISSING_EXERCISE_FITNUS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine legDay \u003d populatedModel.getFilteredRoutineList().get(1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine upperBody \u003d populatedModel.getFilteredRoutineList().get(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineAddExerciseCommand routineAddExerciseFirstCommand \u003d new RoutineAddExerciseCommand("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                legDay, SQUATS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineAddExerciseCommand routineAddExerciseSecondCommand \u003d new RoutineAddExerciseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                upperBody, BENCH_PRESS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(routineAddExerciseFirstCommand.equals(routineAddExerciseFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineAddExerciseCommand routineAddExerciseFirstCommandCopy \u003d new RoutineAddExerciseCommand("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                legDay, SQUATS"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(routineAddExerciseFirstCommand.equals(routineAddExerciseFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(routineAddExerciseFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(routineAddExerciseFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different Routine -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(routineAddExerciseFirstCommand.equals(routineAddExerciseSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "nicholasyeo": 1,
      "khor-jingqian": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/routines/RoutineCreateCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.LEG_DAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.UPPER_BODY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.ModelStub;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineCreateCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void constructor_nullRoutine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RoutineCreateCommand(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_routineAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ModelStubAcceptingRoutines modelStub \u003d new ModelStubAcceptingRoutines();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CommandResult commandResult \u003d new RoutineCreateCommand(LEG_DAY).execute(modelStub);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(String.format(RoutineCreateCommand.MESSAGE_SUCCESS, LEG_DAY), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(Collections.singletonList(LEG_DAY), modelStub.routinesAdded);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_duplicateRoutine_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineCreateCommand command \u003d new RoutineCreateCommand(LEG_DAY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithRoutine(LEG_DAY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                RoutineCreateCommand.MESSAGE_DUPLICATE_ROUTINE, () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineCreateCommand addLegDayCommand \u003d new RoutineCreateCommand(LEG_DAY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineCreateCommand addUpperBodyCommand \u003d new RoutineCreateCommand(UPPER_BODY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(addLegDayCommand.equals(addLegDayCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineCreateCommand addLegDayCommandCopy \u003d new RoutineCreateCommand(LEG_DAY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(addLegDayCommand.equals(addLegDayCommandCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(addLegDayCommand.equals(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(addLegDayCommand.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different routines -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(addLegDayCommand.equals(addUpperBodyCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Stub used to contain a single Routine."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private class ModelStubWithRoutine extends ModelStub {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private final Routine routine;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ModelStubWithRoutine(Routine routine) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            requireNonNull(routine);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            this.routine \u003d routine;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public boolean hasRoutine(Routine routine) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            requireNonNull(routine);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return this.routine.isSameActivity(routine);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Stub that accepts any Routine added to it."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private class ModelStubAcceptingRoutines extends ModelStub {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final ArrayList\u003cRoutine\u003e routinesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public boolean hasRoutine(Routine routine) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            requireNonNull(routine);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return routinesAdded.stream().anyMatch(routine::isSameActivity);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public void addRoutine(Routine routine) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            requireNonNull(routine);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            routinesAdded.add(routine);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public ReadOnlyFitNus getFitNus() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return new FitNus();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 5,
      "khor-jingqian": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/routines/RoutineDeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.getTypicalFitNus;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.RoutineNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * {@code RoutineDeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineDeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final Index INDEX_FIRST_ROUTINE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final Index INDEX_SECOND_ROUTINE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_validIndexUnfilteredRoutineList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routineToDelete \u003d model.getFilteredRoutineList().get(INDEX_FIRST_ROUTINE.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineDeleteCommand routineDeleteCommand \u003d new RoutineDeleteCommand(INDEX_FIRST_ROUTINE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(RoutineDeleteCommand.MESSAGE_DELETE_ROUTINE_SUCCESS, routineToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedModel.deleteRoutine(routineToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandSuccess(routineDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_invalidIndexUnfilteredRoutineList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRoutineList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineDeleteCommand routineDeleteCommand \u003d new RoutineDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandFailure(routineDeleteCommand, model, Messages.MESSAGE_INVALID_ROUTINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_validIndexFilteredRoutineList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        showRoutineAtIndex(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Delete this only Routine from model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routineToDelete \u003d model.getFilteredRoutineList().get(INDEX_FIRST_ROUTINE.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineDeleteCommand routineDeleteCommand \u003d new RoutineDeleteCommand(INDEX_FIRST_ROUTINE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(RoutineDeleteCommand.MESSAGE_DELETE_ROUTINE_SUCCESS, routineToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedModel.deleteRoutine(routineToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        showNoRoutine(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandSuccess(routineDeleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_invalidIndexFilteredRoutineList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        showRoutineAtIndex(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ROUTINE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of fitNUS list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFitNus().getRoutineList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineDeleteCommand routineDeleteCommand \u003d new RoutineDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandFailure(routineDeleteCommand, model, Messages.MESSAGE_INVALID_ROUTINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineDeleteCommand routineDeleteFirstCommand \u003d new RoutineDeleteCommand(INDEX_FIRST_ROUTINE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineDeleteCommand routineDeleteSecondCommand \u003d new RoutineDeleteCommand(INDEX_SECOND_ROUTINE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(routineDeleteFirstCommand.equals(routineDeleteFirstCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineDeleteCommand routineDeleteFirstCommandCopy \u003d new RoutineDeleteCommand(INDEX_FIRST_ROUTINE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(routineDeleteFirstCommand.equals(routineDeleteFirstCommandCopy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(routineDeleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(routineDeleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different Routine -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(routineDeleteFirstCommand.equals(routineDeleteSecondCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private void showRoutineAtIndex(Model model) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //First Routine in Model"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routine \u003d model.getFilteredRoutineList().get(INDEX_FIRST_ROUTINE.getOneBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Update filter to show only this Routine"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final String[] splitName \u003d routine.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.updateFilteredRoutineList(new RoutineNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Updates {@code model}\u0027s filtered Routine list to show no one."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private void showNoRoutine(Model model) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.updateFilteredRoutineList(p -\u003e false);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(model.getFilteredRoutineList().isEmpty());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "khor-jingqian": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/routines/RoutineDeleteExerciseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.SQUATS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalFitNus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.LEG_DAY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.getPopulatedFitNus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * {@code RoutineDeleteExerciseCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineDeleteExerciseCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String MESSAGE_MISSING_ROUTINE \u003d \"This routine does not exist in fitNUS!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String MESSAGE_MISSING_EXERCISE \u003d \"This exercise does not exist within this routine!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String MESSAGE_DELETE_EXERCISE_SUCCESS \u003d \"Deleted Exercise from Routine: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Model typicalModel \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Model populatedModel \u003d new ModelManager(getPopulatedFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_validExercise_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        populatedModel.addExercise(SQUATS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine legDay \u003d new Routine(new Name(\"Leg Day\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        populatedModel.deleteRoutine(LEG_DAY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        populatedModel.addRoutine(legDay);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        legDay.addExercise(SQUATS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineDeleteExerciseCommand routineDeleteExerciseCommand \u003d new RoutineDeleteExerciseCommand("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                LEG_DAY, SQUATS"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                String.format(MESSAGE_DELETE_EXERCISE_SUCCESS, LEG_DAY), SQUATS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertEquals(expectedMessage, routineDeleteExerciseCommand.execute(populatedModel).getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertFalse(legDay.hasExercise(SQUATS));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_invalidRoutine_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine upperBody \u003d populatedModel.getFilteredRoutineList().get(1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineDeleteExerciseCommand routineDeleteExerciseCommand \u003d new RoutineDeleteExerciseCommand(upperBody,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                SQUATS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandFailure(routineDeleteExerciseCommand, typicalModel, MESSAGE_MISSING_ROUTINE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_invalidExerciseInFitNus_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine upperBody \u003d populatedModel.getFilteredRoutineList().get(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineDeleteExerciseCommand routineDeleteExerciseCommand \u003d new RoutineDeleteExerciseCommand(upperBody,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                SQUATS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandFailure(routineDeleteExerciseCommand, populatedModel, MESSAGE_MISSING_EXERCISE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_invalidExerciseInRoutine_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine upperBody \u003d populatedModel.getFilteredRoutineList().get(1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        populatedModel.addExercise(SQUATS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineDeleteExerciseCommand routineDeleteExerciseCommand \u003d new RoutineDeleteExerciseCommand(upperBody,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                SQUATS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandFailure(routineDeleteExerciseCommand, populatedModel, MESSAGE_MISSING_EXERCISE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine legDay \u003d populatedModel.getFilteredRoutineList().get(1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine upperBody \u003d populatedModel.getFilteredRoutineList().get(1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineDeleteExerciseCommand routineDeleteExerciseFirstCommand \u003d new RoutineDeleteExerciseCommand("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                legDay, SQUATS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineDeleteExerciseCommand routineDeleteExerciseSecondCommand \u003d new RoutineDeleteExerciseCommand("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                upperBody, BENCH_PRESS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(routineDeleteExerciseFirstCommand.equals(routineDeleteExerciseFirstCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineDeleteExerciseCommand routineDeleteExerciseFirstCommandCopy \u003d new RoutineDeleteExerciseCommand("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                legDay, SQUATS"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        );"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(routineDeleteExerciseFirstCommand.equals(routineDeleteExerciseFirstCommandCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(routineDeleteExerciseFirstCommand.equals(1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(routineDeleteExerciseFirstCommand.equals(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different Routine -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(routineDeleteExerciseFirstCommand.equals(routineDeleteExerciseSecondCommand));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 3,
      "nicholasyeo": 1,
      "khor-jingqian": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/routines/RoutineFindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ROUTINES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.RoutineNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.testutil.TypicalRoutines;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineFindCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Model model \u003d new ModelManager(TypicalRoutines.getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(TypicalRoutines.getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Routine testRoutine \u003d new Routine(new Name(\"Jump Fly Swim\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Routine testRoutine1 \u003d new Routine(new Name(\"Fly Swim Jump\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Routine testRoutine2 \u003d new Routine(new Name(\"Swim Jump Fly\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Parses {@code userInput} into a {@code RoutineNameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private RoutineNameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        return new RoutineNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_singleKeywords_multipleRoutinesFound() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ROUTINES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Fly\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineFindCommand command \u003d new RoutineFindCommand(predicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.addRoutine(testRoutine);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.addRoutine(testRoutine1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.addRoutine(testRoutine2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.updateFilteredRoutineList(predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(Arrays.asList(testRoutine, testRoutine1, testRoutine2), model.getFilteredRoutineList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_multipleKeywords_multipleRoutinesFound() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ROUTINES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Fly Jump Swim\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineFindCommand command \u003d new RoutineFindCommand(predicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.addRoutine(testRoutine);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.addRoutine(testRoutine1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.addRoutine(testRoutine2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.updateFilteredRoutineList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(Arrays.asList(testRoutine, testRoutine1, testRoutine2), model.getFilteredRoutineList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                new RoutineNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                new RoutineNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineFindCommand routineFindFirstCommand \u003d new RoutineFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineFindCommand routineFindSecondCommand \u003d new RoutineFindCommand(secondPredicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(routineFindFirstCommand.equals(routineFindFirstCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineFindCommand routineFindFirstCommandCopy \u003d new RoutineFindCommand(firstPredicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(routineFindFirstCommand.equals(routineFindFirstCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(routineFindFirstCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(routineFindFirstCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different Routine -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(routineFindFirstCommand.equals(routineFindSecondCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "nicholasyeo": 1,
      "khor-jingqian": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/routines/RoutineListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.getTypicalFitNus;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.RoutineNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for RoutineListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Index index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private void showRoutineAtIndex(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //First Routine in Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routine \u003d model.getFilteredRoutineList().get(index.getOneBased());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Update filter to show only this Routine"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final String[] splitName \u003d routine.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.updateFilteredRoutineList(new RoutineNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_routineListIsNotFiltered_showsSameRoutineList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandSuccess(new RoutineListCommand(), model, RoutineListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_routineListIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        showRoutineAtIndex(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandSuccess(new RoutineListCommand(), model, RoutineListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "khor-jingqian": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/routines/RoutineViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.commands.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.getTypicalFitNus;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.RoutineNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * {@code RoutineViewCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineViewCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final Index INDEX_FIRST_ROUTINE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final Index INDEX_SECOND_ROUTINE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_validIndexUnfilteredRoutineList_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routineToView \u003d model.getFilteredRoutineList().get(INDEX_FIRST_ROUTINE.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineViewCommand routineViewCommand \u003d new RoutineViewCommand(INDEX_FIRST_ROUTINE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(RoutineViewCommand.MESSAGE_SUCCESS, routineToView);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedModel.viewRoutine(routineToView);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandSuccess(routineViewCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_invalidIndexUnfilteredRoutineList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRoutineList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineViewCommand routineViewCommand \u003d new RoutineViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandFailure(routineViewCommand, model, RoutineViewCommand.MESSAGE_OUT_OF_BOUNDS_ROUTINE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_validIndexFilteredRoutineList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        showRoutineAtIndex(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //View this only Routine from model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routineToView \u003d model.getFilteredRoutineList().get(INDEX_FIRST_ROUTINE.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineViewCommand routineViewCommand \u003d new RoutineViewCommand(INDEX_FIRST_ROUTINE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(RoutineViewCommand.MESSAGE_SUCCESS, routineToView);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedModel.viewRoutine(routineToView);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        showNoRoutine(expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandSuccess(routineViewCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void execute_invalidIndexFilteredRoutineList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        showRoutineAtIndex(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ROUTINE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of fitNUS list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getFitNus().getRoutineList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineViewCommand routineViewCommand \u003d new RoutineViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertCommandFailure(routineViewCommand, model, RoutineViewCommand.MESSAGE_OUT_OF_BOUNDS_ROUTINE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineViewCommand routineViewFirstCommand \u003d new RoutineViewCommand(INDEX_FIRST_ROUTINE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineViewCommand routineViewSecondCommand \u003d new RoutineViewCommand(INDEX_SECOND_ROUTINE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(routineViewFirstCommand.equals(routineViewFirstCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineViewCommand routineViewFirstCommandCopy \u003d new RoutineViewCommand(INDEX_FIRST_ROUTINE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(routineViewFirstCommand.equals(routineViewFirstCommandCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(routineViewFirstCommand.equals(1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(routineViewFirstCommand.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different Routine -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(routineViewFirstCommand.equals(routineViewSecondCommand));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private void showRoutineAtIndex(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //First Routine in Model"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routine \u003d model.getFilteredRoutineList().get(INDEX_FIRST_ROUTINE.getOneBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Update filter to show only this Routine"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        final String[] splitName \u003d routine.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.updateFilteredRoutineList(new RoutineNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * Updates {@code model}\u0027s filtered Routine list to show no one."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private void showNoRoutine(Model model) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        model.updateFilteredRoutineList(p -\u003e false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(model.getFilteredRoutineList().isEmpty());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "khor-jingqian": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/timetable/TimetableAddLessonCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.commands.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.DurationTest.DURATION_1600_1800;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.DurationTest.DURATION_1630_1730;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.CS2030;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.MA1521;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.getTypicalFitNus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableAddLessonCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Slot added to Timetable: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_MISSING_LESSON \u003d \"This lesson does not exist in fitNUS\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SLOT \u003d \"This slot already exists in your timetable\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_OVERLAP_SLOT \u003d \"This slot overlaps with another slot in your timetable\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Model typicalModel \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void constructor_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                new TimetableAddLessonCommand(null, Day.MONDAY, DURATION_1600_1800));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void constructor_nullDay_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                new TimetableAddLessonCommand(MA1521, null, DURATION_1600_1800));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void constructor_nullDuration_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                new TimetableAddLessonCommand(MA1521, Day.MONDAY, null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableAddLessonCommand command \u003d new TimetableAddLessonCommand(MA1521, Day.MONDAY, DURATION_1600_1800);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e command.execute(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void execute_lessonDoesNotExist_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableAddLessonCommand command \u003d new TimetableAddLessonCommand(CS2030, Day.MONDAY, DURATION_1600_1800);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertCommandFailure(command, typicalModel, MESSAGE_MISSING_LESSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void execute_duplicateSlot_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableAddLessonCommand command \u003d new TimetableAddLessonCommand(MA1521, Day.FRIDAY, DURATION_1600_1800);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertCommandFailure(command, typicalModel, MESSAGE_DUPLICATE_SLOT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void execute_overlapSlot_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableAddLessonCommand command \u003d new TimetableAddLessonCommand(MA1521, Day.FRIDAY, DURATION_1630_1730);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertCommandFailure(command, typicalModel, MESSAGE_OVERLAP_SLOT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void execute_validSlot_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableAddLessonCommand command \u003d new TimetableAddLessonCommand(MA1521, Day.MONDAY, DURATION_1600_1800);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(typicalModel.getFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot slot \u003d new Slot(MA1521, Day.MONDAY, DURATION_1600_1800);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        expectedModel.addSlotToTimetable(slot);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, slot);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertCommandSuccess(command, typicalModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/timetable/TimetableAddRoutineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.commands.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.DurationTest.DURATION_1600_1800;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.DurationTest.DURATION_1630_1730;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.LEG_DAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.UPPER_BODY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.getTypicalFitNus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableAddRoutineCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Slot added to Timetable: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_MISSING_ROUTINE \u003d \"This routine does not exist in fitNUS\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SLOT \u003d \"This slot already exists in your timetable\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_OVERLAP_SLOT \u003d \"This slot overlaps with another slot in your timetable\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Model typicalModel \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void constructor_nullRoutine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                new TimetableAddRoutineCommand(null, Day.MONDAY, DURATION_1600_1800));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void constructor_nullDay_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                new TimetableAddRoutineCommand(LEG_DAY, null, DURATION_1600_1800));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void constructor_nullDuration_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                new TimetableAddRoutineCommand(LEG_DAY, Day.MONDAY, null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableAddRoutineCommand command \u003d new TimetableAddRoutineCommand(LEG_DAY, Day.MONDAY, DURATION_1600_1800);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e command.execute(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void execute_routineDoesNotExist_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableAddRoutineCommand command \u003d new TimetableAddRoutineCommand(UPPER_BODY, Day.MONDAY, DURATION_1600_1800);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertCommandFailure(command, typicalModel, MESSAGE_MISSING_ROUTINE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void execute_duplicateSlot_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableAddRoutineCommand command \u003d new TimetableAddRoutineCommand(LEG_DAY, Day.WEDNESDAY, DURATION_1600_1800);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertCommandFailure(command, typicalModel, MESSAGE_DUPLICATE_SLOT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void execute_overlapSlot_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableAddRoutineCommand command \u003d new TimetableAddRoutineCommand(LEG_DAY, Day.WEDNESDAY, DURATION_1630_1730);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertCommandFailure(command, typicalModel, MESSAGE_OVERLAP_SLOT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void execute_validSlot_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableAddRoutineCommand command \u003d new TimetableAddRoutineCommand(LEG_DAY, Day.MONDAY, DURATION_1600_1800);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(typicalModel.getFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot slot \u003d new Slot(LEG_DAY, Day.MONDAY, DURATION_1600_1800);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        expectedModel.addSlotToTimetable(slot);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, slot);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertCommandSuccess(command, typicalModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/timetable/TimetableDeleteSlotCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.commands.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.DurationTest.DURATION_1600_1800;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.MA1101R;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.getTypicalFitNus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableDeleteSlotCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_DELETE_SLOT_SUCCESS \u003d \"Deleted Slot: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MESSAGE_MISSING_SLOT \u003d \"This slot does not exist in your timetable.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Model typicalModel \u003d new ModelManager(getTypicalFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void constructor_nullSlot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TimetableDeleteSlotCommand(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableDeleteSlotCommand command \u003d new TimetableDeleteSlotCommand(new Slot(Day.MONDAY, DURATION_1600_1800));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e command.execute(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void execute_slotDoesNotExist_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableDeleteSlotCommand command \u003d new TimetableDeleteSlotCommand(new Slot(Day.MONDAY, DURATION_1600_1800));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertCommandFailure(command, typicalModel, MESSAGE_MISSING_SLOT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void execute_validSlot_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot slot \u003d new Slot(MA1101R, Day.THURSDAY, DURATION_1600_1800);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableDeleteSlotCommand command \u003d new TimetableDeleteSlotCommand(slot);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Model expectedModel \u003d new ModelManager(typicalModel.getFitNus(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        expectedModel.deleteSlotFromTimetable(slot);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELETE_SLOT_SUCCESS, slot);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertCommandSuccess(command, typicalModel, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FitNusParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.SPRINTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LESSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.MA1521;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.AddHeightCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.AddWeightCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.CalorieAddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.CalorieMinusCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseAddCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseDeleteCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseEditCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseEditCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseFindCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseListCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonAddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonDeleteCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonEditCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonEditCommand.EditLessonDescriptor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonFindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineAddExerciseCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineCreateCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineDeleteCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineDeleteExerciseCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineFindCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineListCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineViewCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.timetable.TimetableAddLessonCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.timetable.TimetableAddRoutineCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.timetable.TimetableDeleteSlotCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Height;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Weight;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.exercise.ExerciseNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.lesson.LessonNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.routine.RoutineNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.EditLessonDescriptorBuilder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.testutil.ExerciseUtil;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.LessonUtil;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.testutil.RoutineUtil;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.testutil.SlotUtil;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class FitNusParserTest {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final FitNusParser parser \u003d new FitNusParser();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_addHeight() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Height height \u003d new Height(170);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d AddHeightCommand.COMMAND_WORD + \" \" + PREFIX_HEIGHT + height.getHeight();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        AddHeightCommand actualCommand \u003d (AddHeightCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        AddHeightCommand expectedCommand \u003d new AddHeightCommand(height);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_addWeight() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Weight weight \u003d new Weight(70);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d AddWeightCommand.COMMAND_WORD + \" \" + PREFIX_WEIGHT + weight.getWeight();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        AddWeightCommand actualCommand \u003d (AddWeightCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        AddWeightCommand expectedCommand \u003d new AddWeightCommand(weight);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_calorieAdd() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Calorie calorie \u003d new Calorie(1000);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d CalorieAddCommand.COMMAND_WORD + \" \" + PREFIX_CALORIE + calorie.getCalorie();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        CalorieAddCommand actualCommand \u003d (CalorieAddCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        CalorieAddCommand expectedCommand \u003d new CalorieAddCommand(calorie);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_calorieMinus() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Calorie calorie \u003d new Calorie(1000);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d CalorieMinusCommand.COMMAND_WORD + \" \" + PREFIX_CALORIE + calorie.getCalorie();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        CalorieMinusCommand actualCommand \u003d (CalorieMinusCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        CalorieMinusCommand expectedCommand \u003d new CalorieMinusCommand(calorie);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_exerciseAdd() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Exercise exercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ExerciseAddCommand actualCommand \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                (ExerciseAddCommand) parser.parseCommand(ExerciseUtil.getExerciseAddCommand(exercise));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ExerciseAddCommand expectedCommand \u003d new ExerciseAddCommand(exercise);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_exerciseDelete() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ExerciseDeleteCommand actualCommand \u003d (ExerciseDeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                ExerciseUtil.getExerciseDeleteCommand(INDEX_FIRST_EXERCISE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ExerciseDeleteCommand expectedCommand \u003d new ExerciseDeleteCommand(INDEX_FIRST_EXERCISE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_exerciseEdit() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Exercise exercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder(exercise).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ExerciseEditCommand actualCommand \u003d (ExerciseEditCommand) parser.parseCommand("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                ExerciseUtil.getExerciseEditCommand(INDEX_FIRST_EXERCISE, descriptor));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ExerciseEditCommand expectedCommand \u003d new ExerciseEditCommand(INDEX_FIRST_EXERCISE, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_exerciseFind() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String keyword \u003d \"keyword\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ExerciseFindCommand actualCommand \u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                (ExerciseFindCommand) parser.parseCommand(ExerciseUtil.getExerciseFindCommand(keyword));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                new ExerciseNameContainsKeywordsPredicate(Collections.singletonList(keyword));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ExerciseFindCommand expectedCommand \u003d new ExerciseFindCommand(predicate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_exerciseList() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d ExerciseListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ExerciseListCommand actualCommand \u003d (ExerciseListCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        ExerciseListCommand expectedCommand \u003d new ExerciseListCommand();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_routineCreate() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Routine legDay \u003d new Routine(new Name(\"Leg Day\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d RoutineUtil.getRoutineCreateCommand(legDay);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        RoutineCreateCommand actualCommand \u003d (RoutineCreateCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        RoutineCreateCommand expectedCommand \u003d new RoutineCreateCommand(legDay);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_routineDelete() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d RoutineUtil.getRoutineDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        RoutineDeleteCommand actualCommand \u003d (RoutineDeleteCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        RoutineDeleteCommand expectedCommand \u003d new RoutineDeleteCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_routineFind() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String keyword \u003d \"keyword\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d RoutineUtil.getRoutineFindCommand(keyword);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        RoutineFindCommand actualCommand \u003d (RoutineFindCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        RoutineNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                new RoutineNameContainsKeywordsPredicate(Collections.singletonList(keyword));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        RoutineFindCommand expectedCommand \u003d new RoutineFindCommand(predicate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_routineList() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d RoutineListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        RoutineListCommand actualCommand \u003d (RoutineListCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        RoutineListCommand expectedCommand \u003d new RoutineListCommand();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_routineAddExercise() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Routine legDay \u003d new Routine(new Name(\"Leg Day\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d RoutineUtil.getRoutineAddExerciseCommand(legDay, SPRINTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        RoutineAddExerciseCommand actualCommand \u003d (RoutineAddExerciseCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        RoutineAddExerciseCommand expectedCommand \u003d new RoutineAddExerciseCommand(legDay, SPRINTS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_routineDeleteExercise() throws Exception {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Routine legDay \u003d new Routine(new Name(\"Leg Day\"));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d RoutineUtil.getRoutineDeleteExerciseCommand(legDay, SPRINTS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        RoutineDeleteExerciseCommand actualCommand \u003d (RoutineDeleteExerciseCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        RoutineDeleteExerciseCommand expectedCommand \u003d new RoutineDeleteExerciseCommand(legDay, SPRINTS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_routineView() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d RoutineUtil.getRoutineViewCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        RoutineViewCommand actualCommand \u003d (RoutineViewCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        RoutineViewCommand expectedCommand \u003d new RoutineViewCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parseCommand_lessonAdd() throws Exception {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonAddCommand command \u003d (LessonAddCommand) parser.parseCommand(LessonUtil.getLessonAddCommand(lesson));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(new LessonAddCommand(lesson), command);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parseCommand_lessonDelete() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonDeleteCommand command \u003d (LessonDeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                LessonDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_LESSON.getOneBased());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(new LessonDeleteCommand(INDEX_FIRST_LESSON), command);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parseCommand_lessonEdit() throws Exception {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        EditLessonDescriptor descriptor \u003d new EditLessonDescriptorBuilder(lesson).build();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand command \u003d (LessonEditCommand) parser.parseCommand(LessonEditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                + INDEX_FIRST_LESSON.getOneBased() + \" \" + LessonUtil.getEditLessonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(new LessonEditCommand(INDEX_FIRST_LESSON, descriptor), command);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_lessonFind() throws Exception {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String keyword \u003d \"keyword\";"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d LessonFindCommand.COMMAND_WORD + \" \" + keyword;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LessonFindCommand actualCommand \u003d (LessonFindCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LessonNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                new LessonNameContainsKeywordsPredicate(Collections.singletonList(keyword));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LessonFindCommand expectedCommand \u003d new LessonFindCommand(predicate);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_lessonList() throws Exception {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d LessonListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LessonListCommand actualCommand \u003d (LessonListCommand) parser.parseCommand(userInput);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        LessonListCommand expectedCommand \u003d new LessonListCommand();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_timetableAddRoutine() throws Exception {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Routine legDay \u003d new Routine(new Name(\"Leg Day\"));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot slot \u003d new SlotBuilder().withActivity(legDay).build();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableAddRoutineCommand expectedCommand \u003d new TimetableAddRoutineCommand("
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                legDay, slot.getDay(), slot.getDuration());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableAddRoutineCommand actualCommand \u003d"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                (TimetableAddRoutineCommand) parser.parseCommand(SlotUtil.getTimetableAddRoutineCommand(slot));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_timetableAddLesson() throws Exception {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot slot \u003d new SlotBuilder().withActivity(MA1521).build();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableAddLessonCommand expectedCommand \u003d new TimetableAddLessonCommand("
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                MA1521, slot.getDay(), slot.getDuration());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableAddLessonCommand actualCommand \u003d"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                (TimetableAddLessonCommand) parser.parseCommand(SlotUtil.getTimetableAddLessonCommand(slot));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCommand_timetableDeleteSlot() throws Exception {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot slot \u003d new SlotBuilder().build();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableDeleteSlotCommand expectedCommand \u003d new TimetableDeleteSlotCommand(slot);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableDeleteSlotCommand actualCommand \u003d"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                (TimetableDeleteSlotCommand) parser.parseCommand(SlotUtil.getTimetablDeleteSlotCommand(slot));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCommand, actualCommand);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(ParseException.class, String.format("
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 29,
      "nicholasyeo": 255,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LESSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Height;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Weight;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Day;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String INVALID_LESSON_NAME \u003d \"GER@1000\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String INVALID_EXERCISE_NAME \u003d \"Seated Leg Pr\u0026ss\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String INVALID_DAY \u003d \"random\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String INVALID_DURATION_FORMAT \u003d \"1600 - 1800\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String INVALID_DURATION_ORDER \u003d \"1800-1600\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#priority\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String INVALID_HEIGHT_FORMAT \u003d \"123.45.6\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String INVALID_HEIGHT_LIMIT_1 \u003d \"10\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String INVALID_HEIGHT_LIMIT_2 \u003d \"1000\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String INVALID_WEIGHT_FORMAT \u003d \"60.12.3\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String INVALID_WEIGHT_LIMIT_1 \u003d \"10\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String INVALID_WEIGHT_LIMIT_2 \u003d \"1000\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String INVALID_CALORIE_FORMAT \u003d \"1234.56\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String INVALID_CALORIE_LIMIT \u003d \"0\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String VALID_LESSON_NAME \u003d \"GER1000\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String VALID_EXERCISE_NAME \u003d \"Seated Leg Press\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String VALID_DURATION \u003d \"1600-1800\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String VALID_DAY \u003d \"monday\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"priority\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"lower\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String VALID_HEIGHT \u003d \"170\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String VALID_WEIGHT \u003d \"70\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String VALID_CALORIE \u003d \"1000\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parseLessonIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(INDEX_FIRST_LESSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(INDEX_FIRST_LESSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parseExerciseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(INDEX_FIRST_EXERCISE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(INDEX_FIRST_EXERCISE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parseLessonName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_LESSON_NAME));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parseLessonName_validValueWithoutWhitespace_returnsLessonName() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Name expectedName \u003d new Name(VALID_LESSON_NAME);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_LESSON_NAME));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parseLessonName_validValueWithWhitespace_returnsTrimmedLessonName() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String lessonNameWithWhitespace \u003d WHITESPACE + VALID_LESSON_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Name expectedLessonName \u003d new Name(VALID_LESSON_NAME);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(expectedLessonName, ParserUtil.parseName(lessonNameWithWhitespace));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parseExerciseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_EXERCISE_NAME));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parseExerciseName_validValueWithoutWhitespace_returnsExerciseName() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Name expectedName \u003d new Name(VALID_EXERCISE_NAME);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_EXERCISE_NAME));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parseExerciseName_validValueWithWhitespace_returnsTrimmedExerciseName() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String exerciseNameWithWhitespace \u003d WHITESPACE + VALID_EXERCISE_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Name expectedExerciseName \u003d new Name(VALID_EXERCISE_NAME);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(expectedExerciseName, ParserUtil.parseName(exerciseNameWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseDay_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDay((String) null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseDay_unknownDay_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDay(INVALID_DAY));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseDay_validDay_success() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Day expectedDay \u003d Day.MONDAY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedDay, ParserUtil.parseDay(VALID_DAY));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseDuration_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDuration((String) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseDuration_invalidDurationFormat_throwsParseException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDuration(INVALID_DURATION_FORMAT));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseDuration_invalidDurationOrder_throwsParseException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDuration(INVALID_DURATION_ORDER));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseDuration_validDuration_success() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Duration expectedDuration \u003d new Duration(LocalTime.of(16, 0), LocalTime.of(18, 0));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedDuration, ParserUtil.parseDuration(VALID_DURATION));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseHeight_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseHeight(null));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseHeight_invalidHeightFormat_throwsParseException() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHeight(INVALID_HEIGHT_FORMAT));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseHeight_invalidHeightLowerLimit_throwsParseException() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHeight(INVALID_HEIGHT_LIMIT_1));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseHeight_invalidHeightUpperLimit_throwsParseException() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseHeight(INVALID_HEIGHT_LIMIT_2));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseHeight_validHeight_success() throws Exception {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Height expectedHeight \u003d new Height(170);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedHeight, ParserUtil.parseHeight(VALID_HEIGHT));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseWeight_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseWeight(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseWeight_invalidWeightFormat_throwsParseException() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWeight(INVALID_WEIGHT_FORMAT));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseWeight_invalidWeightLowerLimit_throwsParseException() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWeight(INVALID_WEIGHT_LIMIT_1));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseWeight_invalidWeightUpperLimit_throwsParseException() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseWeight(INVALID_WEIGHT_LIMIT_2));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseWeight_validWeight_success() throws Exception {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Weight expectedWeight \u003d new Weight(70);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedWeight, ParserUtil.parseWeight(VALID_WEIGHT));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCalorie_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCalorie(null));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCalorie_invalidCalorieFormat_throwsParseException() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCalorie(INVALID_CALORIE_FORMAT));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCalorie_invalidCalorieLimit_throwsParseException() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCalorie(INVALID_CALORIE_LIMIT));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parseCalorie_validCalorie_success() throws Exception {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Calorie expectedCalorie \u003d new Calorie(1000);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedCalorie, ParserUtil.parseCalorie(VALID_CALORIE));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 39,
      "nicholasyeo": 112,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/body/AddHeightCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.AddHeightCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.AddHeightCommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Height;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class AddHeightCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final AddHeightCommandParser parser \u003d new AddHeightCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_validPrefixAndInput_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Height testHeight \u003d new Height(170);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Correct format as per UG"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseSuccess(parser, \" h/170\", new AddHeightCommand(testHeight));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Trailing whitespace and infront as well"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseSuccess(parser, \"  h/170 \", new AddHeightCommand(testHeight));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_invalidPrefix_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String failureMessage \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddHeightCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Mulitple height prefixes"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" h/170 h/180\", failureMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Missing Prefix"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" 179\", failureMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_invalidInput_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Negative input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" h/-179\", Height.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Zero input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" h/0\", Height.MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Too large of an input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" h/2147483648\", Height.MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Impossible height values"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" h/20\", Height.MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" h/250\", Height.MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 1,
      "khor-jingqian": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/body/AddWeightCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.AddWeightCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.AddWeightCommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Weight;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class AddWeightCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final AddWeightCommandParser parser \u003d new AddWeightCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_validPrefixAndInput_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Weight testWeight \u003d new Weight(70);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Correct format as per UG"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseSuccess(parser, \" w/70\", new AddWeightCommand(testWeight));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Trailing whitespace and infront as well"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseSuccess(parser, \"  w/70 \", new AddWeightCommand(testWeight));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_invalidPrefix_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String failureMessage \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddWeightCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Mulitple height prefixes"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" w/70 w/80\", failureMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Missing Prefix"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" 79\", failureMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_invalidInput_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Negative input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" w/-79\", Weight.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Zero input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" w/0\", Weight.MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Too large of an input"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" w/2147483648\", Weight.MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Impossible height values"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" w/20\", Weight.MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" w/350\", Weight.MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 1,
      "khor-jingqian": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/calorie/CalorieAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.calorie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CalorieAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.CalorieAddCommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieAddCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final CalorieAddCommandParser parser \u003d new CalorieAddCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final CalorieAddCommand command \u003d new CalorieAddCommand(new Calorie(100));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final String formatErrorMessage \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            CalorieAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parseValidInput_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseSuccess(parser, \" c/100\", command);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parseInvalidInputMissingPrefix_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" 100\", formatErrorMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parseInvalidInputNegativeNumber_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" -1\", formatErrorMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parseInvalidInputTooLarge_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" 2147483648\", formatErrorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parseInvalidInputDoublePrefix_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" c/1000 c/1\", formatErrorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 2,
      "khor-jingqian": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/calorie/CalorieMinusCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.calorie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.CalorieMinusCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.CalorieMinusCommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieMinusCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final CalorieMinusCommandParser parser \u003d new CalorieMinusCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final CalorieMinusCommand command \u003d new CalorieMinusCommand(new Calorie(100));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final String formatErrorMessage \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            CalorieMinusCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parseValidInput_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseSuccess(parser, \" c/100\", command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parseInvalidInputMissingPrefix_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" 100\", formatErrorMessage);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parseInvalidInputNegativeNumber_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" -1\", formatErrorMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parseInvalidInputTooLarge_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" 2147483648\", formatErrorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parseInvalidInputDoublePrefix_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" c/1000 c/1\", formatErrorMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 2,
      "khor-jingqian": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/exercise/ExerciseAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXERCISE_NAME_DESC_BENCH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXERCISE_NAME_DESC_SQUATS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXERCISE_TAG_DESC_ARMS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXERCISE_TAG_DESC_CHEST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXERCISE_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXERCISE_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXERCISE_NAME_BENCH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXERCISE_TAG_ARMS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXERCISE_TAG_CHEST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.SQUATS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseAddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseAddCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private ExerciseAddCommandParser parser \u003d new ExerciseAddCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void parse_allExerciseFieldsPresent_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise expectedExercise \u003d new ExerciseBuilder(BENCH_PRESS).withTags(VALID_EXERCISE_TAG_CHEST).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EXERCISE_NAME_DESC_BENCH"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                + EXERCISE_TAG_DESC_CHEST, new ExerciseAddCommand(expectedExercise));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise expectedExerciseMultipleTags \u003d new ExerciseBuilder(BENCH_PRESS)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .withTags(VALID_EXERCISE_TAG_CHEST, VALID_EXERCISE_TAG_ARMS).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseSuccess(parser, EXERCISE_NAME_DESC_BENCH + EXERCISE_TAG_DESC_CHEST"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                + EXERCISE_TAG_DESC_ARMS, new ExerciseAddCommand(expectedExerciseMultipleTags));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void parse_optionalExerciseFieldsMissing_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise expectedExercise \u003d new ExerciseBuilder(SQUATS).withTags().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseSuccess(parser, EXERCISE_NAME_DESC_SQUATS, new ExerciseAddCommand(expectedExercise));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void parse_compulsoryExerciseFieldMissing_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExerciseAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // missing exercise prefix"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, VALID_EXERCISE_NAME_BENCH, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void parse_invalidExerciseValue_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // invalid exercise"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, INVALID_EXERCISE_NAME_DESC"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                + EXERCISE_TAG_DESC_CHEST + EXERCISE_TAG_DESC_ARMS, Name.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, EXERCISE_NAME_DESC_BENCH"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                + INVALID_EXERCISE_TAG_DESC + VALID_EXERCISE_TAG_ARMS, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + EXERCISE_NAME_DESC_BENCH"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                        + EXERCISE_TAG_DESC_ARMS + EXERCISE_TAG_DESC_CHEST,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExerciseAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/exercise/ExerciseDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXERCISE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * outside of the ExerciseDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseDeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private ExerciseDeleteCommandParser parser \u003d new ExerciseDeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void parse_validArgs_returnsExerciseDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ExerciseDeleteCommand(INDEX_FIRST_EXERCISE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                parser, \"a\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/exercise/ExerciseEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXERCISE_NAME_DESC_BENCH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXERCISE_TAG_DESC_ARMS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXERCISE_TAG_DESC_CHEST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXERCISE_TAG_DESC_LEGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXERCISE_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXERCISE_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXERCISE_NAME_BENCH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXERCISE_TAG_ARMS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXERCISE_TAG_CHEST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EXERCISE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseEditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseEditCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.testutil.EditExerciseDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseEditCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExerciseEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private ExerciseEditCommandParser parser \u003d new ExerciseEditCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, VALID_EXERCISE_NAME_BENCH, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, \"1\", ExerciseEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, \"-5\" + EXERCISE_NAME_DESC_BENCH, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, \"0\" + EXERCISE_NAME_DESC_BENCH, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EXERCISE_NAME_DESC,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS_FORMAT); // invalid exercise"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EXERCISE_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Exercise} being edited,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, \"1\" + EXERCISE_TAG_DESC_LEGS + EXERCISE_TAG_DESC_CHEST + TAG_EMPTY,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, \"1\" + EXERCISE_TAG_DESC_CHEST + TAG_EMPTY + EXERCISE_TAG_DESC_ARMS,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + EXERCISE_TAG_DESC_CHEST + EXERCISE_TAG_DESC_ARMS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EXERCISE_NAME_DESC + INVALID_EXERCISE_TAG_DESC,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXERCISE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + EXERCISE_TAG_DESC_ARMS"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                + EXERCISE_NAME_DESC_BENCH + EXERCISE_TAG_DESC_CHEST;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseEditCommand.EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .withName(VALID_EXERCISE_NAME_BENCH)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .withTags(VALID_EXERCISE_TAG_CHEST, VALID_EXERCISE_TAG_ARMS).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseEditCommand expectedCommand \u003d new ExerciseEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // exercise"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXERCISE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + EXERCISE_NAME_DESC_BENCH;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .withName(VALID_EXERCISE_NAME_BENCH).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseEditCommand expectedCommand \u003d new ExerciseEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EXERCISE_TAG_DESC_CHEST;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptorBuilder().withTags(VALID_EXERCISE_TAG_CHEST).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        expectedCommand \u003d new ExerciseEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXERCISE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        EditExerciseDescriptor descriptor \u003d new EditExerciseDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseEditCommand expectedCommand \u003d new ExerciseEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/exercise/ExerciseFindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.logic.parser.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseFindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.exercise.ExerciseNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseFindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private ExerciseFindCommandParser parser \u003d new ExerciseFindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, ExerciseFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void parse_validArgs_returnsExerciseFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseFindCommand expectedExerciseFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                new ExerciseFindCommand(new ExerciseNameContainsKeywordsPredicate(Arrays.asList(\"Bench\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseSuccess(parser, \"Bench\", expectedExerciseFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseSuccess(parser, \" \\n Bench\", expectedExerciseFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/lessons/LessonAddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.parser.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LESSON_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LESSON_TAG_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LESSON_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LESSON_NAME_DESC_CS2106;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LESSON_TAG_DESC_EASY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LESSON_TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_NAME_CS2106;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_TAG_EASY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_TAG_LECTURE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.CS2030;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.CS2106;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonAddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonAddCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private LessonAddCommandParser parser \u003d new LessonAddCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parse_allLessonFieldsPresent_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson expectedLesson \u003d new LessonBuilder(CS2106).withTags(VALID_LESSON_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + LESSON_NAME_DESC_CS2106"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                + LESSON_TAG_DESC_LECTURE, new LessonAddCommand(expectedLesson));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // multiple lessons - last lesson accepted"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseSuccess(parser, LESSON_NAME_DESC_CS2030 + LESSON_NAME_DESC_CS2106"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                + LESSON_TAG_DESC_LECTURE, new LessonAddCommand(expectedLesson));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson expectedLessonMultipleTags \u003d new LessonBuilder(CS2106)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .withTags(VALID_LESSON_TAG_LECTURE, VALID_LESSON_TAG_EASY).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseSuccess(parser, LESSON_NAME_DESC_CS2106"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                + LESSON_TAG_DESC_EASY + LESSON_TAG_DESC_LECTURE, new LessonAddCommand(expectedLessonMultipleTags));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parse_optionalLessonFieldsMissing_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson expectedLesson \u003d new LessonBuilder(CS2030).withTags().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseSuccess(parser, LESSON_NAME_DESC_CS2030, new LessonAddCommand(expectedLesson));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parse_compulsoryLessonFieldMissing_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, LessonAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // missing lesson prefix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseFailure(parser, VALID_LESSON_NAME_CS2106, expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parse_invalidLessonValue_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // invalid lesson"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseFailure(parser, INVALID_LESSON_NAME_DESC"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + LESSON_TAG_DESC_EASY + LESSON_TAG_DESC_LECTURE, Name.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseFailure(parser, LESSON_NAME_DESC_CS2106"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                + INVALID_LESSON_TAG_DESC + VALID_LESSON_TAG_LECTURE, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + LESSON_NAME_DESC_CS2106"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                        + LESSON_TAG_DESC_EASY + LESSON_TAG_DESC_LECTURE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, LessonAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 43,
      "nicholasyeo": 2,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/lessons/LessonDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.parser.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LESSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * outside of the LessonDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonDeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private LessonDeleteCommandParser parser \u003d new LessonDeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parse_validArgs_returnsLessonDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseSuccess(parser, \"1\", new LessonDeleteCommand(INDEX_FIRST_LESSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                parser, \"a\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 9,
      "nicholasyeo": 2,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/lessons/LessonEditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.parser.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LESSON_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LESSON_TAG_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LESSON_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LESSON_NAME_DESC_CS2106;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LESSON_TAG_DESC_EASY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LESSON_TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_NAME_CS2030;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_NAME_CS2106;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_TAG_EASY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_TAG_LECTURE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_LESSON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_LESSON;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_LESSON;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonEditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonEditCommand.EditLessonDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.EditLessonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonEditCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, LessonEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private LessonEditCommandParser parser \u003d new LessonEditCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, VALID_LESSON_NAME_CS2030, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseFailure(parser, \"1\", LessonEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, \"-5\" + LESSON_NAME_DESC_CS2030, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, \"0\" + LESSON_NAME_DESC_CS2030, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_LESSON_NAME_DESC, Name.MESSAGE_CONSTRAINTS_FORMAT); // invalid lesson"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_LESSON_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Lesson} being edited,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + LESSON_TAG_DESC_LECTURE + LESSON_TAG_DESC_EASY + TAG_EMPTY,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + LESSON_TAG_DESC_LECTURE + TAG_EMPTY + LESSON_TAG_DESC_EASY,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + LESSON_TAG_DESC_LECTURE + LESSON_TAG_DESC_EASY,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_LESSON_NAME_DESC + INVALID_LESSON_TAG_DESC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_LESSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + LESSON_TAG_DESC_EASY"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                + LESSON_NAME_DESC_CS2030 + LESSON_TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        EditLessonDescriptor descriptor \u003d new EditLessonDescriptorBuilder().withName(VALID_LESSON_NAME_CS2030)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .withTags(VALID_LESSON_TAG_EASY, VALID_LESSON_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand expectedCommand \u003d new LessonEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // lesson"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_LESSON;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + LESSON_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        EditLessonDescriptor descriptor \u003d new EditLessonDescriptorBuilder().withName(VALID_LESSON_NAME_CS2030).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand expectedCommand \u003d new LessonEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + LESSON_TAG_DESC_LECTURE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        descriptor \u003d new EditLessonDescriptorBuilder().withTags(VALID_LESSON_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedCommand \u003d new LessonEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_LESSON;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + LESSON_NAME_DESC_CS2030"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                + LESSON_NAME_DESC_CS2030 + LESSON_TAG_DESC_LECTURE + LESSON_NAME_DESC_CS2106 + LESSON_TAG_DESC_EASY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        EditLessonDescriptor descriptor \u003d new EditLessonDescriptorBuilder().withName(VALID_LESSON_NAME_CS2106)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .withTags(VALID_LESSON_TAG_LECTURE, VALID_LESSON_TAG_EASY).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand expectedCommand \u003d new LessonEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_LESSON;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_LESSON_NAME_DESC + LESSON_NAME_DESC_CS2106;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        EditLessonDescriptor descriptor \u003d new EditLessonDescriptorBuilder().withName(VALID_LESSON_NAME_CS2106).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand expectedCommand \u003d new LessonEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + LESSON_TAG_DESC_EASY + INVALID_LESSON_NAME_DESC"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                + LESSON_TAG_DESC_LECTURE + LESSON_NAME_DESC_CS2106;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        descriptor \u003d new EditLessonDescriptorBuilder().withName(VALID_LESSON_NAME_CS2106)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .withTags(VALID_LESSON_TAG_LECTURE, VALID_LESSON_TAG_EASY).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedCommand \u003d new LessonEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_LESSON;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        EditLessonDescriptor descriptor \u003d new EditLessonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonEditCommand expectedCommand \u003d new LessonEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 146,
      "nicholasyeo": 9,
      "khor-jingqian": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/lessons/LessonFindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.logic.parser.lessons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonFindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.LessonNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonFindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private LessonFindCommandParser parser \u003d new LessonFindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, LessonFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void parse_validArgs_returnsLessonFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonFindCommand expectedLessonFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                new LessonFindCommand(new LessonNameContainsKeywordsPredicate(Arrays.asList(\"GES1028\", \"CS2106\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseSuccess(parser, \"GES1028 CS2106\", expectedLessonFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertParseSuccess(parser, \" \\n GES1028 \\n \\t CS2106  \\t\", expectedLessonFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/routines/RoutineAddExerciseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.SPRINTS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.SQUATS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineAddExerciseCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineAddExerciseCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final RoutineAddExerciseCommandParser parser \u003d new RoutineAddExerciseCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Routine legDay \u003d new Routine(new Name(\"Leg Day\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_allRoutineFieldsPresent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseSuccess(parser, \" r/Leg Day e/Sprints\", new RoutineAddExerciseCommand(legDay, SPRINTS));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_compulsoryRoutineFieldMissing_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineAddExerciseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // missing routine prefix"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" Leg Day e/Squats\", expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_compulsoryExerciseFieldMissing_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineAddExerciseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // missing exercise prefix"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" r/Leg Day Squats\", expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_invalidRoutineAndExerciseValue_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineAddExerciseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //invalid Routine and Exercise"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" Leg Day Squats\", expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // invalid Routine"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE + legDay + \"\u0026\" + \" e/Squats\", expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //invalid Exercise"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE + legDay + \" e/Squats\" + \"\u0026\", expectedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + \"Leg Day\", expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Double Routine entries"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" r/Leg Day r/Lower Body e/Squats\", expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Double Exercise entries"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" r/Leg Day e/Squats e/Hamstrings\", expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void routineAndExerciseProduced() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            FitNus fitNus \u003d new FitNus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fitNus.addRoutine(legDay);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fitNus.addExercise(SQUATS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertFalse(fitNus.getRoutineList().get(0).hasExercise(SQUATS));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            RoutineAddExerciseCommand command \u003d parser.parse(\" r/Leg Day e/Squats\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            command.execute(new ModelManager(fitNus, new UserPrefs()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertTrue(fitNus.getRoutineList().get(0).hasExercise(SQUATS));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 1,
      "khor-jingqian": 87,
      "Licheng-Wu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/routines/RoutineCreateCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.LEG_DAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineCreateCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineCreateCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final RoutineCreateCommandParser parser \u003d new RoutineCreateCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_allRoutineFieldsPresent_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine legDay \u003d new Routine(new Name(\"Leg Day\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseSuccess(parser, \" r/Leg Day\", new RoutineCreateCommand(legDay));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_compulsoryRoutineFieldMissing_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineCreateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // missing routine prefix"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \"Leg Day\", expectedMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_invalidRoutineValue_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineCreateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // invalid Routine"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE + LEG_DAY + \"\u0026\", expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + \"Leg Day\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineCreateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 1,
      "khor-jingqian": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/routines/RoutineDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * outside of the RoutineDeleteCommand code. The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineDeleteCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final RoutineDeleteCommandParser parser \u003d new RoutineDeleteCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final String expectedMessage \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_validArgs_returnsRoutineDeleteCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseSuccess(parser, \"1\", new RoutineDeleteCommand(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                parser, \"a\", expectedMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_missingArgs_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/routines/RoutineDeleteExerciseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.SPRINTS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.LEG_DAY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineDeleteExerciseCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineDeleteExerciseCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final RoutineDeleteExerciseCommandParser parser \u003d new RoutineDeleteExerciseCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_allRoutineFieldsPresent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine legDay \u003d new Routine(new Name(\"Leg Day\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertParseSuccess(parser, \" r/Leg Day e/Sprints\", new RoutineDeleteExerciseCommand(legDay, SPRINTS));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_compulsoryRoutineFieldMissing_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                RoutineDeleteExerciseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // missing routine prefix"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" Leg Day e/Squats\", expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_compulsoryExerciseFieldMissing_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                RoutineDeleteExerciseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // missing exercise prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" r/Leg Day Squats\", expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_invalidRoutineAndExerciseValue_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                RoutineDeleteExerciseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //invalid Routine and Exercise"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" Leg Day Squats\", expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // invalid Routine"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE + LEG_DAY + \"\u0026\" + \" e/Squats\", expectedMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //invalid Exercise"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE + LEG_DAY + \" e/Squats\" + \"\u0026\", expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + \"Leg Day\", expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Double Routine entries"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" r/Leg Day r/Lower Body e/Squats\", expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Double Exercise entries"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \" r/Leg Day e/Squats e/Hamstrings\", expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void routineAndExerciseProduced() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            FitNus fitNus \u003d new FitNus();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            LEG_DAY.addExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fitNus.addRoutine(LEG_DAY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fitNus.addExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertTrue(fitNus.getRoutineList().get(0).hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            RoutineDeleteExerciseCommand command \u003d parser.parse(\" r/Leg Day e/Bench Press\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            command.execute(new ModelManager(fitNus, new UserPrefs()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertFalse(fitNus.getRoutineList().get(0).hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 1,
      "khor-jingqian": 92,
      "Licheng-Wu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/routines/RoutineFindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineFindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.routine.RoutineNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineFindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private RoutineFindCommandParser parser \u003d new RoutineFindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, RoutineFindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_validArgs_returnsLessonFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineNameContainsKeywordsPredicate predicate \u003d new RoutineNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Arrays.asList(\"Leg\", \"Day\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        RoutineFindCommand expectedRoutineFindCommand \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                new RoutineFindCommand(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseSuccess(parser, \"Leg Day\", expectedRoutineFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseSuccess(parser, \" \\n Leg\\n \\t Day  \\t\", expectedRoutineFindCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/routines/RoutineViewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.logic.parser.routines;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineViewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * outside of the RoutineViewCommand code. The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineViewCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final RoutineViewCommandParser parser \u003d new RoutineViewCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_validArgs_returnsRoutineViewCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseSuccess(parser, \"1\", new RoutineViewCommand(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                parser, \"a\", expectedMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_missingArgs_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void parse_numberFormat() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RoutineViewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                parser, \"2147483648\", expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/timetable/TimetableAddLessonCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.parser.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.DurationTest.DURATION_1600_1800;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.MA1521;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.timetable.TimetableAddLessonCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableAddLessonCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final TimetableAddLessonCommandParser parser \u003d new TimetableAddLessonCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final String expectedMessage \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableAddLessonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" n/MA1521 D/monday T/1600-1800\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableAddLessonCommand expectedCommand \u003d new TimetableAddLessonCommand("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                MA1521, Day.MONDAY, DURATION_1600_1800);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_missingLessonField_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" D/monday T/1600-1800\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_missingDayField_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" n/MA1521 T/1600-1800\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_missingDurationField_failure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" n/MA1521 D/monday\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_nonEmptyPreamble_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d PREAMBLE_NON_EMPTY + \" n/MA1521 D/monday T/1600-1800\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_multipleLessonField_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \"n/MA1521 n/MA1101R D/monday T/1600-1800\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_multipleDayField_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" n/MA1521 D/monday D/tuesday T/1600-1800\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_multipleDurationField_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" n/MA1521 D/monday T/1600-1800 T/1800-2000\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_invalidLessonField_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInputFormat \u003d \" n/MA1521\u0026 D/monday T/1600-1800\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInputFormat, Name.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInputLimit \u003d \" n/This is just a very long name of a lesson that will exceed 50 characters \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + \"D/monday T/1600-1800\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInputLimit, Name.MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_invalidDayField_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" n/MA1521 D/random T/1600-1800\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_invalidDurationField_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInputFormat \u003d \" n/MA1521 D/monday T/1600 - 1800\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInputFormat, Duration.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInputOrder \u003d \" n/MA1521 D/monday T/1800-1600\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInputOrder, Duration.MESSAGE_CONSTRAINTS_ORDER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/timetable/TimetableAddRoutineCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.parser.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.DurationTest.DURATION_1600_1800;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.timetable.TimetableAddRoutineCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableAddRoutineCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final TimetableAddRoutineCommandParser parser \u003d new TimetableAddRoutineCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final String expectedMessage \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableAddRoutineCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" r/Leg Day D/monday T/1600-1800\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Routine legDay \u003d new Routine(new Name(\"Leg Day\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableAddRoutineCommand expectedCommand \u003d new TimetableAddRoutineCommand("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                legDay, Day.MONDAY, DURATION_1600_1800);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_missingRoutineField_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" D/monday T/1600-1800\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_missingDayField_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" r/Leg Day T/1600-1800\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_missingDurationField_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" r/Leg Day D/monday\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_nonEmptyPreamble_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d PREAMBLE_NON_EMPTY + \" r/Leg Day D/monday T/1600-1800\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_multipleRoutineField_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \"r/Leg Day r/Upper Body D/monday T/1600-1800\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_multipleDayField_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" r/Leg Day D/monday D/tuesday T/1600-1800\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_multipleDurationField_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" r/Leg Day D/monday T/1600-1800 T/1800-2000\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_invalidRoutineField_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInputFormat \u003d \" r/Leg Day \u0026 D/monday T/1600-1800\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInputFormat, Name.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInputLimit \u003d \" r/This is just a very long name of a routine that will exceed 50 characters \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + \"D/monday T/1600-1800\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInputLimit, Name.MESSAGE_CONSTRAINTS_LIMIT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_invalidDayField_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" r/Leg Day D/random T/1600-1800\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_invalidDurationField_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInputFormat \u003d \" r/Leg Day D/monday T/1600 - 1800\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInputFormat, Duration.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInputOrder \u003d \" r/Leg Day D/monday T/1800-1600\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInputOrder, Duration.MESSAGE_CONSTRAINTS_ORDER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/timetable/TimetableDeleteSlotCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.logic.parser.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.DurationTest.DURATION_1600_1800;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.timetable.TimetableDeleteSlotCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableDeleteSlotCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final TimetableDeleteSlotCommandParser parser \u003d new TimetableDeleteSlotCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final String expectedMessage \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableDeleteSlotCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" D/monday T/1600-1800\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Slot slot \u003d new Slot(Day.MONDAY, DURATION_1600_1800);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        TimetableDeleteSlotCommand expectedCommand \u003d new TimetableDeleteSlotCommand(slot);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_missingDayField_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" T/1600-1800\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_missingDurationField_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" D/monday\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_nonEmptyPreamble_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d PREAMBLE_NON_EMPTY + \" D/monday T/1600-1800\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_multipleDayField_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" D/monday D/tuesday T/1600-1800\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_multipleDurationField_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" D/monday T/1600-1800 T/1800-2000\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_invalidDayField_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInput \u003d \" D/random T/1600-1800\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInput, Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void parse_invalidDurationField_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInputFormat \u003d \" D/monday T/1600 - 1800\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInputFormat, Duration.MESSAGE_CONSTRAINTS_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String userInputOrder \u003d \" D/monday T/1800-1600\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertParseFailure(parser, userInputOrder, Duration.MESSAGE_CONSTRAINTS_ORDER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/FitNusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_TAG_EASY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.GES1028;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.getTypicalFitNus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.LEG_DAY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.UPPER_BODY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.LEG_DAY_WEDNESDAY_1600_1800;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.LEG_DAY_WEDNESDAY_1630_1730;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.MA1101R_THURSDAY_1600_1800;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Body;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Height;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Weight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.DailyCalorie;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.exceptions.DuplicateLessonException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.routine.exceptions.DuplicateRoutineException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.exceptions.DuplicateSlotException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.exceptions.SlotOverlapDurationException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class FitNusTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final FitNus fitNus \u003d new FitNus();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(Collections.emptyList(), fitNus.getLessonList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(Collections.emptyList(), fitNus.getExerciseList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(Collections.emptyList(), fitNus.getRoutineList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(Collections.emptyList(), fitNus.getSlotList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(Collections.emptyList(), fitNus.getDailyCalorieList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Body comes pre-filled up so assertions are different."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cBody\u003e bodyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Body newBody \u003d new Body();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        newBody.setHeight(new Height(160));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        newBody.setWeight(new Weight(45));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        bodyList.add(newBody);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(bodyList, fitNus.getBody());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fitNus.resetData(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void resetData_withValidReadOnlyFitNus_replacesData() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        FitNus newData \u003d getTypicalFitNus();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.resetData(newData);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(newData, fitNus);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    //Lesson tests"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void resetData_withDuplicateLessons_throwsDuplicateLessonException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // Two lessons with the same identity fields"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson editedGes1028 \u003d new LessonBuilder(GES1028).withTags(VALID_LESSON_TAG_EASY).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        List\u003cLesson\u003e newLessons \u003d Arrays.asList(GES1028, editedGes1028);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        FitNusLessonsStub newData \u003d new FitNusLessonsStub(newLessons);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(DuplicateLessonException.class, () -\u003e fitNus.resetData(newData));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void hasLesson_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fitNus.hasLesson(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void hasLesson_lessonNotInFitNus_returnsFalse() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(fitNus.hasLesson(GES1028));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void hasLesson_lessonInFitNus_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.addLesson(GES1028);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(fitNus.hasLesson(GES1028));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void hasLesson_lessonWithSameIdentityFieldsInFitNus_returnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.addLesson(GES1028);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson editedGes1028 \u003d new LessonBuilder(GES1028).withTags(VALID_LESSON_TAG_EASY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(fitNus.hasLesson(editedGes1028));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void getLessonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e fitNus.getLessonList().remove(0));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    //Height, Weight and BMI testing"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void bmiTesting() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //This is using fitNUS values when it first starts up"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Double bmi \u003d (45 / Math.pow((160 / 100.0), 2));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(fitNus.getBmi(), bmi);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void heightTesting() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(fitNus.getHeight(), new Height(160));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addHeight(new Height(170));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(fitNus.getHeight(), new Height(170));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void weightTesting() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(fitNus.getWeight(), new Weight(45.0));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addWeight(new Weight(80));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(fitNus.getWeight(), new Weight(80));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    //Calorie testing"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void calorieTest() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        FitNus modelFitNus \u003d new FitNus();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Before adding any calorie"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(modelFitNus.getCalories(), 0);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(modelFitNus.getDailyCalorieList().size(), 0);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //After adding calorie"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        modelFitNus.addCalories(new Calorie(1000));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(modelFitNus.getCalories(), 1000);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(modelFitNus.getDailyCalorieList().size(), 1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //After deducting calories, calorie count should change but entry must remain"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        modelFitNus.minusCalories(new Calorie(1000));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(modelFitNus.getCalories(), 0);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(modelFitNus.getDailyCalorieList().size(), 1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void settingCalorieLogTest() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        FitNus modelFitNus \u003d new FitNus();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie modelDailyCalorie \u003d new DailyCalorie(LocalDate.of(2020, 7, 3));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie modelDailyCalorie1 \u003d new DailyCalorie(LocalDate.of(2020, 7, 4));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie modelDailyCalorie2 \u003d new DailyCalorie(LocalDate.of(2020, 7, 5));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie modelDailyCalorie3 \u003d new DailyCalorie(LocalDate.of(2020, 7, 6));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie modelDailyCalorie4 \u003d new DailyCalorie(LocalDate.of(2020, 7, 7));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie modelDailyCalorie5 \u003d new DailyCalorie(LocalDate.of(2020, 7, 8));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie modelDailyCalorie6 \u003d new DailyCalorie(LocalDate.of(2020, 7, 9));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cDailyCalorie\u003e modelCalorieLog \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        modelCalorieLog.add(modelDailyCalorie);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        modelCalorieLog.add(modelDailyCalorie1);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        modelCalorieLog.add(modelDailyCalorie2);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        modelCalorieLog.add(modelDailyCalorie3);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        modelCalorieLog.add(modelDailyCalorie4);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        modelCalorieLog.add(modelDailyCalorie5);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        modelCalorieLog.add(modelDailyCalorie6);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        modelFitNus.addCalorieEntries(modelCalorieLog);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(modelFitNus.getDailyCalorieList().size(), 7);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Adding a new calorie entry will delete oldest one and maintain a 7 day long log."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(modelFitNus.hasDailyCalorie(modelDailyCalorie));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        modelFitNus.addCalories(new Calorie(1000));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(modelFitNus.getCalories(), 1000);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(modelFitNus.getDailyCalorieList().size(), 7);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(modelFitNus.hasDailyCalorie(modelDailyCalorie));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    //Routine tests"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void resetData_withDuplicateRoutines_throwsDuplicateRoutineException() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // Two Routines with the same identity fields"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine copyRoutine \u003d new Routine(new Name(\"Leg Day\"));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cRoutine\u003e newRoutines \u003d Arrays.asList(LEG_DAY, copyRoutine);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        FitNusRoutinesStub newData \u003d new FitNusRoutinesStub(newRoutines);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DuplicateRoutineException.class, () -\u003e fitNus.resetData(newData));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void hasRoutine_nullRoutine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fitNus.hasRoutine(null));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasRoutine_missingRoutine_returnsFalse() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(fitNus.hasRoutine(LEG_DAY));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void hasRoutine_routineInFitNus_returnsTrue() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addRoutine(LEG_DAY);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(fitNus.hasRoutine(LEG_DAY));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void hasRoutine_routineWithSameIdentityFieldsInFitNus_returnsTrue() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addRoutine(LEG_DAY);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine copyRoutine \u003d new Routine(new Name(\"Leg Day\"));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(fitNus.hasRoutine(copyRoutine));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void getRoutineList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e fitNus.getRoutineList().remove(0));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addExerciseToRoutine_success() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        FitNus fitNus \u003d new FitNus();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addRoutine(LEG_DAY);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Exercise newExercise \u003d new Exercise(new Name(\"Amazing\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addExerciseToRoutine(LEG_DAY, newExercise);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(fitNus.getRoutineList().get(0).hasExercise(newExercise));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setExercise_successForRoutine() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        LEG_DAY.addExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addRoutine(LEG_DAY);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Exercise copyExercise \u003d new Exercise(new Name(\"Bench\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.setExercise(BENCH_PRESS, copyExercise);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(fitNus.getRoutineList().get(0).hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(fitNus.getRoutineList().get(0).hasExercise(copyExercise));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteExercise_successForRoutine() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        FitNus fitNus \u003d new FitNus();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addRoutine(LEG_DAY);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(fitNus.getRoutineList().get(0).hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.removeExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(fitNus.getRoutineList().get(0).hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(fitNus.hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void removeRoutine_successForRoutine() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        LEG_DAY.addExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addRoutine(LEG_DAY);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(fitNus.hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(fitNus.hasRoutine(LEG_DAY));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.removeRoutine(LEG_DAY);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(fitNus.hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(fitNus.hasRoutine(LEG_DAY));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void deleteExerciseFromRoutine_successForRoutine() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        LEG_DAY.addExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addRoutine(LEG_DAY);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(fitNus.getRoutineList().get(0).hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.deleteExerciseFromRoutine(LEG_DAY, BENCH_PRESS);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(fitNus.getRoutineList().get(0).hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(fitNus.hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void retrieveRoutine_success() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addRoutine(LEG_DAY);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(fitNus.retrieveRoutine(LEG_DAY), LEG_DAY);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void retrieveRoutine_invalidRoutine() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        fitNus.addRoutine(LEG_DAY);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertNotEquals(fitNus.retrieveRoutine(LEG_DAY), UPPER_BODY);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    // Timetable tests"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void resetData_withDuplicateSlots_throwsDuplicateSlotException() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // Two slots with the same identity fields"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        List\u003cSlot\u003e slots \u003d Arrays.asList(LEG_DAY_WEDNESDAY_1600_1800, LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        FitNusSlotsStub newData \u003d new FitNusSlotsStub(slots);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(DuplicateSlotException.class, () -\u003e fitNus.resetData(newData));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void resetData_withOverlappingSlots_throwsSlotOverlapDurationException() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // Two slots with overlapping durations"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        List\u003cSlot\u003e slots \u003d Arrays.asList(LEG_DAY_WEDNESDAY_1600_1800, LEG_DAY_WEDNESDAY_1630_1730);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        FitNusSlotsStub newData \u003d new FitNusSlotsStub(slots);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(SlotOverlapDurationException.class, () -\u003e fitNus.resetData(newData));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasSlot_nullSlot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fitNus.hasSlot(null));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasSlot_slotNotInTimetable_returnsFalse() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(fitNus.hasSlot(LEG_DAY_WEDNESDAY_1600_1800));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasSlot_slotInFitNus_returnsTrue() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        fitNus.addSlotToTimetable(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(fitNus.hasSlot(LEG_DAY_WEDNESDAY_1600_1800));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasOverlappingDurationInSlot_nullSlot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e fitNus.hasOverlappingDurationInSlot(null));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasOverlappingDurationInSlot_noOverlap_returnsFalse() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        fitNus.addSlotToTimetable(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(fitNus.hasOverlappingDurationInSlot(MA1101R_THURSDAY_1600_1800));"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasOverlappingDurationInSlot_overlap_returnsTrue() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        fitNus.addSlotToTimetable(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(fitNus.hasOverlappingDurationInSlot(LEG_DAY_WEDNESDAY_1630_1730));"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void getSlotList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e fitNus.getSlotList().remove(0));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addSlotToTimetable_validSlot_success() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        fitNus.addSlotToTimetable(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(LEG_DAY_WEDNESDAY_1600_1800, fitNus.getSlotList().get(0));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addSlotToTimetable_duplicateSlot_throwsDuplicateSlotException() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        fitNus.addSlotToTimetable(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(DuplicateSlotException.class, () -\u003e fitNus.addSlotToTimetable(LEG_DAY_WEDNESDAY_1600_1800));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void addSlotToTimetable_overlapSlot_throwsSlotOverlapDurationException() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        fitNus.addSlotToTimetable(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(SlotOverlapDurationException.class, () -\u003e fitNus.addSlotToTimetable(LEG_DAY_WEDNESDAY_1630_1730));"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void removeSlotFromTimetable_validSlot_success() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        fitNus.addSlotToTimetable(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(LEG_DAY_WEDNESDAY_1600_1800, fitNus.getSlotList().get(0));"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        fitNus.removeSlotFromTimetable(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(fitNus.getSlotList().isEmpty());"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * A stub ReadOnlyFitNus whose lesson list can violate interface constraints."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static class FitNusLessonsStub implements ReadOnlyFitNus {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        private final ObservableList\u003cExercise\u003e exercises \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        private final ObservableList\u003cLesson\u003e lessons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private final ObservableList\u003cRoutine\u003e routines \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        private final ObservableList\u003cSlot\u003e slots \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private final ObservableList\u003cDailyCalorie\u003e calorieLog \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private final ObservableList\u003cBody\u003e body \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        FitNusLessonsStub(Collection\u003cLesson\u003e lessons) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            this.lessons.setAll(lessons);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cExercise\u003e getExerciseList() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return exercises;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cRoutine\u003e getRoutineList() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return routines;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return lessons;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cSlot\u003e getSlotList() {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return slots;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cDailyCalorie\u003e getDailyCalorieList() {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return calorieLog;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cBody\u003e getBody() {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return body;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     * A stub ReadOnlyFitNus whose activity list can violate interface constraints."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static class FitNusRoutinesStub implements ReadOnlyFitNus {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private final ObservableList\u003cExercise\u003e exercises \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private final ObservableList\u003cLesson\u003e lessons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private final ObservableList\u003cRoutine\u003e routines \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private final ObservableList\u003cSlot\u003e slots \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private final ObservableList\u003cDailyCalorie\u003e calorieLog \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        private final ObservableList\u003cBody\u003e body \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        FitNusRoutinesStub(Collection\u003cRoutine\u003e routines) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            this.routines.setAll(routines);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        public ObservableList\u003cExercise\u003e getExerciseList() {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            return exercises;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cRoutine\u003e getRoutineList() {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return routines;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            return lessons;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public ObservableList\u003cSlot\u003e getSlotList() {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return slots;"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cDailyCalorie\u003e getDailyCalorieList() {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return calorieLog;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        public ObservableList\u003cBody\u003e getBody() {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            return body;"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "patricktan6"
        },
        "content": "        }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * A stub ReadOnlyFitNus whose slot list can violate interface constraints."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static class FitNusSlotsStub implements ReadOnlyFitNus {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        private final ObservableList\u003cExercise\u003e exercises \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        private final ObservableList\u003cLesson\u003e lessons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        private final ObservableList\u003cRoutine\u003e routines \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        private final ObservableList\u003cSlot\u003e slots \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        private final ObservableList\u003cDailyCalorie\u003e calorieLog \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        private final ObservableList\u003cBody\u003e body \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        FitNusSlotsStub(Collection\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            this.slots.setAll(slots);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public ObservableList\u003cExercise\u003e getExerciseList() {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return exercises;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public ObservableList\u003cRoutine\u003e getRoutineList() {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return routines;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public ObservableList\u003cLesson\u003e getLessonList() {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return lessons;"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public ObservableList\u003cSlot\u003e getSlotList() {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return slots;"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public ObservableList\u003cDailyCalorie\u003e getDailyCalorieList() {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return calorieLog;"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        public ObservableList\u003cBody\u003e getBody() {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            return body;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 43,
      "nicholasyeo": 152,
      "patricktan6": 2,
      "-": 56,
      "khor-jingqian": 284,
      "Licheng-Wu": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_LESSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.GEH1030;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.GES1028;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.LessonNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.FitNusBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(new FitNus(), new FitNus(modelManager.getFitNus()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        userPrefs.setFitNusFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        userPrefs.setFitNusFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setFitNusFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setFitNusFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setFitNusFilePath_validPath_setsFitNusFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        modelManager.setFitNusFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(path, modelManager.getFitNusFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void hasLesson_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasLesson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void hasLesson_lessonNotInFitNus_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(modelManager.hasLesson(GES1028));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void hasLesson_lessonInFitNus_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        modelManager.addLesson(GES1028);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(modelManager.hasLesson(GES1028));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void getFilteredLessonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredLessonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        FitNus fitNus \u003d new FitNusBuilder().withLesson(GES1028).withLesson(GEH1030).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        FitNus differentFitNus \u003d new FitNus();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        modelManager \u003d new ModelManager(fitNus, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(fitNus, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different fitNus -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentFitNus, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different filteredLessonList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String[] keywords \u003d GES1028.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        modelManager.updateFilteredLessonList(new LessonNameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(fitNus, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        modelManager.updateFilteredLessonList(PREDICATE_SHOW_ALL_LESSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        differentUserPrefs.setFitNusFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(fitNus, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 35,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setFitNusFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setFitNusFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/body/BodyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class BodyTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Body sampleBody \u003d new Body();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Body sampleBody2 \u003d new Body();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Height sampleHeight \u003d new Height(170);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Height sampleHeight2 \u003d new Height(170);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Height sampleHeight3 \u003d new Height(190);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Weight sampleWeight \u003d new Weight(70);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Weight sampleWeight2 \u003d new Weight(70);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Weight sampleWeight3 \u003d new Weight(80);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void isSameBody() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // Body with empty fields --\u003e return True"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleBody.equals(sampleBody2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleBody.equals(sampleBody));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(sampleBody.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleBody.hashCode() \u003d\u003d sampleBody.hashCode());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(sampleBody.hashCode() !\u003d sampleBody2.hashCode());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // 1 body has height set, the other does not --\u003e return False"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        sampleBody.setHeight(sampleHeight);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(sampleBody.equals(sampleBody2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // Both body set same height --\u003e return True"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        sampleBody2.setHeight(sampleHeight);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleBody.equals(sampleBody2));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // 1 body has weight set, the other does not --\u003e return False"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        sampleBody.setWeight(sampleWeight);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(sampleBody.equals(sampleBody2));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // Both body set same weight --\u003e return True"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        sampleBody2.setWeight(sampleWeight);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleBody.equals(sampleBody2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // Both body set different weight, same height --\u003e return False"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        sampleBody2.setWeight(sampleWeight3);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(sampleBody.equals(sampleBody2));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // Both body set different height, same weight --\u003e return False"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        sampleBody2.setWeight(sampleWeight);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        sampleBody2.setHeight(sampleHeight3);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(sampleBody.equals(sampleBody2));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void bodyGetterMethods() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        sampleBody.setHeight(sampleHeight);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        sampleBody.setWeight(sampleWeight);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        sampleBody2.setHeight(sampleHeight2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        sampleBody2.setWeight(sampleWeight2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleBody.getWeight().equals(sampleWeight));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleBody.getHeight().equals(sampleHeight));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleBody2.getWeight().equals(sampleWeight2));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleBody2.getHeight().equals(sampleHeight2));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void bmiTest() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        double bmi \u003d sampleWeight.getWeight() / Math.pow((sampleHeight.getHeight() / 100.0), 2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        sampleBody.setWeight(sampleWeight);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        sampleBody.setHeight(sampleHeight);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(bmi \u003d\u003d sampleBody.getBmi());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleBody.toString().equals(sampleBody2.toString()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        sampleBody.setHeight(sampleHeight);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        sampleBody.setWeight(sampleWeight);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(sampleBody.toString().equals(sampleBody2.toString()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/model/body/HeightTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class HeightTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Height sampleHeight \u003d new Height(170.0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Height sampleHeight2 \u003d new Height(170.0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Height sampleHeight3 \u003d new Height(180.0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void isSameHeight() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleHeight.equals(sampleHeight2));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(sampleHeight.equals(sampleHeight3));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleHeight.getHeight() \u003d\u003d 170.0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleHeight2.getHeight() \u003d\u003d 170.0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleHeight3.getHeight() \u003d\u003d 180.0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void validityChecks() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // invalid format checks -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Height.isValidHeight(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Height.isValidHeight(\"170.000\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Height.isValidHeight(\"170.00.0\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // valid format checks -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Height.isValidHeight(\"170\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Height.isValidHeight(\"170.0\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Height.isValidHeight(\"170.00\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // invalid range checks -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Height.isValidHeight(-1));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Height.isValidHeight(-1.0));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Height.isValidHeight(0));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Height.isValidHeight(-0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Height.isValidHeight(-1000));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Height.isValidHeight(1000));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Height.isValidHeight(100));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Height.isValidHeight(250));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // valid range checks -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Height.isValidHeight(101));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(Height.isValidHeight(190));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Height.isValidHeight(249));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(sampleHeight.toString(), sampleHeight.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(sampleHeight2.toString(), sampleHeight.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertNotEquals(sampleHeight3.toString(), sampleHeight.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(sampleHeight.hashCode(), sampleHeight.hashCode());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertNotEquals(sampleHeight3.hashCode(), sampleHeight.hashCode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 23,
      "khor-jingqian": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/body/WeightTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.body;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class WeightTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Weight sampleWeight \u003d new Weight(70.0);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Weight sampleWeight2 \u003d new Weight(70.0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final Weight sampleWeight3 \u003d new Weight(80.0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void isSameWeight() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleWeight.equals(sampleWeight2));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(sampleWeight.equals(sampleWeight3));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleWeight.getWeight() \u003d\u003d 70.0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleWeight2.getWeight() \u003d\u003d 70.0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(sampleWeight3.getWeight() \u003d\u003d 80.0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void validityChecks() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // invalid format checks -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"-1\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"50.000\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Weight.isValidWeight(\"50.0.0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // valid format checks -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"70\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"70.0\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Weight.isValidWeight(\"70.00\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // invalid range checks -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Weight.isValidWeight(-1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Weight.isValidWeight(-1.0));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Weight.isValidWeight(0));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Weight.isValidWeight(-0));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Weight.isValidWeight(-1000));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Weight.isValidWeight(1000));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Weight.isValidWeight(200));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Weight.isValidWeight(30));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // valid range checks -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(Weight.isValidWeight(70));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Weight.isValidWeight(31));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Weight.isValidWeight(199));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(sampleWeight.toString(), sampleWeight.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(sampleWeight2.toString(), sampleWeight.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertNotEquals(sampleWeight3.toString(), sampleWeight.toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void hashCodeTest() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(sampleWeight.hashCode(), sampleWeight.hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertNotEquals(sampleWeight3.hashCode(), sampleWeight.hashCode());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 23,
      "khor-jingqian": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calorie/CalorieLogTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.calorie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.exceptions.DailyCalorieNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.calorie.exceptions.DuplicateDailyCalorieException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class CalorieLogTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final LocalDate testDate1 \u003d LocalDate.of(2020, 10, 28);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final LocalDate testDate2 \u003d LocalDate.of(2020, 10, 26);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final DailyCalorie d1 \u003d new DailyCalorie(testDate1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final DailyCalorie d2 \u003d new DailyCalorie(testDate1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final DailyCalorie d3 \u003d new DailyCalorie(testDate2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final CalorieLog l1 \u003d new CalorieLog();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final CalorieLog l2 \u003d new CalorieLog();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals_differentCalorieLog_returnsTrue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(l1.equals(l2));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals_differentCalorieLogWithDifferentDailyCalorie_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(l1.equals(l2));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals_differentCalorieLogWithSameDailyCalorie_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l2.add(d1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(l1.equals(l2));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void contains_nullCalorieLog_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e l1.contains(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void contains_dailyCalorieNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(l1.contains(d1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void contains_dailyCalorieInList_returnsTrue() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(l1.contains(d1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void contains_dailyCalorieWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(l1.contains(d2));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void add_nulldailyCalorie_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e l1.add(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void add_duplicateDailyCalorie_throwsDuplicateDailyCalorieException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DuplicateDailyCalorieException.class, () -\u003e l1.add(d1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalorie_nullTargetDailyCalorie_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e l1.setDailyCalorie(null, d1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalorie_nullEditedDailyCalorie_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e l1.setDailyCalorie(d1, null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalorie_targetDailyCalorieNotInList_throwsDailyCalorieNotFoundException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DailyCalorieNotFoundException.class, () -\u003e l1.setDailyCalorie(d1, d1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalorie_editedDailyCalorieIsSameDailyCalorie_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.setDailyCalorie(d1, d1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CalorieLog expectedCalorieLog \u003d new CalorieLog();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedCalorieLog.add(d1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(l1, expectedCalorieLog);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalorie_editedDailyCalorieHasSameIdentity_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.setDailyCalorie(d1, d2);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CalorieLog expectedCalorieLog \u003d new CalorieLog();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedCalorieLog.add(d2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(l1, expectedCalorieLog);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalorie_editedDailyCalorieHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.setDailyCalorie(d1, d2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CalorieLog expectedCalorieLog \u003d new CalorieLog();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedCalorieLog.add(d2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(l1, expectedCalorieLog);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalorie_editedDailyCalorieHasNonUniqueIdentity_throwsDuplicateDailyCalorieException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d3);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DuplicateDailyCalorieException.class, () -\u003e l1.setDailyCalorie(d1, d3));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void remove_nullDailyCalorie_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e l1.remove(null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void remove_dailyCalorieDoesNotExist_throwsDailyCalorieNotFoundException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DailyCalorieNotFoundException.class, () -\u003e l1.remove(d1));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void remove_existingDailyCalorie_removesDailyCalorie() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.remove(d1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CalorieLog expectedCalorieLog \u003d new CalorieLog();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedCalorieLog, l1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalories_nullUniqueDailyCalorieList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e l1.setDailyCalories((CalorieLog) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalories_uniqueDailyCalorieList_replacesOwnListWithProvidedCalorieLog() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CalorieLog expectedCalorieLog \u003d new CalorieLog();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedCalorieLog.add(d2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.setDailyCalories(expectedCalorieLog);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(l1, expectedCalorieLog);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalories_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e l1.setDailyCalories((List\u003cDailyCalorie\u003e) null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalories_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cDailyCalorie\u003e dailyCalorieList \u003d Collections.singletonList(d1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.setDailyCalories(dailyCalorieList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CalorieLog expectedCalorieLog \u003d new CalorieLog();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedCalorieLog.add(d1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedCalorieLog, l1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setDailyCalories_listWithDuplicateDailyCalories_throwsDuplicateDailyCalorieException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cDailyCalorie\u003e listWithDuplicateDailyCalories \u003d Arrays.asList(d1, d1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DuplicateDailyCalorieException.class, () -\u003e l1.setDailyCalories(listWithDuplicateDailyCalories));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e l1"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void containsTest() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(l1.contains(d1));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.add(d1);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(l1.contains(d1));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(l1.contains(d3));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addCaloriesTest() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CalorieLog l3 \u003d new CalorieLog();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(l3.getCalories(), 0);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Calorie calorie1000 \u003d new Calorie(1000);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        l3.addCalories(calorie1000);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(l3.getCalories(), 1000);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        l3.addCalories(calorie1000);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(l3.getCalories(), 2000);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie test \u003d new DailyCalorie(LocalDate.of(2020, 10, 5));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie test1 \u003d new DailyCalorie(LocalDate.of(2020, 10, 6));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie test2 \u003d new DailyCalorie(LocalDate.of(2020, 10, 7));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie test3 \u003d new DailyCalorie(LocalDate.of(2020, 10, 8));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie test4 \u003d new DailyCalorie(LocalDate.of(2020, 10, 9));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie test5 \u003d new DailyCalorie(LocalDate.of(2020, 10, 10));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie test6 \u003d new DailyCalorie(LocalDate.of(2020, 10, 11));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CalorieLog l4 \u003d new CalorieLog();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l4.add(test);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l4.add(test1);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l4.add(test2);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l4.add(test3);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l4.add(test4);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l4.add(test5);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l4.add(test6);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        l4.addCalories(calorie1000);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(l4.contains(test));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void minusCaloriesTest() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Calorie calorie1000 \u003d new Calorie(1000);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        l1.addCalories(calorie1000);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        l2.addCalories(calorie1000);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        l1.minusCalories(new Calorie(10));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(l1.getCalories() \u003d\u003d l2.getCalories());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie test \u003d new DailyCalorie(LocalDate.of(2020, 10, 5));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie test1 \u003d new DailyCalorie(LocalDate.of(2020, 10, 6));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie test2 \u003d new DailyCalorie(LocalDate.of(2020, 10, 7));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie test3 \u003d new DailyCalorie(LocalDate.of(2020, 10, 8));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie test4 \u003d new DailyCalorie(LocalDate.of(2020, 10, 9));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie test5 \u003d new DailyCalorie(LocalDate.of(2020, 10, 10));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie test6 \u003d new DailyCalorie(LocalDate.of(2020, 10, 11));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CalorieLog l4 \u003d new CalorieLog();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l4.add(test);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l4.add(test1);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l4.add(test2);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l4.add(test3);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l4.add(test4);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l4.add(test5);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l4.add(test6);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(DailyCalorieNotFoundException.class, () -\u003e l4.minusCalories(calorie1000));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setCalorieLogTest() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cDailyCalorie\u003e testList \u003d new ArrayList\u003cDailyCalorie\u003e();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        CalorieLog l \u003d new CalorieLog();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        testList.add(d1);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        testList.add(d3);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(l.equals(l2));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l.setCalorieLog(testList);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(l.equals(l2));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Iterator iterator \u003d l.iterator();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(iterator.next().equals(d1));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(iterator.next().equals(d3));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        testList.add(d1);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DuplicateDailyCalorieException.class, () -\u003e l.setCalorieLog(testList));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void miscellaneous() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cDailyCalorie\u003e testList \u003d new ArrayList\u003cDailyCalorie\u003e();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        testList.add(d1);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        testList.add(d3);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(l1.hashCode(), l2.hashCode());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        l1.setCalorieLog(testList);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertNotEquals(l1.hashCode(), l2.hashCode());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 2,
      "nicholasyeo": 9,
      "khor-jingqian": 278
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calorie/CalorieTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.calorie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class CalorieTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void isValidCalorie() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // invalid format checks -\u003e returns false"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Assertions.assertFalse(Calorie.isValidCalorie(\"-1\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(\"100.0\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(\"100.0.0\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // valid format checks -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Calorie.isValidCalorie(\"100\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // invalid range checks -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(-1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Calorie.isValidCalorie(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // valid range checks -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Calorie.isValidCalorie(1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Calorie.isValidCalorie(100));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 25,
      "khor-jingqian": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calorie/DailyCalorieTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.calorie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class DailyCalorieTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final LocalDate testDate1 \u003d LocalDate.of(2020, 10, 28);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final DailyCalorie d1 \u003d new DailyCalorie(testDate1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final DailyCalorie d2 \u003d new DailyCalorie(testDate1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void isSameDailyCalorie() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(d1.isSameDailyCalorie(d1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(d2.isSameDailyCalorie(d2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d1.isSameDailyCalorie(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d2.isSameDailyCalorie(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same LocalDate -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(d1.isSameDailyCalorie(d2));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same LocalDate, different calories -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        d1.addCalories(10);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(d1.isSameDailyCalorie(d2));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same LocalDate, same calories -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        d2.addCalories(10);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(d1.isSameDailyCalorie(d2));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        LocalDate testDate2 \u003d LocalDate.of(2020, 10, 26);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie d3 \u003d new DailyCalorie(testDate2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same values with no calories -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(d1.equals(d2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(d1.equals(d1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(d2.equals(d2));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d1.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d2.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d1.equals(5));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same LocalDate, different DailyCalorie -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        d2.addCalories(1500);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d1.equals(d2));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different LocalDate, same DailyCalorie -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d1.equals(d3));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different LocalDate, different DailyCalorie -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d2.equals(d3));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void minus() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        d1.addCalories(1000);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        d2.addCalories(1000);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        d1.minusCalories(10);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(d1.getCalories() \u003d\u003d d2.getCalories());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        d2.minusCalories(10);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(d1.getCalories(), d2.getCalories());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void miscellaneous() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(d1.hashCode(), d1.hashCode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(d1.toString(), d2.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        d2.addCalories(10);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertNotEquals(d1.hashCode(), d2.hashCode());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertNotEquals(d1.toString(), d2.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(d1.compareTo(d2), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        DailyCalorie d3 \u003d new DailyCalorie(LocalDate.now());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(d1.compareTo(d3), -1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseNameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate firstPredicate \u003d new ExerciseNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate secondPredicate \u003d new ExerciseNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate firstPredicateCopy \u003d new ExerciseNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different exercise -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void test_exerciseNameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate predicate \u003d new ExerciseNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                Collections.singletonList(\"Squats\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(predicate.test(new ExerciseBuilder().withName(\"Squats Bench\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        predicate \u003d new ExerciseNameContainsKeywordsPredicate(Arrays.asList(\"Squats\", \"Bench\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(predicate.test(new ExerciseBuilder().withName(\"Squats Bench\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        predicate \u003d new ExerciseNameContainsKeywordsPredicate(Arrays.asList(\"sQuaTs\", \"BenCh\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(predicate.test(new ExerciseBuilder().withName(\"Squats Bench\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void test_exerciseNameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        ExerciseNameContainsKeywordsPredicate predicate \u003d new ExerciseNameContainsKeywordsPredicate(Arrays"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .asList(\"Squats\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(predicate.test(new ExerciseBuilder().withName(\"Bench Shoulders\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseNameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void constructor_invalidExerciseName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void isValidExerciseName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // null exercise name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // invalid exercise name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(Name.isValidName(\"Squats*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // valid exercise name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(Name.isValidName(\"squats\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(Name.isValidName(\"4515\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(Name.isValidName(\"P90x\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(Name.isValidName(\"Squats\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(Name.isValidName(\"F45 HIIT Session\")); // long names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "nicholasyeo": 1,
      "-": 26,
      "Licheng-Wu": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/ExerciseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXERCISE_NAME_SQUATS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXERCISE_TAG_CHEST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXERCISE_TAG_LEGS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.SQUATS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void asObservableExerciseList_modifyExerciseList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise exercise \u003d new ExerciseBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e exercise.getTags().remove(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void isSameExercise() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(BENCH_PRESS.isSameExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(BENCH_PRESS.isSameExercise(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise editedBenchPress \u003d new ExerciseBuilder(BENCH_PRESS).withName(VALID_EXERCISE_NAME_SQUATS).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(BENCH_PRESS.isSameExercise(editedBenchPress));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // same name, different tags -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        editedBenchPress \u003d new ExerciseBuilder(BENCH_PRESS).withTags(VALID_EXERCISE_TAG_CHEST).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(BENCH_PRESS.isSameExercise(editedBenchPress));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise benchPressCopy \u003d new ExerciseBuilder(BENCH_PRESS).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(BENCH_PRESS.equals(benchPressCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(BENCH_PRESS.equals(BENCH_PRESS));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(BENCH_PRESS.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(BENCH_PRESS.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different exercise -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(BENCH_PRESS.equals(SQUATS));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise editedBenchPress \u003d new ExerciseBuilder(BENCH_PRESS).withName(VALID_EXERCISE_NAME_SQUATS).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(BENCH_PRESS.equals(editedBenchPress));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        editedBenchPress \u003d new ExerciseBuilder(BENCH_PRESS).withTags(VALID_EXERCISE_TAG_LEGS).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(BENCH_PRESS.equals(editedBenchPress));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/model/exercise/UniqueExerciseListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.model.exercise;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXERCISE_TAG_CHEST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.SQUATS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.exercise.exceptions.DuplicateExerciseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.testutil.ExerciseBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class UniqueExerciseListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private final UniqueExerciseList uniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void contains_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void contains_exerciseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertFalse(uniqueExerciseList.contains(BENCH_PRESS));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void contains_exerciseInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(uniqueExerciseList.contains(BENCH_PRESS));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void contains_exerciseWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise editedBenchPress \u003d new ExerciseBuilder(BENCH_PRESS).withTags(VALID_EXERCISE_TAG_CHEST).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertTrue(uniqueExerciseList.contains(editedBenchPress));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void add_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void add_duplicateExercise_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList.add(BENCH_PRESS));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercise_nullTargetExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercise(null, BENCH_PRESS));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercise_nullEditedExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercise(BENCH_PRESS, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercise_targetExerciseNotInList_throwsExerciseNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertThrows(ExerciseNotFoundException.class, () -\u003e uniqueExerciseList.setExercise(BENCH_PRESS, BENCH_PRESS));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercise_editedExerciseIsSameExercise_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.setExercise(BENCH_PRESS, BENCH_PRESS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        expectedUniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercise_editedExerciseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Exercise editedBenchPress \u003d new ExerciseBuilder(BENCH_PRESS).withTags(VALID_EXERCISE_TAG_CHEST)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.setExercise(BENCH_PRESS, editedBenchPress);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        expectedUniqueExerciseList.add(editedBenchPress);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercise_editedExerciseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.setExercise(BENCH_PRESS, SQUATS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        expectedUniqueExerciseList.add(SQUATS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercise_editedExerciseHasNonUniqueIdentity_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.add(SQUATS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList.setExercise(BENCH_PRESS, SQUATS));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void remove_nullExercise_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.remove(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void remove_exerciseDoesNotExist_throwsExerciseNotFoundException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertThrows(ExerciseNotFoundException.class, () -\u003e uniqueExerciseList.remove(BENCH_PRESS));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void remove_existingExercise_removesExercise() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.remove(BENCH_PRESS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercises_nullUniqueExerciseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercises((UniqueExerciseList) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercises_uniqueExerciseList_replacesOwnListWithProvidedUniqueExerciseList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        expectedUniqueExerciseList.add(SQUATS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.setExercises(expectedUniqueExerciseList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercises_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExerciseList.setExercises((List\u003cExercise\u003e) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercises_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.add(BENCH_PRESS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        List\u003cExercise\u003e exerciseList \u003d Collections.singletonList(SQUATS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        uniqueExerciseList.setExercises(exerciseList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        UniqueExerciseList expectedUniqueExerciseList \u003d new UniqueExerciseList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        expectedUniqueExerciseList.add(SQUATS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertEquals(expectedUniqueExerciseList, uniqueExerciseList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void setExercises_listWithDuplicateExercises_throwsDuplicateExerciseException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        List\u003cExercise\u003e listWithDuplicateExercises \u003d Arrays.asList(BENCH_PRESS, BENCH_PRESS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertThrows(DuplicateExerciseException.class, () -\u003e uniqueExerciseList"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                .setExercises(listWithDuplicateExercises));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "                uniqueExerciseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/LessonNameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonNameContainsKeywordsPredicate firstPredicate \u003d new LessonNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonNameContainsKeywordsPredicate secondPredicate \u003d new LessonNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonNameContainsKeywordsPredicate firstPredicateCopy \u003d new LessonNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different lesson -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void test_lessonNameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonNameContainsKeywordsPredicate predicate \u003d new LessonNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                Collections.singletonList(\"GES1028\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(predicate.test(new LessonBuilder().withName(\"GES1028 CS2106\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        predicate \u003d new LessonNameContainsKeywordsPredicate(Arrays.asList(\"GES1028\", \"CS2106\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(predicate.test(new LessonBuilder().withName(\"GES1028 CS2106\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        predicate \u003d new LessonNameContainsKeywordsPredicate(Arrays.asList(\"CS2106\", \"GET1011\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(predicate.test(new LessonBuilder().withName(\"GES1028 GET1011\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        predicate \u003d new LessonNameContainsKeywordsPredicate(Arrays.asList(\"gEs1028\", \"cs2106\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(predicate.test(new LessonBuilder().withName(\"GES1028 CS2106\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void test_lessonNameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        LessonNameContainsKeywordsPredicate predicate \u003d new LessonNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(predicate.test(new LessonBuilder().withName(\"GES1028\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        predicate \u003d new LessonNameContainsKeywordsPredicate(Arrays.asList(\"GET1011\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(predicate.test(new LessonBuilder().withName(\"GES1028 CS2106\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/LessonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_NAME_CS2106;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_TAG_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.CS2106;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.GES1028;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void asObservableLessonList_modifyLessonList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e lesson.getTags().remove(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void isSameLesson() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(GES1028.isSameLesson(GES1028));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(GES1028.isSameLesson(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson editedGes1028 \u003d new LessonBuilder(GES1028).withName(VALID_LESSON_NAME_CS2106).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(GES1028.isSameLesson(editedGes1028));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same name, different tags -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        editedGes1028 \u003d new LessonBuilder(GES1028).withTags(VALID_LESSON_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(GES1028.isSameLesson(editedGes1028));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson ges1028Copy \u003d new LessonBuilder(GES1028).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(GES1028.equals(ges1028Copy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(GES1028.equals(GES1028));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(GES1028.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(GES1028.equals(5));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        // different lesson -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(GES1028.equals(CS2106));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson editedGes1028 \u003d new LessonBuilder(GES1028).withName(VALID_LESSON_NAME_CS2106).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(GES1028.equals(editedGes1028));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        editedGes1028 \u003d new LessonBuilder(GES1028).withTags(VALID_LESSON_TAG_LECTURE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(GES1028.equals(editedGes1028));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 65,
      "Licheng-Wu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/lesson/UniqueLessonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.model.lesson;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_TAG_EASY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.CS2106;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.GES1028;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.exceptions.DuplicateLessonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.exceptions.LessonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class UniqueLessonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private final UniqueLessonList uniqueLessonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void contains_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void contains_lessonNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(uniqueLessonList.contains(GES1028));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void contains_lessonInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.add(GES1028);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(uniqueLessonList.contains(GES1028));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void contains_lessonWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.add(GES1028);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson editedGes1028 \u003d new LessonBuilder(GES1028).withTags(VALID_LESSON_TAG_EASY).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertTrue(uniqueLessonList.contains(editedGes1028));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void add_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void add_duplicateLesson_throwsDuplicateLessonException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.add(GES1028);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(DuplicateLessonException.class, () -\u003e uniqueLessonList.add(GES1028));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLesson_nullTargetLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.setLesson(null, GES1028));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLesson_nullEditedLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.setLesson(GES1028, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLesson_targetLessonNotInList_throwsLessonNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(LessonNotFoundException.class, () -\u003e uniqueLessonList.setLesson(GES1028, GES1028));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLesson_editedLessonIsSameLesson_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.add(GES1028);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.setLesson(GES1028, GES1028);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        UniqueLessonList expectedUniqueLessonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedUniqueLessonList.add(GES1028);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(expectedUniqueLessonList, uniqueLessonList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLesson_editedLessonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.add(GES1028);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Lesson editedGes1028 \u003d new LessonBuilder(GES1028).withTags(VALID_LESSON_TAG_EASY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.setLesson(GES1028, editedGes1028);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        UniqueLessonList expectedUniqueLessonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedUniqueLessonList.add(editedGes1028);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(expectedUniqueLessonList, uniqueLessonList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLesson_editedLessonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.add(GES1028);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.setLesson(GES1028, CS2106);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        UniqueLessonList expectedUniqueLessonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedUniqueLessonList.add(CS2106);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(expectedUniqueLessonList, uniqueLessonList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLesson_editedLessonHasNonUniqueIdentity_throwsDuplicateLessonException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.add(GES1028);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.add(CS2106);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(DuplicateLessonException.class, () -\u003e uniqueLessonList.setLesson(GES1028, CS2106));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void remove_nullLesson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.remove(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void remove_lessonDoesNotExist_throwsLessonNotFoundException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(LessonNotFoundException.class, () -\u003e uniqueLessonList.remove(GES1028));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void remove_existingLesson_removesLesson() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.add(GES1028);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.remove(GES1028);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        UniqueLessonList expectedUniqueLessonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(expectedUniqueLessonList, uniqueLessonList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLessons_nullUniqueLessonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.setLessons((UniqueLessonList) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLessons_uniqueLessonList_replacesOwnListWithProvidedUniqueLessonList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.add(GES1028);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        UniqueLessonList expectedUniqueLessonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedUniqueLessonList.add(CS2106);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.setLessons(expectedUniqueLessonList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(expectedUniqueLessonList, uniqueLessonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLessons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueLessonList.setLessons((List\u003cLesson\u003e) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLessons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.add(GES1028);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        List\u003cLesson\u003e lessonList \u003d Collections.singletonList(CS2106);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        uniqueLessonList.setLessons(lessonList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        UniqueLessonList expectedUniqueLessonList \u003d new UniqueLessonList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        expectedUniqueLessonList.add(CS2106);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(expectedUniqueLessonList, uniqueLessonList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void setLessons_listWithDuplicateLessons_throwsDuplicateLessonException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        List\u003cLesson\u003e listWithDuplicateLessons \u003d Arrays.asList(GES1028, GES1028);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(DuplicateLessonException.class, () -\u003e uniqueLessonList.setLessons(listWithDuplicateLessons));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                uniqueLessonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/model/routine/RoutineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.routine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.SQUATS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.LEG_DAY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.UPPER_BODY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class RoutineTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void isSameRoutine() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(UPPER_BODY.isSameActivity(UPPER_BODY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(LEG_DAY.isSameActivity(LEG_DAY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(UPPER_BODY.hashCode(), UPPER_BODY.hashCode());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertNotEquals(UPPER_BODY.hashCode(), LEG_DAY.hashCode());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //different object -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(LEG_DAY.isSameActivity(UPPER_BODY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(UPPER_BODY.isSameActivity(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(LEG_DAY.isSameActivity(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same Name, one has Exercise and the other does not -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine editedRoutine \u003d new Routine(new Name(\"Leg Day\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name editedName \u003d new Name(\"Leg Extensions\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Exercise typicalExercise \u003d new Exercise(editedName, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        editedRoutine.addExercise(typicalExercise);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(LEG_DAY.isSameActivity(editedRoutine));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void isSameExercise() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine newRoutine \u003d new Routine(new Name(\"Abs\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(newRoutine.hasExercise(SQUATS));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        newRoutine.addExercise(SQUATS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(newRoutine.hasExercise(SQUATS));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(newRoutine.hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        newRoutine.deleteExercise(SQUATS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(newRoutine.hasExercise(SQUATS));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine newRoutine \u003d new Routine(new Name(\"Leg Day\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name copyName \u003d new Name(\"Leg Day\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine copyRoutine \u003d new Routine(copyName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(newRoutine.equals(copyRoutine));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(LEG_DAY.equals(LEG_DAY));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(UPPER_BODY.equals(UPPER_BODY));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(LEG_DAY.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(LEG_DAY.equals(5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different routine -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(LEG_DAY.equals(UPPER_BODY));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(UPPER_BODY.equals(copyRoutine));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // different exercises -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name editedName \u003d new Name(\"Leg Extensions\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Exercise typicalExercise \u003d new Exercise(editedName, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        copyRoutine.addExercise(typicalExercise);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(LEG_DAY.equals(copyRoutine));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(LEG_DAY.toString().equals(UPPER_BODY.toString()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "nicholasyeo": 6,
      "khor-jingqian": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/model/routine/UniqueRoutineListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.model.routine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.BENCH_PRESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.SQUATS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.LEG_DAY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.UPPER_BODY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.exceptions.ExerciseNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.exceptions.DuplicateRoutineException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.exceptions.RoutineNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class UniqueRoutineListTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private final UniqueRoutineList uniqueRoutineList \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void contains_nullRoutine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoutineList.contains(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void contains_routineNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(uniqueRoutineList.contains(LEG_DAY));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void contains_routineInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(uniqueRoutineList.contains(LEG_DAY));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void contains_routineWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name copyName \u003d new Name(\"Leg Day\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine copyRoutine \u003d new Routine(copyName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(uniqueRoutineList.contains(copyRoutine));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void add_nullRoutine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoutineList.add(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void add_duplicateRoutine_throwsDuplicateRoutineException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DuplicateRoutineException.class, () -\u003e uniqueRoutineList.add(LEG_DAY));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutine_nullTargetRoutine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoutineList.setRoutine(null, LEG_DAY));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutine_nullEditedRoutine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoutineList.setRoutine(LEG_DAY, null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutine_targetRoutineNotInList_throwsRoutineNotFoundException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(RoutineNotFoundException.class, () -\u003e uniqueRoutineList.setRoutine(LEG_DAY, LEG_DAY));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutine_editedRoutineIsSameRoutine_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.setRoutine(LEG_DAY, LEG_DAY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        UniqueRoutineList expectedUniqueRoutineList \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedUniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedUniqueRoutineList, uniqueRoutineList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutine_editedRoutineHasSameIdentity_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name copyName \u003d new Name(\"Leg Day\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine copyRoutine \u003d new Routine(copyName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.setRoutine(LEG_DAY, copyRoutine);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        UniqueRoutineList expectedUniqueRoutineList \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedUniqueRoutineList.add(copyRoutine);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedUniqueRoutineList, uniqueRoutineList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutine_editedRoutineHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.setRoutine(LEG_DAY, UPPER_BODY);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        UniqueRoutineList expectedUniqueRoutineList \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedUniqueRoutineList.add(UPPER_BODY);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedUniqueRoutineList, uniqueRoutineList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutine_editedRoutineHasNonUniqueIdentity_throwsDuplicateRoutineException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(UPPER_BODY);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DuplicateRoutineException.class, () -\u003e uniqueRoutineList.setRoutine(LEG_DAY, UPPER_BODY));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void remove_nullRoutine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoutineList.remove(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void remove_routineDoesNotExist_throwsRoutineNotFoundException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(RoutineNotFoundException.class, () -\u003e uniqueRoutineList.remove(LEG_DAY));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void remove_existingRoutine_removesRoutine() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.remove(LEG_DAY);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        UniqueRoutineList expectedUniqueRoutineList \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedUniqueRoutineList, uniqueRoutineList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutines_nullUniqueRoutineList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoutineList.setRoutines((UniqueRoutineList) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutines_uniqueRoutineList_replacesOwnListWithProvideduniqueRoutineList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        UniqueRoutineList expectedUniqueRoutineList \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedUniqueRoutineList.add(UPPER_BODY);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.setRoutines(expectedUniqueRoutineList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedUniqueRoutineList, uniqueRoutineList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutines_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRoutineList.setRoutines((List\u003cRoutine\u003e) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutines_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cRoutine\u003e routineList \u003d Collections.singletonList(UPPER_BODY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.setRoutines(routineList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        UniqueRoutineList expectedUniqueRoutineList \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedUniqueRoutineList.add(UPPER_BODY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedUniqueRoutineList, uniqueRoutineList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void setRoutines_listWithDuplicateRoutines_throwsDuplicateRoutineException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        List\u003cRoutine\u003e listWithDuplicateRoutines \u003d Arrays.asList(LEG_DAY, LEG_DAY);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(DuplicateRoutineException.class, () -\u003e uniqueRoutineList.setRoutines(listWithDuplicateRoutines));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueRoutineList"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void addExercise() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        UniqueRoutineList uniqueRoutineList \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine legDay \u003d new Routine(new Name(\"Leg Day\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(RoutineNotFoundException.class, () -\u003e uniqueRoutineList.addExercise(LEG_DAY, SQUATS));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(legDay);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.addExercise(legDay, SQUATS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Iterator\u003cRoutine\u003e iterator \u003d uniqueRoutineList.iterator();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(iterator.next().hasExercise(SQUATS));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void testCheckSize() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(uniqueRoutineList.checkSize(), 0);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(uniqueRoutineList.checkSize(), 1);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void testIterator() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(UPPER_BODY);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Iterator\u003cRoutine\u003e iterator \u003d uniqueRoutineList.iterator();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routine \u003d iterator.next();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(routine, LEG_DAY);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine routine1 \u003d iterator.next();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(routine1, UPPER_BODY);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        UniqueRoutineList uniqueRoutineList1 \u003d new UniqueRoutineList();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList1.add(UPPER_BODY);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(uniqueRoutineList.hashCode(), uniqueRoutineList.hashCode());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertNotEquals(uniqueRoutineList.hashCode(), uniqueRoutineList1.hashCode());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void testRetrieveRoutine() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(UPPER_BODY);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(uniqueRoutineList.retrieveRoutine(UPPER_BODY), UPPER_BODY);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertNotEquals(uniqueRoutineList.retrieveRoutine(UPPER_BODY), LEG_DAY);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void testDelete() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(UPPER_BODY);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(RoutineNotFoundException.class, () -\u003e uniqueRoutineList.deleteExerciseFromRoutine("
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                LEG_DAY, BENCH_PRESS"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(ExerciseNotFoundException.class, () -\u003e uniqueRoutineList.deleteExerciseFromRoutine("
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                UPPER_BODY, BENCH_PRESS"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.addExercise(UPPER_BODY, BENCH_PRESS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(UPPER_BODY.hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.deleteExerciseFromRoutine(UPPER_BODY, BENCH_PRESS);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(UPPER_BODY.hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.addExercise(UPPER_BODY, BENCH_PRESS);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.addExercise(LEG_DAY, BENCH_PRESS);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.deleteExercise(BENCH_PRESS);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(UPPER_BODY.hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(LEG_DAY.hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void testSetExercise() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(UPPER_BODY);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.add(LEG_DAY);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.addExercise(UPPER_BODY, BENCH_PRESS);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.addExercise(LEG_DAY, BENCH_PRESS);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Exercise newExercise \u003d new Exercise(new Name(\"Bench\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        uniqueRoutineList.setExercise(BENCH_PRESS, newExercise);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Routine routine : uniqueRoutineList) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertTrue(routine.hasExercise(newExercise));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertFalse(routine.hasExercise(BENCH_PRESS));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 4,
      "nicholasyeo": 1,
      "khor-jingqian": 265
    }
  },
  {
    "path": "src/test/java/seedu/address/model/timetable/DayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class DayTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Day MONDAY \u003d Day.MONDAY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Day TUESDAY \u003d Day.TUESDAY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Day WEDNESDAY \u003d Day.WEDNESDAY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Day THURSDAY \u003d Day.THURSDAY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Day FRIDAY \u003d Day.FRIDAY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Day INVALID_DAY \u003d Day.UNKNOWN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void getDayEnum() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // valid days"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(MONDAY, Day.getDayEnum(\"monday\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(TUESDAY, Day.getDayEnum(\"tuesday\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(WEDNESDAY, Day.getDayEnum(\"wednesday\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(THURSDAY, Day.getDayEnum(\"thursday\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(FRIDAY, Day.getDayEnum(\"friday\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // invalid day"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(INVALID_DAY, Day.getDayEnum(\"saturday\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(INVALID_DAY, Day.getDayEnum(\"random day\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // valid but different days"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertNotEquals(MONDAY, Day.getDayEnum(\"tuesday\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertNotEquals(TUESDAY, Day.getDayEnum(\"wednesday\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertNotEquals(WEDNESDAY, Day.getDayEnum(\"thursday\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertNotEquals(THURSDAY, Day.getDayEnum(\"friday\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertNotEquals(FRIDAY, Day.getDayEnum(\"monday\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void isSameDay() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // valid days, same day -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(MONDAY.isSameDay(MONDAY));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // valid days, different day -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(MONDAY.isSameDay(TUESDAY));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // 1 invalid day -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(INVALID_DAY.isSameDay(WEDNESDAY));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // 2 invalid days -\u003e returns true (vacuously)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Day.getDayEnum(\"saturday\").isSameDay(Day.getDayEnum(\"random\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void isUnknownDay() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // valid day -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Day.isUnknownDay(MONDAY));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // invalid day -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Day.isUnknownDay(INVALID_DAY));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(\"Monday\", MONDAY.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(\"Wednesday\", WEDNESDAY.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertNotEquals(\"FrIdAy\", FRIDAY.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/timetable/DurationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class DurationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Duration DURATION_1600_1800 \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            new Duration(LocalTime.of(16, 0), LocalTime.of(18, 0));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Duration DURATION_1600_1800_COPY \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            new Duration(LocalTime.of(16, 0), LocalTime.of(18, 0));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Duration DURATION_1600_1700 \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            new Duration(LocalTime.of(16, 0), LocalTime.of(17, 0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Duration DURATION_1700_1800 \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            new Duration(LocalTime.of(17, 0), LocalTime.of(18, 0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Duration DURATION_1630_1730 \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            new Duration(LocalTime.of(16, 30), LocalTime.of(17, 30));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Duration DURATION_1600_1759 \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            new Duration(LocalTime.of(16, 0), LocalTime.of(17, 59));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Duration DURATION_1600_1801 \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            new Duration(LocalTime.of(16, 0), LocalTime.of(18, 1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Duration DURATION_1800_2000 \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            new Duration(LocalTime.of(18, 0), LocalTime.of(20, 0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void isValidDuration() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // format tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Duration.isValidDuration(\"1800-1900\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // incorrect format -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Duration.isValidDuration(\"8-9\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Duration.isValidDuration(\"800-900\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Duration.isValidDuration(\"1800 - 1900\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Duration.isValidDuration(\"18:00-19:00\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Duration.isValidDuration(\"6 to 7\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Duration.isValidDuration(\"6pm to 7pm\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // valid boundary values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Duration.isValidDuration(\"0000-0001\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Duration.isValidDuration(\"2358-2359\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // invalid boundary values -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Duration.isValidDuration(\"2300-2400\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Duration.isValidDuration(\"2300-2401\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Duration.isValidDuration(\"2400-2401\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // order tests"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // valid order -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Duration.isValidDuration(LocalTime.of(16, 0), LocalTime.of(18, 0)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Duration.isValidDuration(LocalTime.of(16, 0), LocalTime.of(16, 1)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Duration.isValidDuration(LocalTime.of(23, 59), LocalTime.MAX));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(Duration.isValidDuration(LocalTime.MIN, LocalTime.of(0, 1)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // invalid order -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Duration.isValidDuration(LocalTime.of(18, 0), LocalTime.of(16, 0)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Duration.isValidDuration(LocalTime.of(18, 0), LocalTime.of(17, 59)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Duration.isValidDuration(LocalTime.MAX, LocalTime.of(23, 59)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Duration.isValidDuration(LocalTime.MAX, LocalTime.MIN));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // same timing -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Duration.isValidDuration(LocalTime.of(18, 0), LocalTime.of(18, 0)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(Duration.isValidDuration(LocalTime.MAX, LocalTime.MAX));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void isSameDuration() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(DURATION_1600_1800.isSameDuration(DURATION_1600_1800));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // different object, same duration -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(DURATION_1600_1800.isSameDuration(DURATION_1600_1800_COPY));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // contains null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(DURATION_1600_1800.isSameDuration(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // different durations -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(DURATION_1600_1800.isSameDuration(DURATION_1800_2000));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasOverlapDuration() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(DURATION_1600_1800.hasOverlapDuration(DURATION_1600_1800));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // different object, same duration -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(DURATION_1600_1800.hasOverlapDuration(DURATION_1600_1800_COPY));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // same start time -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(DURATION_1600_1800.hasOverlapDuration(DURATION_1600_1700));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // same end time -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(DURATION_1600_1800.hasOverlapDuration(DURATION_1700_1800));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // complete overlap -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(DURATION_1600_1800.hasOverlapDuration(DURATION_1630_1730));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(DURATION_1630_1730.hasOverlapDuration(DURATION_1600_1800));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // partial overlap -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(DURATION_1630_1730.hasOverlapDuration(DURATION_1600_1700));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(DURATION_1630_1730.hasOverlapDuration(DURATION_1700_1800));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // boundary values, overlap -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(DURATION_1600_1800.hasOverlapDuration(DURATION_1600_1759));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(DURATION_1600_1800.hasOverlapDuration(DURATION_1600_1801));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // end time of first duration equal start time of second duration -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(DURATION_1600_1800.hasOverlapDuration(DURATION_1800_2000));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // completely no overlap -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(DURATION_1600_1700.hasOverlapDuration(DURATION_1800_2000));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(\"1600-1800\", DURATION_1600_1800.toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/model/timetable/SlotDayPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.LEG_DAY_WEDNESDAY_1600_1800;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.MA1101R_THURSDAY_1600_1800;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class SlotDayPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void test_slotDayMatchesGivenDay_returnsTrue() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        SlotDayPredicate predicate \u003d new SlotDayPredicate(Collections.singletonList(\"wednesday\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(predicate.test(LEG_DAY_WEDNESDAY_1600_1800));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void test_slotDayDoesNotMatchGivenDay_returnsFalse() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        SlotDayPredicate predicate \u003d new SlotDayPredicate(Collections.singletonList(\"wednesday\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(predicate.test(MA1101R_THURSDAY_1600_1800));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        List\u003cString\u003e firstPredicateDayList \u003d Collections.singletonList(\"monday\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        List\u003cString\u003e secondPredicateDayList \u003d Collections.singletonList(\"tuesday\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        SlotDayPredicate firstPredicate \u003d new SlotDayPredicate(firstPredicateDayList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        SlotDayPredicate secondPredicate \u003d new SlotDayPredicate(secondPredicateDayList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // same fields -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        SlotDayPredicate firstPredicateCopy \u003d new SlotDayPredicate(firstPredicateDayList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // different day -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/model/timetable/SlotTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.EMPTY_MONDAY_1600_1700;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.EMPTY_MONDAY_1600_1800;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.EMPTY_MONDAY_1630_1730;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.EMPTY_MONDAY_1700_1800;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.EMPTY_TUESDAY_1600_1800;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.EMPTY_TUESDAY_1630_1730;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.EMPTY_TUESDAY_1800_2000;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.LEG_DAY_WEDNESDAY_1600_1800;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.MA1101R_THURSDAY_1600_1800;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.MA1101R_WEDNESDAY_1600_1800;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.MA1521_FRIDAY_1600_1800;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.MA1521_FRIDAY_1800_2000;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.UPPER_BODY_WEDNESDAY_1600_1800;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class SlotTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasOverlapDuration() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // same day, same duration -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(EMPTY_MONDAY_1600_1700.hasOverlapDuration(EMPTY_MONDAY_1600_1700));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // same day, overlap duration -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(EMPTY_MONDAY_1630_1730.hasOverlapDuration(EMPTY_MONDAY_1600_1700));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(EMPTY_MONDAY_1630_1730.hasOverlapDuration(EMPTY_MONDAY_1700_1800));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(EMPTY_MONDAY_1630_1730.hasOverlapDuration(EMPTY_MONDAY_1600_1800));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(EMPTY_MONDAY_1600_1800.hasOverlapDuration(EMPTY_MONDAY_1600_1700));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(EMPTY_MONDAY_1600_1800.hasOverlapDuration(EMPTY_MONDAY_1700_1800));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // same day, different duration -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(EMPTY_MONDAY_1600_1700.hasOverlapDuration(EMPTY_MONDAY_1700_1800));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // different day, same duration -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(EMPTY_MONDAY_1600_1800.hasOverlapDuration(EMPTY_TUESDAY_1600_1800));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // different day, different duration -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(EMPTY_MONDAY_1600_1800.hasOverlapDuration(EMPTY_TUESDAY_1630_1730));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(EMPTY_MONDAY_1600_1800.hasOverlapDuration(EMPTY_TUESDAY_1800_2000));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void isSameSlot() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // same day, same duration -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(LEG_DAY_WEDNESDAY_1600_1800.isSameSlot(LEG_DAY_WEDNESDAY_1600_1800)); // same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(LEG_DAY_WEDNESDAY_1600_1800.isSameSlot(UPPER_BODY_WEDNESDAY_1600_1800));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // same day, different duration -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(MA1521_FRIDAY_1600_1800.isSameSlot(MA1521_FRIDAY_1800_2000));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // different day, same duration -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(MA1101R_WEDNESDAY_1600_1800.isSameSlot(MA1101R_THURSDAY_1600_1800));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // different day, different duration -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(MA1101R_THURSDAY_1600_1800.isSameSlot(MA1521_FRIDAY_1800_2000));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(LEG_DAY_WEDNESDAY_1600_1800.equals(LEG_DAY_WEDNESDAY_1600_1800));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // different object, same fields -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(LEG_DAY_WEDNESDAY_1600_1800.equals(new SlotBuilder(LEG_DAY_WEDNESDAY_1600_1800).build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // contains null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(LEG_DAY_WEDNESDAY_1600_1800.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // different activity -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(LEG_DAY_WEDNESDAY_1600_1800.equals(UPPER_BODY_WEDNESDAY_1600_1800));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // different day -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(MA1101R_WEDNESDAY_1600_1800.equals(MA1101R_THURSDAY_1600_1800));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        // different duration -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(MA1521_FRIDAY_1600_1800.equals(MA1521_FRIDAY_1800_2000));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/model/timetable/TimetableTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.LEG_DAY_WEDNESDAY_1600_1800;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.LEG_DAY_WEDNESDAY_1630_1730;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.MA1101R_THURSDAY_1600_1800;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TimetableTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final Timetable timetable \u003d new Timetable();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(Collections.emptyList(), timetable.getSlotList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasSlot_nullSlot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e timetable.hasSlot(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasSlot_slotNotInTimetable_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(timetable.hasSlot(LEG_DAY_WEDNESDAY_1600_1800));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasSlot_slotInTimetable_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        timetable.addSlot(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(timetable.hasSlot(LEG_DAY_WEDNESDAY_1600_1800));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasOverlapDuration_nullSlot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e timetable.hasOverlapDuration(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasOverlapDuration_slotDoesNotOverlap_returnsFalse() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        timetable.addSlot(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(timetable.hasOverlapDuration(MA1101R_THURSDAY_1600_1800));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasOverlapDuration_slotOverlap_returnsTrue() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        timetable.addSlot(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(timetable.hasOverlapDuration(LEG_DAY_WEDNESDAY_1630_1730));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void getSlotList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e timetable.getSlotList().remove(0));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/timetable/UniqueSlotListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_TAG_EASY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.GES1028;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.MA1101R;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.LEG_DAY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.UPPER_BODY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.LEG_DAY_WEDNESDAY_1600_1800;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.LEG_DAY_WEDNESDAY_1630_1730;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.MA1101R_THURSDAY_1600_1800;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.UPPER_BODY_WEDNESDAY_1600_1800;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.exceptions.DuplicateSlotException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.exceptions.SlotOverlapDurationException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.testutil.SlotBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class UniqueSlotListTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private final UniqueSlotList uniqueSlotList \u003d new UniqueSlotList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void contains_nullSlot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSlotList.contains(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void contains_slotNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(uniqueSlotList.contains(LEG_DAY_WEDNESDAY_1600_1800));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void contains_slotInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.add(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(uniqueSlotList.contains(LEG_DAY_WEDNESDAY_1600_1800));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void contains_slotInListWithDifferentActivity_returnsTrue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.add(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(uniqueSlotList.contains(UPPER_BODY_WEDNESDAY_1600_1800));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasOverlapDuration_nullSlot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSlotList.hasOverlapDuration(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasOverlapDuration_noOverlap_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.add(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertFalse(uniqueSlotList.hasOverlapDuration(MA1101R_THURSDAY_1600_1800));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void hasOverlapDuration_overlap_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.add(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertTrue(uniqueSlotList.hasOverlapDuration(LEG_DAY_WEDNESDAY_1630_1730));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void add_nullSlot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSlotList.add(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void add_duplicateSlot_throwsDuplicateSlotException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.add(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(DuplicateSlotException.class, () -\u003e uniqueSlotList.add(LEG_DAY_WEDNESDAY_1600_1800));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void add_overlapSlot_throwsSlotOverlapDurationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.add(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(SlotOverlapDurationException.class, () -\u003e uniqueSlotList.add(LEG_DAY_WEDNESDAY_1630_1730));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void remove_nullSlot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSlotList.remove((Slot) null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void remove_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSlotList.remove((Activity) null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void remove_existingSlot_removesSlot() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.add(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.remove(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        UniqueSlotList expectedUniqueSlotList \u003d new UniqueSlotList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedUniqueSlotList, uniqueSlotList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void remove_existingActivity_removesActivity() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.add(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.remove(LEG_DAY);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        UniqueSlotList expectedUniqueSlotList \u003d new UniqueSlotList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedUniqueSlotList, uniqueSlotList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void remove_activityDoesNotExist_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.add(MA1101R_THURSDAY_1600_1800);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.remove(LEG_DAY);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        UniqueSlotList expectedUniqueSlotList \u003d new UniqueSlotList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        expectedUniqueSlotList.add(MA1101R_THURSDAY_1600_1800);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedUniqueSlotList, uniqueSlotList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlot_nullTargetActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSlotList.setSlot(null, GES1028));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlot_nullEditedActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSlotList.setSlot(GES1028, null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlot_editedActivityIsSameActivity_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.add(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.setSlot(LEG_DAY, LEG_DAY);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        UniqueSlotList expectedUniqueSlotList \u003d new UniqueSlotList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        expectedUniqueSlotList.add(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedUniqueSlotList, uniqueSlotList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlot_editedActivityHasSameIdentity_success() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.add(MA1101R_THURSDAY_1600_1800);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        Lesson editedMa1101R \u003d new LessonBuilder(MA1101R).withTags(VALID_LESSON_TAG_EASY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.setSlot(MA1101R, editedMa1101R);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        UniqueSlotList expectedUniqueSlotList \u003d new UniqueSlotList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        expectedUniqueSlotList.add(new SlotBuilder(MA1101R_THURSDAY_1600_1800).withActivity(editedMa1101R).build());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedUniqueSlotList, uniqueSlotList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlot_editedActivityHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.add(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.setSlot(LEG_DAY, UPPER_BODY);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        UniqueSlotList expectedUniqueSlotList \u003d new UniqueSlotList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        expectedUniqueSlotList.add(UPPER_BODY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedUniqueSlotList, uniqueSlotList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlots_nullUniqueSlotList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSlotList.setSlots((UniqueSlotList) null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlots_uniqueSlotList_replacesPreviousList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.add(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        UniqueSlotList expectedUniqueSlotList \u003d new UniqueSlotList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        expectedUniqueSlotList.add(MA1101R_THURSDAY_1600_1800);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.setSlots(expectedUniqueSlotList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedUniqueSlotList, uniqueSlotList);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlots_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueSlotList.setSlots((List\u003cSlot\u003e) null));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlots_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.add(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        List\u003cSlot\u003e slotList \u003d Collections.singletonList(UPPER_BODY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        uniqueSlotList.setSlots(slotList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        UniqueSlotList expectedUniqueSlotList \u003d new UniqueSlotList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        expectedUniqueSlotList.add(UPPER_BODY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedUniqueSlotList, uniqueSlotList);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlots_listWithDuplicateSlots_throwsDuplicateSlotException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        List\u003cSlot\u003e listWithDuplicateSlots \u003d Arrays.asList(LEG_DAY_WEDNESDAY_1600_1800, UPPER_BODY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(DuplicateSlotException.class, () -\u003e uniqueSlotList.setSlots(listWithDuplicateSlots));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void setSlots_listWithOverlappingSlots_throwsSlotOverlapDurationException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        List\u003cSlot\u003e listWithOverlappingSlots \u003d Arrays.asList(LEG_DAY_WEDNESDAY_1600_1800, LEG_DAY_WEDNESDAY_1630_1730);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(SlotOverlapDurationException.class, () -\u003e uniqueSlotList.setSlots(listWithOverlappingSlots));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                uniqueSlotList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 208
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * Since Exercise, Lesson and Routine is built around this Name class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * The tests for Name is done centrally in this class, and possible"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " * inputs of names for the 3 classes will be tested here."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Name.isValidName(\"cs1234*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Name.isValidName(\"Bench Press @ Record: 45KG\")); //Possible Exercise names"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertFalse(Name.isValidName(\"Push Routine @ The Beach / Park\")); //Possible Routine names"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(Name.isValidName(\"cs\")); // alphabets only"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(Name.isValidName(\"1234\")); // numbers only"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(Name.isValidName(\"cs1234\")); // alphanumeric characters"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(Name.isValidName(\"CS1234\")); // with capital letters"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(Name.isValidName(\"CS1234 at Auditorium in the morning\")); // long names"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(Name.isValidName(\"Pull Ups at the fitness corner at East Coast Park\")); // long names"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(Name.isValidName(\"Chest routine that follows Mike Chang workout on YouTube\")); // long names"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(Name.isValidName(\"Bench Press 45KG PER SIDE BEST ATTEMPT\")); // long names"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertTrue(Name.isValidName(\"Abs Workout at fitness corner\")); // long names"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void constraintsTesting() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Name with less than 50 characters acceptable"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertDoesNotThrow(() -\u003e new Name(\"A very good name\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Names with more than 50 characters not acceptable"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                new Name(\"A not so good name that is too long to be accepted by fitNUS definitely\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Names with special characters are not acceptable"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                new Name(\"N@T SUCH A GOOD N@ME\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void equalityChecks() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name modelName \u003d new Name(\"Model Name\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name modelNameCopy \u003d new Name(\"Model Name\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Name differentName \u003d new Name(\"Different Name\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(modelName, modelName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(modelName.hashCode(), modelName.hashCode());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(modelName.toString(), modelNameCopy.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Same String, different object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(modelName, modelNameCopy);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(modelName.hashCode(), modelNameCopy.hashCode());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(modelName.toString(), modelNameCopy.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Different String, different object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertNotEquals(modelName, differentName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertNotEquals(modelName.hashCode(), differentName.hashCode());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertNotEquals(modelName.toString(), differentName.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Null comparisons"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertNotEquals(modelName, null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertNotEquals(modelName.toString(), null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 1,
      "khor-jingqian": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedBodyTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Body;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Height;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.body.Weight;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class JsonAdaptedBodyTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final Weight MODEL_WEIGHT \u003d new Weight(70);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final Height MODEL_HEIGHT \u003d new Height(170);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final JsonAdaptedBody VALID_BODY \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            new JsonAdaptedBody(170, 70);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final Body MODEL_SOURCE \u003d new Body();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static void init() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        MODEL_SOURCE.setWeight(MODEL_WEIGHT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        MODEL_SOURCE.setHeight(MODEL_HEIGHT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void toModelType_allValidInputs_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonAdaptedBody body \u003d new JsonAdaptedBody(MODEL_SOURCE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonAdaptedBody body1 \u003d new JsonAdaptedBody(170, 70);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertEquals(body.toModelType(), MODEL_SOURCE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertEquals(body1.toModelType(), MODEL_SOURCE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void toModelType_invalidInputs_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Body poorSource \u003d new Body();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        poorSource.setWeight(MODEL_WEIGHT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        poorSource.setHeight(new Height(20));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Poor source"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonAdaptedBody invalidBody \u003d new JsonAdaptedBody(poorSource);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Invalid Height"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonAdaptedBody invalidBody1 \u003d new JsonAdaptedBody(70, 70);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Invalid Weight"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonAdaptedBody invalidBody2 \u003d new JsonAdaptedBody(170, 470);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Height.MESSAGE_CONSTRAINTS_LIMIT, invalidBody::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Height.MESSAGE_CONSTRAINTS_LIMIT, invalidBody1::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Weight.MESSAGE_CONSTRAINTS_LIMIT, invalidBody2::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 3,
      "khor-jingqian": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedDailyCalorieTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.calorie.DailyCalorie;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class JsonAdaptedDailyCalorieTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final DailyCalorie VALID_DAILY_CALORIE \u003d new DailyCalorie("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            LocalDate.of(2020, 7, 5));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    static void init() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        VALID_DAILY_CALORIE.addCalories(1500);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void toModelType_allValidInputs_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonAdaptedDailyCalorie dailyCalorie \u003d new JsonAdaptedDailyCalorie(\"2020-07-05\", \"1500\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonAdaptedDailyCalorie dailyCalorie1 \u003d new JsonAdaptedDailyCalorie(VALID_DAILY_CALORIE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertEquals(dailyCalorie.toModelType(), VALID_DAILY_CALORIE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertEquals(dailyCalorie1.toModelType(), VALID_DAILY_CALORIE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void toModelType_invalidDate_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String failureMessage \u003d String.format(JsonAdaptedDailyCalorie.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                LocalDate.class.getSimpleName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonAdaptedDailyCalorie dailyCalorie \u003d new JsonAdaptedDailyCalorie(null, \"1500\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(IllegalValueException.class, failureMessage, dailyCalorie::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void toModelType_invalidCalorie_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonAdaptedDailyCalorie dailyCalorie \u003d new JsonAdaptedDailyCalorie(\"2020-07-05\", \"-1\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Negative Calorie value"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                JsonAdaptedDailyCalorie.INVALID_CALORIE_MESSAGE_FORMAT, dailyCalorie::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //String as Calorie value"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonAdaptedDailyCalorie dailyCalorie1 \u003d new JsonAdaptedDailyCalorie(\"2020-07-05\", \"a\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                JsonAdaptedDailyCalorie.INVALID_CALORIE_MESSAGE_FORMAT, dailyCalorie1::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Too large of a Calorie value"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonAdaptedDailyCalorie dailyCalorie2 \u003d new JsonAdaptedDailyCalorie(\"2020-07-05\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                \"99999999999999999\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                JsonAdaptedDailyCalorie.INVALID_CALORIE_MESSAGE_FORMAT, dailyCalorie2::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khor-jingqian": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedExerciseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.storage.JsonAdaptedExercise.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.SQUATS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class JsonAdaptedExerciseTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Squats$$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#tiring\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final String VALID_NAME \u003d SQUATS.getName().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d SQUATS.getTags().stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_nullExerciseName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(null, VALID_TAGS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_invalidExerciseName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(INVALID_NAME, VALID_TAGS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS_FORMAT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, exercise::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(VALID_NAME, invalidTags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(IllegalValueException.class, exercise::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_validExerciseDetails_success() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonAdaptedExercise exercise \u003d new JsonAdaptedExercise(SQUATS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(SQUATS, exercise.toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedLessonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.storage.JsonAdaptedLesson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.GEH1030;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class JsonAdaptedLessonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String INVALID_NAME \u003d \"CS@1101S\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#tedious\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final String VALID_NAME \u003d GEH1030.getName().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d GEH1030.getTags().stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void toModelType_validLessonDetails_returnsLesson() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson(GEH1030);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(GEH1030, lesson.toModelType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void toModelType_invalidLessonName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson(INVALID_NAME, VALID_TAGS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS_FORMAT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, lesson::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void toModelType_nullLessonName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson(null, VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, lesson::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        JsonAdaptedLesson lesson \u003d new JsonAdaptedLesson(VALID_NAME, invalidTags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(IllegalValueException.class, lesson::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 52,
      "nicholasyeo": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedRoutineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalExercises.getTypicalExercises;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.LEG_DAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class JsonAdaptedRoutineTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Leg@Day\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final List\u003cJsonAdaptedExercise\u003e VALID_EXERCISES \u003d getTypicalExercises().stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            .map(JsonAdaptedExercise::new)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void toModelType_validRoutineDetails_returnsRoutine() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonAdaptedRoutine routine \u003d new JsonAdaptedRoutine(LEG_DAY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //Test valid Exercises"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Routine testRoutine \u003d new Routine(new Name(\"Amazing Workout\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Exercise exercise : getTypicalExercises()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            testRoutine.addExercise(exercise);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonAdaptedRoutine routineWithExercises \u003d new JsonAdaptedRoutine(\"Amazing Workout\", VALID_EXERCISES);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertEquals(routine.toModelType(), LEG_DAY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            assertEquals(routineWithExercises.toModelType(), testRoutine);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void toModelType_invalidRoutineName_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonAdaptedRoutine routine \u003d new JsonAdaptedRoutine(INVALID_NAME, VALID_EXERCISES);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS_FORMAT;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, routine::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void toModelType_invalidExerciseList_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        String expectedMessage \u003d String.format(JsonAdaptedRoutine.MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                Name.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        //null input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonAdaptedRoutine routineNull \u003d new JsonAdaptedRoutine(null, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, routineNull::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 1,
      "khor-jingqian": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedSlotTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalSlots.LEG_DAY_WEDNESDAY_1600_1800;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class JsonAdaptedSlotTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Slot\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String INVALID_ACTIVITY_NAME \u003d \"CS2103$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String INVALID_DAY \u003d \"random\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String INVALID_DURATION \u003d \"1600 - 1800\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String ROUTINE_TYPE \u003d \"routine\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String LESSON_TYPE \u003d \"lesson\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String VALID_ACTIVITY \u003d \"CS2103\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String VALID_DAY \u003d \"monday\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String VALID_DURATION \u003d \"1600-1800\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_nullActivityName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonAdaptedSlot slot \u003d new JsonAdaptedSlot("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                null, ROUTINE_TYPE, VALID_DAY, VALID_DURATION, null, null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, slot::toModelType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_invalidActivityName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonAdaptedSlot slot \u003d new JsonAdaptedSlot("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                INVALID_ACTIVITY_NAME, ROUTINE_TYPE, VALID_DAY, VALID_DURATION, null, null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS_FORMAT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, slot::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_invalidDay_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonAdaptedSlot slot \u003d new JsonAdaptedSlot("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                VALID_ACTIVITY, LESSON_TYPE, INVALID_DAY, VALID_DURATION, null, null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String expectedMessage \u003d Day.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, slot::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_invalidDuration_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonAdaptedSlot slot \u003d new JsonAdaptedSlot("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                VALID_ACTIVITY, LESSON_TYPE, VALID_DAY, INVALID_DURATION, null, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        String expectedMessage \u003d Duration.MESSAGE_CONSTRAINTS_FORMAT;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, slot::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_validFields_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonAdaptedSlot slot \u003d new JsonAdaptedSlot(LEG_DAY_WEDNESDAY_1600_1800);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(LEG_DAY_WEDNESDAY_1600_1800, slot.toModelType());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonFitNusStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.GES1028;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.MA1101R;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.MA1521;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.getTypicalFitNus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class JsonFitNusStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonFitNusStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void readFitNus_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readFitNus(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private java.util.Optional\u003cReadOnlyFitNus\u003e readFitNus(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new JsonFitNusStorage(Paths.get(filePath)).readFitNus(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertFalse(readFitNus(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFitNus(\"notJsonFormatFitNus.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void readFitNus_invalidLessonFitNus_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFitNus(\"invalidLessonFitNus.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void readFitNus_invalidAndValidLessonFitNus_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFitNus(\"invalidAndValidLessonFitNus.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void readAndSaveFitNus_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempFitNus.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        FitNus original \u003d getTypicalFitNus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        JsonFitNusStorage jsonFitNusStorage \u003d new JsonFitNusStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        jsonFitNusStorage.saveFitNus(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        ReadOnlyFitNus readBack \u003d jsonFitNusStorage.readFitNus(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(original, new FitNus(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        original.addLesson(MA1101R);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        original.removeLesson(GES1028);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        jsonFitNusStorage.saveFitNus(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        readBack \u003d jsonFitNusStorage.readFitNus(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(original, new FitNus(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        original.addLesson(MA1521);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        jsonFitNusStorage.saveFitNus(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        readBack \u003d jsonFitNusStorage.readFitNus().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(original, new FitNus(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void saveFitNus_nullFitNus_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFitNus(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Saves {@code fitNUS} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private void saveFitNus(ReadOnlyFitNus fitNus, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            new JsonFitNusStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                    .saveFitNus(fitNus, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void saveFitNus_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFitNus(new FitNus(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 51,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableFitNusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.calorie.Calorie;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.testutil.TypicalExercises;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.testutil.TypicalLessons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.testutil.TypicalRoutines;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.testutil.TypicalSlots;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class JsonSerializableFitNusTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableFitNusTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Path TYPICAL_EXERCISES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalExercisesFitNus.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Path INVALID_EXERCISE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidExerciseFitNus.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Path DUPLICATE_EXERCISE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateExerciseFitNus.json\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Path TYPICAL_ROUTINES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalRoutinesFitNus.json\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Path INVALID_ROUTINE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidRoutineFitNus.json\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Path DUPLICATE_ROUTINE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateRoutineFitNus.json\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final Path TYPICAL_LESSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalLessonsFitNus.json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final Path INVALID_LESSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidLessonFitNus.json\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private static final Path DUPLICATE_LESSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateLessonFitNus.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Path TYPICAL_SLOTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalSlotsFitNus.json\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Path INVALID_SLOT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidSlotFitNus.json\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Path DUPLICATE_SLOT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateSlotFitNus.json\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static final Path OVERLAP_SLOT_FILE \u003d TEST_DATA_FOLDER.resolve(\"overlapSlotFitNus.json\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final Path TYPICAL_DAILY_CALORIE_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalDailyCalorieFitNus.json\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final Path INVALID_DAILY_CALORIE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidDailyCalorieFitNus.json\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private static final Path DUPLICATE_DAILY_CALORIE_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            \"duplicateDailyCalorieFitNus.json\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_typicalExercisesFile_success() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonSerializableFitNus dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EXERCISES_FILE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                JsonSerializableFitNus.class).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        FitNus fitNusFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        FitNus typicalExercisesFitNus \u003d TypicalExercises.getTypicalFitNus();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(typicalExercisesFitNus, fitNusFromFile);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_invalidExerciseFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonSerializableFitNus dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EXERCISE_FILE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                JsonSerializableFitNus.class).get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_duplicateExercises_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonSerializableFitNus dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EXERCISE_FILE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                JsonSerializableFitNus.class).get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFitNus.MESSAGE_DUPLICATE_EXERCISE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_typicalRoutinesFile_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonSerializableFitNus dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ROUTINES_FILE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                JsonSerializableFitNus.class).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        FitNus fitNusFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        FitNus typicalRoutinesFitNus \u003d TypicalRoutines.getTypicalFitNus();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(typicalRoutinesFitNus, fitNusFromFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_invalidRoutineFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonSerializableFitNus dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ROUTINE_FILE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                JsonSerializableFitNus.class).get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_duplicateRoutines_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonSerializableFitNus dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ROUTINE_FILE,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                JsonSerializableFitNus.class).get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFitNus.MESSAGE_DUPLICATE_ROUTINE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void toModelType_typicalLessonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        JsonSerializableFitNus dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_LESSONS_FILE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                JsonSerializableFitNus.class).get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        FitNus fitNusFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        FitNus typicalLessonsFitNus \u003d TypicalLessons.getTypicalFitNus();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(fitNusFromFile, typicalLessonsFitNus);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void toModelType_invalidLessonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        JsonSerializableFitNus dataFromFile \u003d JsonUtil.readJsonFile(INVALID_LESSON_FILE,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                JsonSerializableFitNus.class).get();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void toModelType_duplicateLessons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        JsonSerializableFitNus dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_LESSON_FILE,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                JsonSerializableFitNus.class).get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFitNus.MESSAGE_DUPLICATE_LESSON,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_typicalSlotsFile_success() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonSerializableFitNus dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_SLOTS_FILE,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                JsonSerializableFitNus.class).get();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        FitNus actualFitNus \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        FitNus expectedFitNus \u003d TypicalSlots.getTypicalFitNus();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertEquals(expectedFitNus, actualFitNus);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_invalidSlotsFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonSerializableFitNus dataFromFile \u003d JsonUtil.readJsonFile(INVALID_SLOT_FILE,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                JsonSerializableFitNus.class).get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_duplicateSlots_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonSerializableFitNus dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_SLOT_FILE,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                JsonSerializableFitNus.class).get();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFitNus.MESSAGE_DUPLICATE_SLOT,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public void toModelType_overlapSlots_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        JsonSerializableFitNus dataFromFile \u003d JsonUtil.readJsonFile(OVERLAP_SLOT_FILE,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                JsonSerializableFitNus.class).get();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFitNus.MESSAGE_OVERLAP_SLOT,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void toModelType_typicalDailyCalorieFile_success() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonSerializableFitNus dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_DAILY_CALORIE_FILE,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                JsonSerializableFitNus.class).get();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        FitNus actualFitNus \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        FitNus expectedFitNus \u003d TypicalRoutines.getTypicalFitNus();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Calorie modelCalorie \u003d new Calorie(1500);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        expectedFitNus.addCalories(modelCalorie);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(expectedFitNus.getDailyCalorieList(), actualFitNus.getDailyCalorieList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void toModelType_duplicateDailyCalorie_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonSerializableFitNus dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_DAILY_CALORIE_FILE,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                JsonSerializableFitNus.class).get();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableFitNus.MESSAGE_DUPLICATE_DAILYCALORIE,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void toModelType_invalidDailyCalorie_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonSerializableFitNus dataFromFile \u003d JsonUtil.readJsonFile(INVALID_DAILY_CALORIE_FILE,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                JsonSerializableFitNus.class).get();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonAdaptedDailyCalorie.INVALID_CALORIE_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 47,
      "nicholasyeo": 97,
      "khor-jingqian": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public void constructorValid() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        JsonUserPrefsStorage prefs \u003d new JsonUserPrefsStorage(TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        assertEquals(prefs.getUserPrefsFilePath(), TEST_DATA_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        userPrefs.setFitNusFilePath(Paths.get(\"fitnus.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 1,
      "-": 122,
      "khor-jingqian": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.getTypicalFitNus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.ReadOnlyFitNus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        JsonFitNusStorage fitNusStorage \u003d new JsonFitNusStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        storageManager \u003d new StorageManager(fitNusStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void fitNusReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * {@link JsonFitNusStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonFitNusStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        FitNus original \u003d getTypicalFitNus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        storageManager.saveFitNus(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        ReadOnlyFitNus retrieved \u003d storageManager.readFitNus().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertEquals(original, new FitNus(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public void getFitNusFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        assertNotNull(storageManager.getFitNusFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 14,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditExerciseDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseEditCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * A utility class to help with building EditExerciseDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class EditExerciseDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private EditExerciseDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public EditExerciseDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public EditExerciseDescriptorBuilder(EditExerciseDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.descriptor \u003d new EditExerciseDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Returns a {@code EditExerciseDescriptor} with fields containing {@code exercise}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public EditExerciseDescriptorBuilder(Exercise exercise) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        descriptor \u003d new EditExerciseDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        descriptor.setName(exercise.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        descriptor.setTags(exercise.getTags());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Sets the {@code Name} of the {@code EditExerciseDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public EditExerciseDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditExerciseDescriptor}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public EditExerciseDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public EditExerciseDescriptor build() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Licheng-Wu": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditLessonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonEditCommand.EditLessonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * A utility class to help with building EditLessonDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class EditLessonDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private EditLessonDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public EditLessonDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        descriptor \u003d new EditLessonDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public EditLessonDescriptorBuilder(EditLessonDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.descriptor \u003d new EditLessonDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns a {@code EditLessonDescriptor} with fields containing {@code lesson}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public EditLessonDescriptorBuilder(Lesson lesson) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        descriptor \u003d new EditLessonDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        descriptor.setName(lesson.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        descriptor.setTags(lesson.getTags());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Sets the {@code Name} of the {@code EditLessonDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public EditLessonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditLessonDescriptor}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public EditLessonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public EditLessonDescriptor build() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 56,
      "nicholasyeo": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExerciseBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " * A utility class to help with building Exercise objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class ExerciseBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Squats\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Creates a {@code ExerciseBuilder} with the default details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Initializes the ExerciseBuilder with the data of {@code exerciseToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseBuilder(Exercise exerciseToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        name \u003d exerciseToCopy.getName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(exerciseToCopy.getTags());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Sets the {@code Name} of the {@code exercise} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseBuilder withName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Exercise} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public ExerciseBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public Exercise build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new Exercise(name, tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 1,
      "Licheng-Wu": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExerciseUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseAddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseDeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseEditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseEditCommand.EditExerciseDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.exercise.ExerciseFindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * A utility class for Exercise."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class ExerciseUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns an exercise add command string for adding the {@code exercise}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param exercise The exercise to be added."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return The exercise add command string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static String getExerciseAddCommand(Exercise exercise) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return ExerciseAddCommand.COMMAND_WORD + WHITESPACE + getExerciseDetails(exercise);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns the part of command string for the given {@code exercise}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static String getExerciseDetails(Exercise exercise) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        sb.append(PREFIX_EXERCISE).append(exercise.getName().fullName).append(WHITESPACE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        exercise.getTags().forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(WHITESPACE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns an exercise edit command string for editing the {@code exercise}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param index The index of the exercise."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param descriptor The descriptor of the edited exercise."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return The exercise edit command string."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static String getExerciseEditCommand(Index index, EditExerciseDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return ExerciseEditCommand.COMMAND_WORD + WHITESPACE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + index.getOneBased() + WHITESPACE + getEditExerciseDescriptorDetails(descriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns the part of command string for the given {@code EditExerciseDescriptor}\u0027s details."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static String getEditExerciseDescriptorDetails(EditExerciseDescriptor descriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_EXERCISE).append(name.fullName).append(WHITESPACE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        descriptor.getTags().ifPresent(tags -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(WHITESPACE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns a exercise delete command string."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param index The index of the exercise."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return The exercise delete command string."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static String getExerciseDeleteCommand(Index index) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return ExerciseDeleteCommand.COMMAND_WORD + WHITESPACE + index.getOneBased();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns an exercise find command string."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param keyword The keyword for the find command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return The exercise find command string."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static String getExerciseFindCommand(String keyword) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return ExerciseFindCommand.COMMAND_WORD + WHITESPACE + keyword;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FitNusBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * A utility class to help with building fitNUS objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " *     {@code FitNus fn \u003d new FitNusBuilder().withLesson(\"MA1521\", \"MA1101R\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class FitNusBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private FitNus fitNus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public FitNusBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus \u003d new FitNus();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public FitNusBuilder(FitNus fitNus) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.fitNus \u003d fitNus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Adds a new {@code Lesson} to the {@code fitNUS} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public FitNusBuilder withLesson(Lesson lesson) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fitNus.addLesson(lesson);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public FitNus build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fitNus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LessonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * A utility class to help with building Lesson objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"GES1011\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Creates a {@code LessonBuilder} with the default details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Initializes the LessonBuilder with the data of {@code lessonToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonBuilder(Lesson lessonToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        name \u003d lessonToCopy.getName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(lessonToCopy.getTags());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Sets the {@code Name} of the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonBuilder withName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Lesson} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public LessonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public Lesson build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new Lesson(name, tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 55,
      "nicholasyeo": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LessonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.logic.commands.lessons.LessonEditCommand.EditLessonDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * A utility class for Lesson."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class LessonUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns a lesson add command string for adding the {@code lesson}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static String getLessonAddCommand(Lesson lesson) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return LessonAddCommand.COMMAND_WORD + \" \" + getLessonDetails(lesson);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns the part of command string for the given {@code lesson}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static String getLessonDetails(Lesson lesson) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        sb.append(PREFIX_LESSON + lesson.getName().fullName + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        lesson.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns the part of command string for the given {@code EditLessonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static String getEditLessonDescriptorDetails(EditLessonDescriptor descriptor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_LESSON).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RoutineUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXERCISE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineAddExerciseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineCreateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineDeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineDeleteExerciseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineFindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.routines.RoutineViewCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * A utility class for Routine."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class RoutineUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final String WHITESPACE \u003d \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns a routine create command string for adding the {@code routine}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param routine The routine to be created."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return The routine create command string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static String getRoutineCreateCommand(Routine routine) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return RoutineCreateCommand.COMMAND_WORD + WHITESPACE + getRoutineDetails(routine);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static String getRoutineDetails(Routine routine) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return PREFIX_ROUTINE + routine.getName().fullName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns a routine delete command string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param index The index of the routine."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return The routine delete command string."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static String getRoutineDeleteCommand(Index index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return RoutineDeleteCommand.COMMAND_WORD + WHITESPACE + index.getOneBased();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns a routine find command string."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param keyword The keyword for the find command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return The routine find command string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static String getRoutineFindCommand(String keyword) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return RoutineFindCommand.COMMAND_WORD + WHITESPACE + keyword;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns a routine add exercise command string for adding the {@code exercise} to the {@code routine}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param routine The routine to be added to."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param exercise The exercise to add."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return The routine add exercise command string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static String getRoutineAddExerciseCommand(Routine routine, Exercise exercise) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return RoutineAddExerciseCommand.COMMAND_WORD + WHITESPACE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + getRoutineDetails(routine) + WHITESPACE + getExerciseDetails(exercise);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns a routine delete exercise command string for deleting the {@code exercise} from the {@code routine}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param routine The routine to delete from."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param exercise The exercise to delete."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return The routine add exercise command string."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static String getRoutineDeleteExerciseCommand(Routine routine, Exercise exercise) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return RoutineDeleteExerciseCommand.COMMAND_WORD + WHITESPACE"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + getRoutineDetails(routine) + WHITESPACE + getExerciseDetails(exercise);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private static String getExerciseDetails(Exercise exercise) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return PREFIX_EXERCISE + exercise.getName().fullName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns a routine view command string for viewing a specific routine."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @param index The index of the routine."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * @return The routine view command string."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static String getRoutineViewCommand(Index index) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return RoutineViewCommand.COMMAND_WORD + WHITESPACE + index.getOneBased();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SlotBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Activity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Day;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * A utility class to help with building Slot objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class SlotBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Activity DEFAULT_ACTIVITY \u003d Activity.empty();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Day DEFAULT_DAY \u003d Day.MONDAY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Duration DEFAULT_DURATION \u003d new Duration(LocalTime.MIN, LocalTime.of(23, 59));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private Activity activity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private Day day;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Creates a {@code SlotBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public SlotBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        activity \u003d DEFAULT_ACTIVITY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        day \u003d DEFAULT_DAY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        duration \u003d DEFAULT_DURATION;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Initializes the SlotBuilder with the data of {@code slotToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public SlotBuilder(Slot slotToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        activity \u003d slotToCopy.getActivity();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        day \u003d slotToCopy.getDay();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        duration \u003d slotToCopy.getDuration();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Sets the {@code Activity} of the {@code Slot} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public SlotBuilder withActivity(Activity activity) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Sets the {@code Day} of the {@code Slot} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public SlotBuilder withDay(Day day) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Sets the {@code Duration} of the {@code Slot} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public SlotBuilder withDuration(Duration duration) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public Slot build() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new Slot(activity, day, duration);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SlotUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LESSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROUTINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.timetable.TimetableAddLessonCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.timetable.TimetableAddRoutineCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.logic.commands.timetable.TimetableDeleteSlotCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * A utility class for Slot."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class SlotUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns a timetable add lesson command string for adding the {@code slot}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static String getTimetableAddLessonCommand(Slot slot) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return TimetableAddLessonCommand.COMMAND_WORD + \" \" + getLessonDetails(slot);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns the part of command string for the given {@code slot}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static String getLessonDetails(Slot slot) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return PREFIX_LESSON + slot.getActivity().getName().fullName + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + PREFIX_DAY + slot.getDay().getDay() + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + PREFIX_TIME + slot.getDuration().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns a timetable add routine command string for adding the {@code slot}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static String getTimetableAddRoutineCommand(Slot slot) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return TimetableAddRoutineCommand.COMMAND_WORD + \" \" + getRoutineDetails(slot);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns the part of command string for the given {@code slot}\u0027s details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static String getRoutineDetails(Slot slot) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return PREFIX_ROUTINE + slot.getActivity().getName().fullName + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + PREFIX_DAY + slot.getDay().getDay() + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + PREFIX_TIME + slot.getDuration().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns a timetable delete slot command string for deleting the {@code slot}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static String getTimetablDeleteSlotCommand(Slot slot) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return TimetableDeleteSlotCommand.COMMAND_WORD + \" \" + getSlotDetails(slot);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns the part of command string for the given {@code slot}\u0027s details."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static String getSlotDetails(Slot slot) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return PREFIX_DAY + slot.getDay().getDay() + \" \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                + PREFIX_TIME + slot.getDuration().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns the middle index of the lesson in the {@code model}\u0027s lesson list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return Index.fromOneBased(model.getFilteredLessonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns the last index of the lesson in the {@code model}\u0027s lesson list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return Index.fromOneBased(model.getFilteredLessonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns the lesson in the {@code model}\u0027s lesson list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static Lesson getLesson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return model.getFilteredLessonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExercises.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "public class TypicalExercises {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final Exercise BENCH_PRESS \u003d new ExerciseBuilder().withName(\"Bench press\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            .withTags(\"chest\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final Exercise SQUATS \u003d new ExerciseBuilder().withName(\"Squats\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "            .withTags(\"Legs\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final Exercise SPRINTS \u003d new Exercise(new Name(\"Sprints\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    private TypicalExercises() {} // prevents instantiation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an {@code FitNus} with all the typical exercises."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static FitNus getTypicalFitNus() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        FitNus fn \u003d new FitNus();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        for (Exercise exercise : getTypicalExercises()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            fn.addExercise(exercise);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fn;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static List\u003cExercise\u003e getTypicalExercises() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(BENCH_PRESS, SQUATS));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 7,
      "nicholasyeo": 1,
      "Licheng-Wu": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Index INDEX_FIRST_LESSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Index INDEX_SECOND_LESSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Index INDEX_THIRD_LESSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Index INDEX_FIRST_EXERCISE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final Index INDEX_SECOND_EXERCISE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Licheng-Wu"
        },
        "content": "    public static final Index INDEX_THIRD_EXERCISE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 4,
      "nicholasyeo": 1,
      "-": 9,
      "Licheng-Wu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalLessons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_NAME_CS2030;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_NAME_CS2106;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_TAG_EASY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LESSON_TAG_LECTURE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * A utility class containing a list of {@code Lesson} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "public class TypicalLessons {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson GES1028 \u003d new LessonBuilder().withName(\"GES1028\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            .withTags(\"auditorium\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson GEH1030 \u003d new LessonBuilder().withName(\"GEH1030\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            .withTags(\"music\", \"auditorium\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson GET1011 \u003d new LessonBuilder().withName(\"GET1011\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson GER1000 \u003d new LessonBuilder().withName(\"GER1000\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            .withTags(\"auditorium\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson GEQ1000 \u003d new LessonBuilder().withName(\"GEQ1000\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson IS1103 \u003d new LessonBuilder().withName(\"IS1103\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson PC1141 \u003d new LessonBuilder().withName(\"PC1141\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson MA1101R \u003d new LessonBuilder().withName(\"MA1101R\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson MA1521 \u003d new LessonBuilder().withName(\"MA1521\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    // Manually added - Lesson\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson CS2030 \u003d new LessonBuilder().withName(VALID_LESSON_NAME_CS2030)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            .withTags(VALID_LESSON_TAG_EASY).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static final Lesson CS2106 \u003d new LessonBuilder().withName(VALID_LESSON_NAME_CS2106)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            .withTags(VALID_LESSON_TAG_LECTURE, VALID_LESSON_TAG_EASY).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    private TypicalLessons() {} // prevents instantiation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an {@code FitNus} with all the typical lessons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static FitNus getTypicalFitNus() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        FitNus fn \u003d new FitNus();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        for (Lesson lesson : getTypicalLessons()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            fn.addLesson(lesson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fn;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "iqbxl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static List\u003cLesson\u003e getTypicalLessons() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(GES1028, GEH1030, GET1011, GER1000, GEQ1000, IS1103, PC1141));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRoutines.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.exercise.Exercise;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.util.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "iqbxl"
        },
        "content": " * A utility class containing a list of {@code Routine} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "public class TypicalRoutines {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final Routine LEG_DAY \u003d new Routine(new Name(\"Leg Day\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static final Routine UPPER_BODY \u003d new Routine(new Name(\"Upper Body\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    private TypicalRoutines() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an {@code FitNus} with all the typical routines."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static FitNus getTypicalFitNus() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        FitNus fn \u003d new FitNus();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        for (Routine routine : getTypicalRoutines()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "            fn.addRoutine(routine);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fn;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "     * Returns an {@code FitNus} with all the typical routines."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "    public static FitNus getPopulatedFitNus() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        FitNus fn \u003d new FitNus();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        Set\u003cTag\u003e typicalTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        typicalTags.add(new Tag(\"Dumbbell\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Exercise squats \u003d new Exercise(new Name(\"Squats\"), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        Exercise bicep \u003d new Exercise(new Name(\"Bicep Curls\"), typicalTags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!LEG_DAY.hasExercise(squats)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            LEG_DAY.addExercise(squats);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        if (!UPPER_BODY.hasExercise(bicep)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "            UPPER_BODY.addExercise(bicep);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fn.addRoutine(LEG_DAY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        fn.addRoutine(UPPER_BODY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return fn;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    public static List\u003cRoutine\u003e getTypicalRoutines() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "iqbxl"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(LEG_DAY, UPPER_BODY));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khor-jingqian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "iqbxl": 17,
      "nicholasyeo": 1,
      "khor-jingqian": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalSlots.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.Day.FRIDAY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.Day.MONDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.Day.THURSDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.Day.TUESDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.Day.WEDNESDAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.DurationTest.DURATION_1600_1700;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.DurationTest.DURATION_1600_1800;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.DurationTest.DURATION_1630_1730;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.DurationTest.DURATION_1700_1800;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.model.timetable.DurationTest.DURATION_1800_2000;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.MA1101R;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalLessons.MA1521;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.LEG_DAY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import static seedu.address.testutil.TypicalRoutines.UPPER_BODY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.FitNus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.lesson.Lesson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.routine.Routine;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Activity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "import seedu.address.model.timetable.Slot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " * A utility class containing a list of {@code Slot} objects to be used in tests."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "public class TypicalSlots {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Slot EMPTY_MONDAY_1630_1730 \u003d new SlotBuilder().withActivity(Activity.empty())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            .withDay(MONDAY).withDuration(DURATION_1630_1730).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Slot EMPTY_MONDAY_1600_1700 \u003d new SlotBuilder().withActivity(Activity.empty())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            .withDay(MONDAY).withDuration(DURATION_1600_1700).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Slot EMPTY_MONDAY_1700_1800 \u003d new SlotBuilder().withActivity(Activity.empty())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            .withDay(MONDAY).withDuration(DURATION_1700_1800).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Slot EMPTY_MONDAY_1600_1800 \u003d new SlotBuilder().withActivity(Activity.empty())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            .withDay(MONDAY).withDuration(DURATION_1600_1800).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Slot EMPTY_TUESDAY_1600_1800 \u003d new SlotBuilder().withActivity(Activity.empty())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            .withDay(TUESDAY).withDuration(DURATION_1600_1800).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Slot EMPTY_TUESDAY_1630_1730 \u003d new SlotBuilder().withActivity(Activity.empty())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            .withDay(TUESDAY).withDuration(DURATION_1630_1730).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Slot EMPTY_TUESDAY_1800_2000 \u003d new SlotBuilder().withActivity(Activity.empty())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            .withDay(TUESDAY).withDuration(DURATION_1800_2000).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Slot LEG_DAY_WEDNESDAY_1600_1800 \u003d new SlotBuilder().withActivity(LEG_DAY)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            .withDay(WEDNESDAY).withDuration(DURATION_1600_1800).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Slot LEG_DAY_WEDNESDAY_1630_1730 \u003d new SlotBuilder().withActivity(LEG_DAY)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            .withDay(WEDNESDAY).withDuration(DURATION_1630_1730).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Slot UPPER_BODY_WEDNESDAY_1600_1800 \u003d new SlotBuilder().withActivity(UPPER_BODY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            .withDay(WEDNESDAY).withDuration(DURATION_1600_1800).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Slot MA1101R_WEDNESDAY_1600_1800 \u003d new SlotBuilder().withActivity(MA1101R)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            .withDay(WEDNESDAY).withDuration(DURATION_1600_1800).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Slot MA1101R_THURSDAY_1600_1800 \u003d new SlotBuilder().withActivity(MA1101R)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            .withDay(THURSDAY).withDuration(DURATION_1600_1800).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Slot MA1521_FRIDAY_1600_1800 \u003d new SlotBuilder().withActivity(MA1521)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            .withDay(FRIDAY).withDuration(DURATION_1600_1800).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static final Slot MA1521_FRIDAY_1800_2000 \u003d new SlotBuilder().withActivity(MA1521)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            .withDay(FRIDAY).withDuration(DURATION_1800_2000).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    private TypicalSlots() {} // prevents instantiation"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     * Returns an {@code FitNus} with all the typical slots."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static FitNus getTypicalFitNus() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        FitNus fn \u003d new FitNus();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        for (Slot slot : getTypicalSlots()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            if (slot.getActivity().isRoutine()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                fn.addRoutine((Routine) slot.getActivity());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                fn.addLesson((Lesson) slot.getActivity());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "            fn.addSlotToTimetable(slot);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return fn;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    public static List\u003cSlot\u003e getTypicalSlots() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "                LEG_DAY_WEDNESDAY_1600_1800, MA1101R_THURSDAY_1600_1800, MA1521_FRIDAY_1600_1800));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nicholasyeo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nicholasyeo": 86
    }
  }
]
