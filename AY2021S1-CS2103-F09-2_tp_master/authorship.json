[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "# AY20/21 Sem 1 CS2103-F09-2 Team Project (PIVOT)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Morphing AB3 into a Police Investigation Virtual Organisational Tool (PIVOT)."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "PIVOT is an app to assist police investigators in keeping track of their investigations and relevant information. This is a brownfield Java Project built for CS2103 tP. \u003cbr\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "   ![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "For the detailed documentation of this project, see the [PIVOT Product Website](https://ay2021s1-cs2103-f09-2.github.io/tp/)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "## About Us"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Refer to [About Us](https://ay2021s1-cs2103-f09-2.github.io/tp/AboutUs.html)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Refer to [User Guide](https://ay2021s1-cs2103-f09-2.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "## Developer\u0027s Guide"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Refer to [Developer\u0027s Guide](https://ay2021s1-cs2103-f09-2.github.io/tp/DeveloperGuide.html)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "## Setup"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Prerequisites: JDK 11, Gradle."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "To run the app: (To be updated)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "1. Download the .jar file from the releases and run it."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "_or_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "1. Clone the repository"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "2. Using your IDE (eg. Intellij), open the build.gradle file inside the repository"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "3. When prompted, choose \u0027open as project\u0027 and let gradle setup the project"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "4. Run the app using gradle"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "## Build status"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-F09-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-F09-2/tp/actions)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "## Build Information"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Setup Github Actions: https://se-education.org/guides/tutorials/githubActions.html"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "## Code Style"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Follows CS2103 Coding Practices: https://se-education.org/guides/tutorials/checkstyle.html"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "Vielheim": 30,
      "constancensq": 12
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "mainClassName \u003d \u0027seedu.pivot.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "run {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    archiveName \u003d \u0027pivot.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 70,
      "constancensq": 4
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "You can reach us at the email `e0388997@u.nus.edu`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "### Terence Ho Wei Yang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003cimg src\u003d\"images/vielheim.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "[[github](https://github.com/vielheim)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* Responsibilities: Overall project coordination. Ensures team is on schedule."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "### Wong Wen Wei Esmanda"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\u003cimg src\u003d\"images/esmanda3w.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "[[github](http://github.com/esmanda3w)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* Role: Testing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* Responsibilities: Ensures the testing of the project is done properly and on time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "### Neil Gupta"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "\u003cimg src\u003d\"images/jargonx.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "[[github](http://github.com/jargonx)]][[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* Role: Integration"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* Responsibilities: Reviewing of PRs, making sure code fits"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "### Ng Shuo Qi, Constance"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "\u003cimg src\u003d\"images/constancensq.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "[[github](http://github.com/constancensq)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* Role: Documentation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* Responsibilities: Responsible for the quality of various project documents."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "### Cody Chew"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\u003cimg src\u003d\"images/codychew.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "[[github](http://github.com/CodyChew)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "* Role: Code Quality"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "* Responsibilities: Looks after code quality,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "ensures adherence to coding standards, etc."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Jon Chua (Supervisor)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Prof Damith (Lecturer)"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 5,
      "Jargonx": 5,
      "CodyChew": 12,
      "-": 33,
      "Vielheim": 5,
      "constancensq": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/java/seedu/pivot/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/java/seedu/pivot/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The rest of the App consists of five components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* [**`State`**](#state-component): Holds the states of the App while the app is active."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The first four components,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "For state component, it is managed by two classes:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* `StateManager` class which provides general access to the state of the App."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* `UIStateManager` class which provides the GUI access to the state of the app."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Example of architecture: The `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/java/seedu/pivot/ui/Ui.java)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/java/seedu/pivot/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* Listens for changes to `State` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The example for observing states is illustrated with the Sequence Diagram below."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The `MainWindow` observes the `UiStateManager` for any changes to its internal state."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Upon invoking `open case 1`, the state changes and the `MainWindow` if notified by its `Observer`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "It then retrieves the information it requires and displays on its display panel."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "![Structure of the Ui Component when updating state](images/UiStateSequenceDiagram.png)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**API** : [`Model.java`](hhttps://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/java/seedu/pivot/model/Model.java)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cCase\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/java/seedu/pivot/storage/Storage.java)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* can save Pivot\u0027s data in json format and read it back."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "### State component"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "![Structure of the State Component](images/StateClassDiagram.png)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "**API** : [`StateManager.java`](https://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/java/seedu/pivot/logic/state/StateManager.java), [`UiStateManager.java`](https://github.com/AY2021S1-CS2103-F09-2/tp/blob/master/src/main/java/seedu/pivot/ui/UiStateManager.java) "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The `StateManager` component,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* can set the state for an opened `Case` in the app, denoted by its `Index`."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* can reset the state."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* can return the state."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* can request the `UiStateManager` to refresh its state."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The `UiStateManager` component,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* can set the state for an opened `Case` in the app, denoted by its `Index`."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* can reset the state."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* can refresh its state."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "When the `StateManager` modifies its State, it will also call upon `UiStateManager` to update its state as well."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "This triggers any observation set on the respective `State` managers by the other components."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "One such example can be found in the `UI` component."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Classes used by multiple components are in the `seedu.pivot.commons` package."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "### Open Case/Return feature"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The `open case` command allows the user to open an investigation case listed on the `Main Page` in the GUI."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "PIVOT then extracts and displays the key information about the `Case` in the `Case Page` Panel."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "#### Implementation: Open Case"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The `open case` mechanism is facilitated by `OpenCaseCommand`. It extends abstract class `OpenCommand` and contains a target `Index` of the `Case` to be opened."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "It implements `OpenCaseCommand#execute()` as required in the abstract parent class. The Sequence Diagram below shows how the `OpenCaseCommand` works."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "![Interactions Inside the Logic Component for the `open case 1` Command](images/OpenCaseSequenceDiagram.png)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "As the user invokes `open case [INDEX]`, the arguments are passed from the GUI to the `Logic` component, which is then passed to the `Parser`, implemented by `PivotParser`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "In `PivotParser`, the arguments are processed and passed onto the `OpenCommandParser` to further process the arguments and create a new `OpenCaseCommand`."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** TWhen the user gives an invalid `type`, such as `open suspect 1`, `OpenCommandParser` will raise and error and display the proper command format for the user."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Upon invoking `OpenCaseCommand#execute()`, the class will extract the `Case` that is to be opened, and update the state in `StateManager`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Upon observing a change in state, the GUI will then extract the `Case` and update its display panel with the case information."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** When the user gives an invalid `Index`, such as `open case -1`, `OpenCaseCommand` will raise and error and display the proper command format for the user."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "#### Implementation: Return"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "The `return` mechanism is facilitated by `ReturnCommand`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "It allows the user to close the `Case Page` panel and return to the `Main Page`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Its implementation is similar to the `OpenCaseCommand` except it resets the state in `StateManager` instead of setting a state."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "![Interactions Inside the Logic Component for the `return` Command](images/ReturnSequenceDiagram.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "### Including Documents to PIVOT"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Reference class"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "The `Reference` class represents a file location in the directory `./references` of the program. A `reference` only "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "exists if there is a file present at the file location in the user\u0027s local directory. The validity of a  "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "`reference` depends on the user\u0027s operating system and the different acceptable file names. A `reference` object must "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "have a valid file name on creation."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Document class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "The `Document` class represents a file on the user\u0027s local computer. It contains a `name` for easy viewing "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "and a `reference` to the file location. It is used for tracking files that are stored in PIVOT and for opening "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "of documents."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "![Structure of the Document Component](images/DocumentClassDiagram.png)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "The documents are stored in a list for a particular case and you can only manipulate "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "documents(adding, deleting, opening) while inside a `case`. This is because the program stores a state of which"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "interface (main page or case) the user is at and will manipulate the documents according to the `document list` in that "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "current `case`. "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Adding a Document"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "When a user executes `add doc n:name r:reference.txt`, to add a document with the specified name and file reference"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "to the current \"opened\" case in the state, `addDocumandCommandParser` will be invoked to parse the "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "name (prefixed with n:) and reference (prefixed with r:) inputs. The program must be at an \"opened\" case at this point."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "`addDocumandCommandParser` will check for a valid name as well as a valid "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "reference that exists in the `./references` directory. This is to prevent a user from creating a document when the "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "program is active when they have yet to include the file in the program\u0027s directory. The appropriate error message "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "should be returned for a better user experience. It will then successfully create a `Document` and "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "return `addDocumandCommand`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "`addDocumandCommand` will get the current `case` in the program `state` and adds the new `Document` to this `case`."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "It will check for duplicated documents at this point as this is where the program accesses the list of documents in the"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "current state. The `model` will then be updated with the updated `case`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "The following sequence diagram shows adding a document to the current case: \u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "![Adding a document to current case](images/AddDocumentDiagram.png)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Deleting a Document"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Deleting a document works about the same as adding a document. When a user executes `delete doc 2`, to delete the "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "second `document` in the list of documents of the current \"opened\" case in the state. The program must be at an "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\"opened\" case at this point.`DeleteCommandParser` parses the given index as a `Index` object and gets the `case index`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "in the current state. It returns `DeleteDocumentCommand` if the inputs are valid."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "`DeleteDocumentCommand` gets the list of documents in the current case using the `case index` and checks if the "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "input `index` is within bounds. The check occurs in the `Command` rather than `DeleteDocumentParser` so that we"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "can distinguish between `ParseException` and `CommandException`. The command then removes the specified `document` "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "in the list and updates the `model`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "The following activity diagram shows a successful delete document operation at a case page: \u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "![Deleting a document to current case](images/DeleteDocumentDiagram.png)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "##### Aspect: For `Reference` object, separate validity (of the String) and existence (of the actual file path) checks."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "* **Alternative 1 (current choice):** A reference object can be both valid but doesn\u0027t exists at the same time."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "   - Pros: A document file deletion on the user\u0027s local machine will not affect loading the current cases in the Json "
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "   file"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "   - Cons: More prone to bugs"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "   "
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "* **Alternative 2:** A reference object must be both valid and exists to be created."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     - Pros: A document is only created when we know there is a valid and existing `Reference`. Easier for testing."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     - Cons: The program cannot load if there is a missing file (due to external user deletion) which was previously "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     saved in the Json file"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "##### Aspect: Integrate `ReferenceStorage` with current Storage Design"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "* **Alternative 1 (current choice):** Separate `ReferenceStorage` to handle all `Reference` and storage interactions."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "   - Pros: Easier to implement and increases cohesion."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "   - Cons: More classes and code in the program"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "   "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "* **Alternative 2:** Make use of `Config.java` and `UserPrefsStorage` to integrate `ReferenceStorage` such as saving "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "default file paths."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     - Pros: Makes use of existing infrastructure, lesser code and possibly lesser code duplication."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     - Cons: Increased coupling, more prone to bugs and harder to test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "### Undo feature (Not yet implemented)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "The proposed undo mechanism is facilitated by `VersionedPivot`. It extends `Pivot` with an undo history, stored internally as an `pivotStateStack`. "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "`pivotStateStack` stores the entire Pivot at any point. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* `VersionedPivot#commit()` — Saves the current Pivot state in its history."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* `VersionePivot#undo()` — Restores the previous Pivot state from its history."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* `VersionedPivot#redo()` — Restores a previously undone Pivot state from its history."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitPivot()` and `Model#undoPivot()` respectively."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Given below is an example usage scenario and how the undo mechanism behaves at each step."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedPivot` will be initialized with the initial Pivot state."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th case in Pivot. The `delete` command calls `Model#commitPivot()`, causing the modified state of Pivot after the `delete 5` command executes to be saved in the `pivotStateStack`."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Step 3. The user executes `add case t:Lost Wallet …​` to add a new case. The `add case` command also calls `Model#commitPivot()`, causing another modified Pivot state to be saved into the `pivotStateStack`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitPivot()`, so the Pivot state will not be saved into the `pivotStateStack`."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Step 4. The user now decides that adding the case was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoPivot()`, which will pop the current state from the `pivotStateStack`, and return the previous Pivot state, restoring Pivot to that state."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the size of the `pivotStateStack` is 1, it contains only the initial Pivot state, then there are no previous Pivot states to restore. The `undo` command uses `Model#canUndoPivot()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify Pivot, such as `list`, will usually not call `Model#commitPivot()` or `Model#undoPivot()`. Thus, the `pivotStateStack` remains unchanged."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "##### Aspect: How undo executes"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire Pivot."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo by"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the case being deleted)."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* police investigators who require an organisational tool"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* has a need to manage a significant number of investigation cases"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* prefer a structured app to organise information related to their cases"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* has a basic understanding of file paths to manage his/her files"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "**Value proposition**:  "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "A lot of detectives use physical folders, whiteboards to consolidate their investigation information. "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "This uses up a lot of physical resources such as printing papers. "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "There may also exist cluttered information across multiple cases. "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "This leads to disorganisation of evidence and documents during investigations, "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "which makes it difficult to link the investigation together. "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Furthermore, physically looking through archive files can be time-consuming, and "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "they might miss out important information in the process."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "PIVOT can help to better organise investigation cases and "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "group the relevant information on a digital platform. "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "This helps investigators to manage and easily locate the required information. "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "It also links up relations between people for better visualisation of the case so that detectives will not miss any information."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "PIVOT can assist to manage investigation cases faster than a typical mouse/GUI driven app."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                             |"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| `* * *`  | investigator                               | create investigation cases with a relevant title                                  | store resources inside                                   |"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| `* * *`  | investigator                               | view the list of investigation cases stored in PIVOT                              |                                                          |"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| `* * *`  | investigator                               | indicate and see the state of different cases (e.g. closed/in-progress/cold case) | edit or see the statuses of my cases                     |"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| `* * *`  | investigator                               | add a description to an investigation case                                        | capture key information about the investigation case     |"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| `* * *`  | investigator                               | delete investigation cases                                                        | delete unwanted cases or cases that are wrongly created  |"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| `* * *`  | investigator                               | open investigation cases easily and view the files that are stored inside         | retrieve the necessary information for those who need it |"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| `* * *`  | investigator                               | add relevant documents to an investigation case                                   |                                                          |"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "| `* * *`  | investigator                               | view the list of documents relevant to an investigation case                      |                                                          |"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | delete irrelevant documents to an investigation case                              | remove outdated documents                                |"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | view the list of suspects tied to an investigation case                           | refer to all suspects in an investigation case           |"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | add a list of suspects tied to an investigation case                              |                                                          |"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | delete suspects tied to an investigation case                                     | delete irrelevant suspects                               |"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | view the list of witnesses tied to an investigation case                          | refer to all witnesses in an investigation case          |"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | add a list of witnesses tied to an investigation case                             |                                                          |"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | delete witnesses tied to an investigation case                                    | delete irrelevant witnesses                              |"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | view the list of victims tied to an investigation case                            | refer to all victims in an investigation case            |"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | add a list of victims tied to an investigation case                               |                                                          |"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | delete victims tied to an investigation case                                      | delete irrelevant victims                                |"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| `* * *`  | investigator                               | close the application when I am done using it                                     | safely exit the application                              |"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "(For all use cases below, the **System** is the `PIVOT` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**Use case: Add Investigation Case**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "1.  User requests to create a new active investigation case and specifies a title"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "2.  PIVOT adds the new investigation case"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* 1a. The title is empty."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    * 1a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    "
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\t  Use case ends."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**Use case: List Investigation Case**"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "1.  User requests to list investigation cases"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "2.  PIVOT shows a list of investigation cases"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**Use case: Delete Investigation Case**"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "1. User requests to list investigation cases"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "2. PIVOT shows a list of investigation cases"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "3. User requests to delete a specific investigation case in the list"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "4. PIVOT deletes the investigation case"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "constancensq"
        },
        "content": "  "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    * 3a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      "
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**Use case: Open Investigation Case**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "1. User requests to list investigation cases"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "2. PIVOT shows a list of investigation cases"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "3. User requests to open a specific investigation case in the list"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "4. PIVOT navigates to the specified investigation case page"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "constancensq"
        },
        "content": "  "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    * 3a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      "
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**Use case: Tag Investigation Case**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "1. User requests to list investigation cases"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "2. PIVOT shows a list of investigation cases"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "3. User specifies an investigation case"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "4. PIVOT navigates to the specified investigation case page"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "5. User requests to tag the investigation case with specific tag"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "6. PIVOT tags the investigation case with specified tag"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "constancensq"
        },
        "content": "  "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    * 3a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "      "
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "* 5a. The given tag is invalid."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    * 5a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      "
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "      Use case resumes at step 5."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Use case: Add Description for an Investigation Case**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "constancensq"
        },
        "content": "1. User requests to list investigation cases"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "constancensq"
        },
        "content": "2. PIVOT shows a list of investigation cases"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "constancensq"
        },
        "content": "3. User specifies an investigation case"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "constancensq"
        },
        "content": "4. PIVOT navigates to the specified investigation case page"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "constancensq"
        },
        "content": "5. User requests to add a description to the investigation case"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "constancensq"
        },
        "content": "6. PIVOT adds the description to the investigation case"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "constancensq"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "constancensq"
        },
        "content": "  "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "constancensq"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    * 3a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 5a. The given description is empty."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    * 5a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      "
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      Use case resumes at step 5."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Use case: Add Document to Investigation Case**"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "constancensq"
        },
        "content": "1. User requests to add a document to investigation case, specifies a document title and reference"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "constancensq"
        },
        "content": "2. PIVOT adds a new document to the investigation case"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "constancensq"
        },
        "content": "   "
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "constancensq"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 1a. The title is empty."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    * 1a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    "
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 1b. The reference is empty."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    * 1b1. PIVOT shows an error message."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    "
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 1c. The reference is invalid."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    * 1c1. PIVOT shows an error message."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    "
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Use case: List Document related to Investigation Case**"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "constancensq"
        },
        "content": "1. User requests to list documents related to the case"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "constancensq"
        },
        "content": "2. PIVOT shows a list of documents related to the case"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "constancensq"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Use case: Delete Document from Investigation Case**"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "constancensq"
        },
        "content": "1. User requests to list investigation cases"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "constancensq"
        },
        "content": "2. PIVOT shows a list of investigation cases"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "constancensq"
        },
        "content": "3. User requests to delete a specific investigation case in the list"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "constancensq"
        },
        "content": "4. PIVOT deletes the investigation case"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "constancensq"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "constancensq"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    * 3a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "constancensq"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Use case: Open Document**"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "constancensq"
        },
        "content": "1. User requests to list documents"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "constancensq"
        },
        "content": "2. PIVOT shows a list of documents"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "constancensq"
        },
        "content": "3. User requests to open a specific document in the list"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "constancensq"
        },
        "content": "4. PIVOT opens the specified document"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "constancensq"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    * 3a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    "
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* 4a. The specified document does not exist in the saved reference."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    * 4a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    "
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**Use case: Add Person[Suspect/Witness/Victim] in Investigation Case**"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "1. User requests to list investigation cases"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "2. PIVOT shows a list of investigation cases"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "3. User requests to open a specific investigation case in the list"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "4. PIVOT opens the specified investigation case"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "5. User requests to add a person to a specified category (suspect/witness/victim)."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "6. PIVOT adds the person to a specified category (suspect/witness/victim)."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    * 3a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    "
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* 5a. The given category of person to add is invalid."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    * 5a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    "
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**Use case: List Person[Suspect/Witness/Victim] in Investigation Case**"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "1. User requests to list Persons related to the case."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "2. PIVOT shows a list of Persons related to the case."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**Use case: Delete Person[Suspect/Witness/Victim] in Investigation Case**"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "1. User requests to list all Persons"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "2. PIVOT shows a list of all Persons"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "3. User requests to delete a specific Person from the list"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "4. PIVOT deletes the Person"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    * 3a1. PIVOT shows an error message."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    "
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Use case resumes at step 1."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**Use case: Return to the Main Page**"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "1. User requests to list investigation cases"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "2. PIVOT shows a list of investigation cases"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "3. User requests to open a specific investigation case in the list"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "4. PIVOT navigates to the specified investigation case"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "5. User requests to navigate to the main page"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "6. PIVOT navigates to the main page"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* 1a. User requests to navigate to the main page."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**Use case: Exit Application**"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "1. User requests to exit the application"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "2. PIVOT terminates."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "4.  The system should not take above 2 seconds to execute any command."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* **Investigation Case**: The investigation case encapsulating all relevant data the police wants to keep track of"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* **Investigation Case Tag**: The status of the case (Active/In-Progress, Closed, Cold Case)"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* **Document**: An actual document/file stored in the project directory"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* **Person**: Data stored in the investigation case (For suspects, witnesses or victims related)"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "* **File Paths**: System Location of the specified file inside the project directory"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 87,
      "esmanda3w": 78,
      "Jargonx": 79,
      "-": 307,
      "Vielheim": 99,
      "constancensq": 115
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "Police Investigation Virtual Organisational Tool (PIVOT) is a **desktop app to assist the police investigators in keeping track of their investigations and relevant information. It is optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "If you can type fast, PIVOT can manage your investigation cases faster than traditional GUI apps."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "## Quick start [To be updated]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "1. Download the latest release from [here](https://github.com/AY2021S1-CS2103-F09-2/tp/releases)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for PIVOT."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   * **`list case`** : Lists all investigation cases."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "   * **`add case`**`t:Kovan double murders` : Adds a case named `Kovan double murders` to PIVOT."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "   * **`delete`**`case 3` : Deletes the 3rd case shown in the current list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "* Words in `UPPER_CASE` are parameters supplied by the user. Words in `[SQUARE_BRACKETS]`(with square brackets) optional parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "  e.g. in `add case t:TITLE`, `TITLE` is a parameter which can be used as `add case t:Kovan double murders`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "### Main page"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "The main page of the application when the user first enters the app."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Adding an active investigation case: `add case t:TITLE [s:STATUS] [t/TAG]`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Adds a new investigation case which has the active status by default. The user can provide 3 status types:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "1. `ACTIVE`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "2. `CLOSED`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "3. `COLD`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "User can tag the case they add. Tags cannot contain whitespaces."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `add case t:[TITLE] [s:STATUS] [t/TAG]`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Example: `add case t:Kovan double murders s:Closed t/SerialKiller` creates a new investigation case with the title “Kovan double murders”, the status initalized as a closed case, tagged as SerialKiller."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "#### List all investigation cases: `list case`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Lists all available investigation cases in PIVOT."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Format: `list case`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Delete an investigation case: `delete case CASE_NO`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Deletes the specified investigation case."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `delete case CASE_NO`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Example: `list case` followed by `delete case 2` deletes the 2nd case in the investigation list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Open an investigation case: `open case CASE_NO`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Enters the specified investigation case where users can add more information regarding the case"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "(see Investigation Case Page)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format:  `open case CASE_NO`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Example: `list case` followed by `open case 1` opens the 1st case in the investigation list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "#### Exit application: `exit`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "Exits the application."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "### Investigation Case page"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "The page of the application when the user opens a specified investigation case."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Add investigation case description: `add desc d:DESC`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Adds the description of the investigation"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `add desc d:DESC`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Example: `add desc d:Kovan double murders of twins xxx and yyy` updates the description of this investigation case to “Kovan double murders of twins xxx and yyy”."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Edit investigation case tag: `tag STATUS`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Edits the tag of the investigation (tags: ACTIVE, COLD, CLOSED)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `tag STATUS`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Example: `tag CLOSED` updates the tag status of this investigation case to “CLOSED”."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Adding a document related to the case: `add doc n:TITLE r:FILE_NAME`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Adds a new document that is related to the investigation case."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `add doc n:TITLE r:FILE_NAME`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Example: `add doc n:Case Details r:case_details.pdf` adds a new document with title “Case Details” with the file name case_details.pdf to the investigation case."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "This document must be manually added to the references folder provided before it can be added to the PIVOT system."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "constancensq"
        },
        "content": "#### List all documents related to the case: `list doc`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Lists all added documents that are related to the investigation case."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Format: `list doc`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Delete document: `delete doc DOC_NO `"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Deletes the specified document reference."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `delete doc DOC_NO`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Example: `delete doc 0`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Open document: `open doc DOC_NO`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Opens the specified document reference."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `open doc DOC_NO`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "constancensq"
        },
        "content": "Example: `open doc 0`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Adding a Suspect related to the case: `add suspect n:NAME`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Adds a new suspect related to the investigation case."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `add suspect n:NAME`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Example: `add suspect n:John Doe`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### List all suspects related to the case: `list suspect`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Lists all added suspects that are related to the investigation case."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Format: `list suspect`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Delete suspect: `delete suspect SUSPECT_NO`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Deletes the specified suspect from the list of suspects."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `delete suspect SUSPECT_NO`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Example: `delete suspect 0`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Adding a victim related to the case: `add victim n:NAME`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Adds a new victim that is related to the investigation case."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `add victim n:NAME`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Example: `add victim n:James Lee`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### List all victims related to the case: `list victim`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Lists all added victims that are related to the investigation case."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Format: `list victim`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Delete victim: `delete victim VICTIM_NO`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Deletes the specified victim from the list of victims."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `delete victim VICTIM_NO`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Example: `delete victim 0`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Add a witness related to the case: `add witness n:NAME`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Adds a new witness that is related to the investigation case."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `add witness n:NAME`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Example: `add witness n:John Doe`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### List all witness related to the case: `list witness`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Lists all added witnesses that are related to the investigation case."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Format: `list witness`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "#### Delete suspect: `delete witness WITNESS_NO`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Deletes the specified witness from the list of witnesses."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "Format: `delete witness WITNESS_NO`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Example: `delete witness 0`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Return to main page: `return`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Returns to the application main page."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Exit application: `exit`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "Exits the application."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "### Data Management"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Loading of User Data"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "User data automatically loads when user opens the app"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Saving of User Data"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "User data automatically saves when there is a change in data"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Main Page Commands"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "|Command            | Format                                | Association   |"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "| ----------------- | ------------------------------------- | ------------- | "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "|**case**           | `add case t:TITLE [s:STATUS] [t/TAG]` | Investigation |"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "|**list**           | `list case`                           | Investigation |"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "|**delete**         | `delete case CASE_NO`                 | Investigation |"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "|**open**           | `open case CASE_NO`                   | Investigation |"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "|**exit**           | `exit`                                | General       |"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "#### Investigation Page Commands"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| Command           | Format                        | Association   |"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "| ----------------- | ----------------------------- | ------------- |"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "|**desc**           | `add desc d:DESC`             | Investigation |"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "|**tag**            | `tag STATUS`                  | Investigation |"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "|**document**       | `add doc t:TITLE r:FILE_NAME` | Document      |"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "|**list doc**       | `list doc`                    | Document      |"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "|**delete doc**     | `delete doc DOC_NO`           | Document      |"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "|**open doc**       | `open doc DOC_NO`             | Document      |"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "|**suspect**        | `add suspect n:NAME`          | Suspect       |"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "|**list suspect**   | `list suspect`                | Suspect       |"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "|**delete suspect** | `delete suspect SUSPECT_NO`   | Suspect       |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "|**victim**         | `add victim n:NAME`           | Victim        |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "|**list victim**    | `list victim`                 | Victim        |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "|**delete victim**  | `delete victim VICTIM_NO`     | Victim        |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "|**witness**        | `add witness n:NAME`          | Witness       |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "|**list witness**   | `list witness`                | Witness       |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "|**delete witness** | `delete witness WITNESS_NO`   | Witness       |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "|**return**         | `return`                      | General       |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "|**exit**           | `exit`                        | General       |"
      }
    ],
    "authorContributionMap": {
      "Jargonx": 62,
      "esmanda3w": 11,
      "CodyChew": 55,
      "-": 116,
      "Vielheim": 6,
      "constancensq": 13
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "title: Police Investigation Virtual Organisational Tool"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-F09-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-F09-2/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103-F09-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103-F09-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "**PIVOT is a desktop application to assist the police investigators in keeping track of their investigations and relevant information.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* If you are interested in using PIVOT, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "* If you are interested about developing PIVOT, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "constancensq": 6
    }
  },
  {
    "path": "src/main/java/seedu/pivot/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/pivot/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/pivot/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.JsonPivotStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.PivotStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing PIVOT ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        PivotStorage pivotStorage \u003d new JsonPivotStorage(userPrefs.getPivotFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        storage \u003d new StorageManager(pivotStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s PIVOT and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The data from the sample PIVOT will be used instead if {@code storage}\u0027s PIVOT is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * or an empty PIVOT will be used instead if errors occur when reading {@code storage}\u0027s PIVOT."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Optional\u003cReadOnlyPivot\u003e pivotOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ReadOnlyPivot initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            pivotOptional \u003d storage.readPivot();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            if (!pivotOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample PIVOT\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            initialData \u003d pivotOptional.orElseGet(SampleDataUtil::getSamplePivot);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty PIVOT\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            initialData \u003d new Pivot();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PIVOT\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            initialData \u003d new Pivot();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty PIVOT\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Starting PIVOT \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping PIVOT ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 43,
      "CodyChew": 2,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final String LOG_FILE \u003d \"pivot.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // Common messages"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // Main page messages"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_INVALID_CASE_DISPLAYED_INDEX \u003d \"The case index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_CASES_LISTED_OVERVIEW \u003d \"%1$d cases listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_INCORRECT_MAIN_PAGE \u003d \"Invalid command. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Please return to main page to use this command.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_INCORRECT_CASE_PAGE \u003d \"Invalid command. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Please open a case to use this command.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // Case page messages"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_INVALID_DOCUMENT_DISPLAYED_INDEX \u003d \"The document index provided is invalid\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_INVALID_SUSPECTS_DISPLAYED_INDEX \u003d \"The suspect index provided is invalid\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String MESSAGE_INVALID_WITNESS_DISPLAYED_INDEX \u003d \"The witness index provided is invalid\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_INVALID_VICTIM_DISPLAYED_INDEX \u003d \"The victim index provided is invalid\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "CodyChew": 5,
      "Jargonx": 1,
      "-": 9,
      "constancensq": 7
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates directories of a specified path"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static void createDirectories(Path folderPath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (folderPath !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            Files.createDirectories(folderPath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "CodyChew": 9,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/pivot/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns PIVOT."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @see seedu.pivot.model.Model#getPivot()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    ReadOnlyPivot getPivot();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of cases */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    ObservableList\u003cCase\u003e getFilteredCaseList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns the user prefs\u0027 PIVOT file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Path getPivotFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 14,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.PivotParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final PivotParser pivotParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivotParser \u003d new PivotParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Command command \u003d pivotParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            storage.savePivot(model.getPivot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public ReadOnlyPivot getPivot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return model.getPivot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return model.getFilteredCaseList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Path getPivotFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return model.getPivotFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 22,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Adds a case to PIVOT."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    // Todo: Refine the description of message usage"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_USAGE_MAIN_PAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \": Adds an item of a specified type to PIVOT.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE PARAMETERS\u0027\\n\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"TYPE \u0027case\u0027\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Parameters: t:TITLE\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" case t: Ang Mo Kio Murders\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // Todo: Refine the description of message usage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_USAGE_CASE_PAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \": Adds an item of a specified type to opened case in PIVOT.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE PARAMETERS\u0027\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027suspect\u0027,\u0027victim\u0027,\u0027witness\u0027\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Parameters: n:NAME\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" suspect n:John\\n\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027doc\u0027\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Parameters: n:NAME r:REFERENCE\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" doc n:Evidence r:text1.txt\\n\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027desc\u0027\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Parameters: d:DESC \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" desc d:7 caught for rioting\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "-": 7,
      "Vielheim": 11,
      "constancensq": 9
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Clears PIVOT."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_CLEAR_SUCCESS \u003d \"PIVOT has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.setPivotBook(new Pivot());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return new CommandResult(MESSAGE_CLEAR_SUCCESS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 5,
      "-": 15,
      "Vielheim": 2
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String TYPE_CASE \u003d \"case\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String TYPE_DESC \u003d \"desc\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String TYPE_DOC \u003d \"doc\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String TYPE_SUSPECT \u003d \"suspect\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String TYPE_WITNESS \u003d \"witness\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String TYPE_VICTIM \u003d \"victim\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 17,
      "constancensq": 7
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * Abstract class for deleting different types of items based off of index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    //TODO: Consider abstracting this out further, find a way to represent any item type or show"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    // of all different item types and the delete command usage"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_USAGE_MAIN_PAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \": Deletes the item of a specified type identified by the index number\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            + \" used in the displayed list.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE PARAMETERS\u0027\\n\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"TYPE \u0027case\u0027\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" case 1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_USAGE_CASE_PAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \": Deletes the specified type of item identified by the index number\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \" used in the displayed list in current case.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE PARAMETERS\u0027\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027suspect\u0027,\u0027victim\u0027,\u0027witness\u0027, \u0027docs\u0027\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" suspect 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "Jargonx": 6,
      "-": 8,
      "Vielheim": 3,
      "constancensq": 10
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ALL_CASES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Suspect;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Victim;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Witness;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Edits the details of an existing case in PIVOT."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the specified type identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"by the index number used in the displayed case list.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE PARAMETERS\u0027\\n\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"TYPE \u0027case\u0027\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_STATUS + \"STATUS] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 t:Triple Kovan Murders\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_EDIT_CASE_SUCCESS \u003d \"Edited Case: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CASE \u003d \"This case already exists in PIVOT.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final EditCaseDescriptor editCaseDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param index of the case in the filtered case list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param editCaseDescriptor details to edit the case with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCommand(Index index, EditCaseDescriptor editCaseDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(editCaseDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.editCaseDescriptor \u003d new EditCaseDescriptor(editCaseDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert(StateManager.atMainPage()) : \"Program should be at main page\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case caseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case editedCase \u003d createEditedCase(caseToEdit, editCaseDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!caseToEdit.isSameCase(editedCase) \u0026\u0026 model.hasCase(editedCase)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CASE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.setCase(caseToEdit, editedCase);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_ALL_CASES);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CASE_SUCCESS, editedCase));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Creates and returns a {@code Case} with the details of {@code caseToEdit}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * edited with {@code editCaseDescriptor}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static Case createEditedCase(Case caseToEdit, EditCaseDescriptor editCaseDescriptor) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert caseToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Title updatedTitle \u003d editCaseDescriptor.getTitle().orElse(caseToEdit.getTitle());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description updatedDescription \u003d editCaseDescriptor.getDescription().orElse(caseToEdit.getDescription());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Status updatedStatus \u003d editCaseDescriptor.getStatus().orElse(caseToEdit.getStatus());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cDocument\u003e updatedDocuments \u003d editCaseDescriptor.getDocuments().orElse(caseToEdit.getDocuments());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cSuspect\u003e updatedSuspects \u003d editCaseDescriptor.getSuspects().orElse(caseToEdit.getSuspects());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cVictim\u003e updatedVictims \u003d editCaseDescriptor.getVictims().orElse(caseToEdit.getVictims());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editCaseDescriptor.getTags().orElse(caseToEdit.getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cWitness\u003e updatedWitnesses \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                editCaseDescriptor.getWitnesses().orElse(caseToEdit.getWitnesses());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new Case(updatedTitle, updatedDescription, updatedStatus, updatedDocuments,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                updatedSuspects, updatedVictims, updatedWitnesses, updatedTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 editCaseDescriptor.equals(e.editCaseDescriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Stores the details to edit the case with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * corresponding field value of the case."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static class EditCaseDescriptor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        private Status status;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        private List\u003cDocument\u003e documents;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private List\u003cSuspect\u003e suspects;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private List\u003cVictim\u003e victims;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        private List\u003cWitness\u003e witnesses;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public EditCaseDescriptor() {}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public EditCaseDescriptor(EditCaseDescriptor toCopy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            setStatus(toCopy.status);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            setDocuments(toCopy.documents);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            setSuspects(toCopy.suspects);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            setVictims(toCopy.victims);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            setWitnesses(toCopy.witnesses);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, description,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    status, documents, suspects, victims, witnesses, tags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void setStatus(Status status) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public Optional\u003cStatus\u003e getStatus() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        public void setDocuments(List\u003cDocument\u003e documents) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.documents \u003d documents;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        public Optional\u003cList\u003cDocument\u003e\u003e getDocuments() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return (documents !\u003d null) ? Optional.of(documents) : Optional.empty();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * Sets {@code suspects} to this object\u0027s {@code suspects}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * A defensive copy of {@code suspects} is used internally."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setSuspects(List\u003cSuspect\u003e suspects) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.suspects \u003d (suspects !\u003d null) ? new ArrayList\u003c\u003e(suspects) : null;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code suspects} is null."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public Optional\u003cList\u003cSuspect\u003e\u003e getSuspects() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return (suspects !\u003d null) ? Optional.of(suspects) : Optional.empty();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * Sets {@code victims} to this object\u0027s {@code victims}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * A defensive copy of {@code victims} is used internally."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setVictims(List\u003cVictim\u003e victims) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            this.victims \u003d (victims !\u003d null) ? new ArrayList\u003c\u003e(victims) : null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code victims} is null."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public Optional\u003cList\u003cVictim\u003e\u003e getVictims() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return (victims !\u003d null) ? Optional.of(victims) : Optional.empty();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "         * Sets {@code witnesses} to this object\u0027s {@code witnesses}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "         * A defensive copy of {@code witnesses} is used internally."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        public void setWitnesses(List\u003cWitness\u003e witnesses) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            this.witnesses \u003d (witnesses !\u003d null) ? new ArrayList\u003c\u003e(witnesses) : null;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code witnesses} is null."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "         */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        public Optional\u003cList\u003cWitness\u003e\u003e getWitnesses() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            return (witnesses !\u003d null) ? Optional.of(witnesses) : Optional.empty();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            if (!(other instanceof EditCaseDescriptor)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            EditCaseDescriptor e \u003d (EditCaseDescriptor) other;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                    \u0026\u0026 getStatus().equals(e.getStatus())"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    //\u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u0026\u0026 getStatus().equals(e.getStatus())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    //\u0026\u0026 getSuspects().equals(e.getSuspects())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    //\u0026\u0026 getVictims().equals(e.getVictims())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    //\u0026\u0026 getWitnesses().equals(e.getWitnesses())"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    //\u0026\u0026 getDocuments().equals(e.getDocuments())"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 69,
      "CodyChew": 19,
      "Jargonx": 18,
      "-": 121,
      "Vielheim": 64,
      "constancensq": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting PIVOT as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Finds and lists all cases in PIVOT whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all cases whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.updateFilteredCaseList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                String.format(Messages.MESSAGE_CASES_LISTED_OVERVIEW, model.getFilteredCaseList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 8,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Lists all cases in PIVOT to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public abstract class ListCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \": Lists all items of a specified type.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE\u0027\\n\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"TYPE \u0027case\u0027\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" case\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 8,
      "constancensq": 6
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/OpenCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Abstract class for opening items based on Index."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public abstract class OpenCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // TODO: to be updated when with open doc functionality"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \": Opens the item of a specified type, identified by the index number\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \" used in the displayed list.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Format: \u0027\" + COMMAND_WORD + \" TYPE\u0027\\n\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"TYPE \u0027case\u0027\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" case 1\";;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    protected OpenCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                || (other instanceof OpenCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((OpenCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "CodyChew": 27,
      "constancensq": 7
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/ReturnCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Returns the program to the Main Page."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class ReturnCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"return\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_RETURN_SUCCESS \u003d \"You are now at the Main Page! Type \u0027open case [INDEX]\u0027 \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"to open a case!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ReturnCommand.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Returning back to main page...\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new CommandResult(MESSAGE_RETURN_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 8,
      "CodyChew": 21
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/casecommands/AddCaseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Adds a case to PIVOT."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class AddCaseCommand extends AddCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_CASE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \": Adds a case to PIVOT.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"[\" + PREFIX_STATUS + \"STATUS]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + TYPE_CASE + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + PREFIX_TITLE + \"Bishan Theft \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + PREFIX_STATUS + \"closed\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_ADD_CASE_SUCCESS \u003d \"New case added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CASE \u003d \"This case already exists in PIVOT\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddCaseCommand.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final Case investigationCase;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates an AddCaseCommand to add the specified {@code Case}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param investigationCase investigation Case to be added to PIVOT."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public AddCaseCommand(Case investigationCase) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.investigationCase \u003d investigationCase;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Adding case to PIVOT...\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert(StateManager.atMainPage()) : \"Program should be at main page\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (model.hasCase(investigationCase)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Failed to add case: Tried to add a case that exists in PIVOT\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CASE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        model.addCase(investigationCase);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_CASE_SUCCESS, investigationCase));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                || (other instanceof AddCaseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u0026\u0026 investigationCase.equals(((AddCaseCommand) other).investigationCase));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 48,
      "Vielheim": 16,
      "constancensq": 8
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/casecommands/AddDescriptionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ALL_CASES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Adds a Description to an opened Case in PIVOT."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class AddDescriptionCommand extends AddCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_DESC"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \": Adds a description to opened case in PIVOT. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + PREFIX_DESC + \"DESCRIPTION\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + TYPE_DESC + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            + PREFIX_DESC + \"7 people arrested for rioting\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_ADD_DESCRIPTION_SUCCESS \u003d \"New description added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DESCRIPTION \u003d \"This description already exists for the case!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddDescriptionCommand.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates an AddDescriptionCommand to add the specified {@code Description}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param index Index of the Case in PIVOT."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param description Description to be added."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public AddDescriptionCommand(Index index, Description description) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Adding description to current case...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check for valid index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert(StateManager.atCasePage()) : \"Program should be at case page\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert(index.getZeroBased() \u003c lastShownList.size()) : \"index should be valid\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case stateCase \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description stateCaseDescription \u003d stateCase.getDescription();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // check for same description"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (stateCaseDescription.equals(this.description)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Failed to add description: Tried to add a description that exists in PIVOT\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DESCRIPTION);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // create new updated case"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case updatedCase \u003d new Case(stateCase.getTitle(), this.description, stateCase.getStatus(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                stateCase.getDocuments(), stateCase.getSuspects(), stateCase.getVictims(), stateCase.getWitnesses(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                stateCase.getTags());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_ALL_CASES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_DESCRIPTION_SUCCESS, this.description));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                || (other instanceof AddDescriptionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u0026\u0026 index.equals(((AddDescriptionCommand) other).index)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u0026\u0026 description.equals(((AddDescriptionCommand) other).description));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 10,
      "CodyChew": 1,
      "Vielheim": 73,
      "constancensq": 5
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/casecommands/DeleteCaseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * Deletes a case identified using it\u0027s displayed index from PIVOT."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class DeleteCaseCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String MESSAGE_DELETE_CASE_SUCCESS \u003d \"Deleted Case: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteCaseCommand.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public DeleteCaseCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Deleting case from PIVOT...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atMainPage()) : \"Program should be at main page\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.info(\"Invalid index: \" + targetIndex.getOneBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Case caseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        model.deleteCase(caseToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CASE_SUCCESS, caseToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                || (other instanceof DeleteCaseCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCaseCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 15,
      "Jargonx": 37,
      "constancensq": 6
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/casecommands/ListCaseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ALL_CASES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Lists all cases in PIVOT."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class ListCaseCommand extends ListCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_LIST_CASE_SUCCESS \u003d \"Listed all cases\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ListCaseCommand.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Executing list case command\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atMainPage()) : \"Program should be at main page\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_ALL_CASES);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new CommandResult(MESSAGE_LIST_CASE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                || other instanceof ListCaseCommand; // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 5,
      "constancensq": 36
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/casecommands/OpenCaseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.casecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Opens a specified case in PIVOT."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class OpenCaseCommand extends OpenCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_OPEN_CASE_SUCCESS \u003d \"Opened Case: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(OpenCaseCommand.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Creates an OpenCaseCommand to open the case at specified {@code targetIndex}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param targetIndex Index of the case in PIVOT."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public OpenCaseCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Opening specified case...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atMainPage()) : \"Program should be at main page\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.info(\"Invalid index: \" + targetIndex.getOneBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case caseToOpen \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        StateManager.setState(targetIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_OPEN_CASE_SUCCESS, caseToOpen));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 16,
      "CodyChew": 30,
      "constancensq": 10
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/documentcommands/AddDocumentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.documentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_REFERENCE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ALL_CASES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class AddDocumentCommand extends AddCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_DOC"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \": Adds a document to the opened case.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + PREFIX_REFERENCE + \"REFERENCE\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + TYPE_DOC + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + PREFIX_NAME + \"Location file \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            + PREFIX_REFERENCE + \"test1.txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final String MESSAGE_ADD_DOCUMENT_SUCCESS \u003d \"New document added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_DOCUMENT \u003d \"This document already exists in the case.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddDocumentCommand.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Document doc;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates an AddDocumentCommand to add a {@code Document} to a case with {@code Index}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param index index of a case in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param doc document to be added."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public AddDocumentCommand(Index index, Document doc) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(doc);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.doc \u003d doc;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Adding document to current case...\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check for valid index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert(StateManager.atCasePage()) : \"Program should be at case page\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert(index.getZeroBased() \u003c lastShownList.size()) : \"index should be valid\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //get current case in state"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case stateCase \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        List\u003cDocument\u003e updatedDocuments \u003d stateCase.getDocuments();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check for duplicate"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (updatedDocuments.contains(this.doc)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Failed to add document: Tried to add a document that exists in PIVOT\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DOCUMENT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //add document to existing list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        updatedDocuments.add(this.doc);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //create new updated case"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case updatedCase \u003d new Case(stateCase.getTitle(), stateCase.getDescription(), stateCase.getStatus(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                updatedDocuments, stateCase.getSuspects(), stateCase.getVictims(), stateCase.getWitnesses(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                stateCase.getTags());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_ALL_CASES);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_DOCUMENT_SUCCESS, this.doc));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                || (other instanceof AddDocumentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 doc.equals(((AddDocumentCommand) other).doc)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 index.equals(((AddDocumentCommand) other).index));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 11,
      "CodyChew": 75,
      "Vielheim": 3,
      "constancensq": 5
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/documentcommands/DeleteDocumentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.documentcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ALL_CASES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class DeleteDocumentCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_DELETE_DOCUMENT_SUCCESS \u003d \"Deleted document: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteDocumentCommand.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Index caseIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Index documentIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Creates a DeleteDocumentCommand to delete a {@code Document} at index @code documentIndex}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * from the case at index {@code caseIndex}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param caseIndex index of a case in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param documentIndex document index in the document list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public DeleteDocumentCommand(Index caseIndex, Index documentIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.caseIndex \u003d caseIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.documentIndex \u003d documentIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Deleting document from current case...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assert(StateManager.atCasePage()) : \"Program should be at case page\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(caseIndex.getZeroBased() \u003c lastShownList.size()) : \"index should be valid\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //get case from state"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case stateCase \u003d lastShownList.get(caseIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        List\u003cDocument\u003e updatedDocuments \u003d stateCase.getDocuments();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //document index validation in model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (documentIndex.getZeroBased() \u003e\u003d updatedDocuments.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.info(\"Invalid index: \" + documentIndex.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DOCUMENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //remove document"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Document documentToDelete \u003d updatedDocuments.get(documentIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        updatedDocuments.remove(documentToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Case updatedCase \u003d new Case(stateCase.getTitle(), stateCase.getDescription(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                stateCase.getStatus(), updatedDocuments, stateCase.getSuspects(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                stateCase.getVictims(), stateCase.getWitnesses(), stateCase.getTags());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //update model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_ALL_CASES);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DOCUMENT_SUCCESS, documentToDelete));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                || (other instanceof DeleteDocumentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 caseIndex.equals(((DeleteDocumentCommand) other).caseIndex)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 documentIndex.equals(((DeleteDocumentCommand) other).documentIndex)); // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 18,
      "CodyChew": 65,
      "constancensq": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/suspectcommands/AddSuspectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.suspectcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ALL_CASES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Suspect;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class AddSuspectCommand extends AddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_SUSPECT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \": Adds a suspect to the opened case in PIVOT.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + PREFIX_NAME + \"NAME\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + TYPE_SUSPECT + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            + PREFIX_NAME + \"John Doe\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final String MESSAGE_ADD_SUSPECT_SUCCESS \u003d \"New suspect added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_SUSPECT \u003d \"This suspect already exists in the case.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddSuspectCommand.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final Suspect suspect;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates an AddSuspectCommand to add the specified {@code Suspect}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param suspect"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public AddSuspectCommand(Index index, Suspect suspect) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(suspect);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.suspect \u003d suspect;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Adding suspect to current case...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert(StateManager.atCasePage()) : \"Program should be at case page\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert(index.getZeroBased() \u003c lastShownList.size()) : \"index should be valid\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case openCase \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cSuspect\u003e updatedSuspects \u003d openCase.getSuspects();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (updatedSuspects.contains(suspect)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Failed to add suspect: Tried to add a suspect that exists in PIVOT\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SUSPECT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        updatedSuspects.add(suspect);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case updatedCase \u003d new Case(openCase.getTitle(), openCase.getDescription(), openCase.getStatus(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                openCase.getDocuments(), updatedSuspects, openCase.getVictims(), openCase.getWitnesses(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                openCase.getTags());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        model.setCase(openCase, updatedCase);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_ALL_CASES);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_SUSPECT_SUCCESS, suspect));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                || (other instanceof AddSuspectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u0026\u0026 suspect.equals(((AddSuspectCommand) other).suspect)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 index.equals(((AddSuspectCommand) other).index));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 66,
      "Vielheim": 10,
      "constancensq": 5
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/suspectcommands/DeleteSuspectCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.suspectcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ALL_CASES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Suspect;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class DeleteSuspectCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_DELETE_SUSPECT_SUCCESS \u003d \"Deleted Suspect: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteSuspectCommand.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final Index caseIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final Index suspectIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Creates a DeleteSuspectCommand to delete the suspect at specified index, in the case at specified index."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param caseIndex The index of the case to delete the suspect."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param suspectIndex The index of the suspect to be deleted."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public DeleteSuspectCommand(Index caseIndex, Index suspectIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.caseIndex \u003d caseIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.suspectIndex \u003d suspectIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Deleting suspect from current case...\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assert(StateManager.atCasePage()) : \"Program should be at case page\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(caseIndex.getZeroBased() \u003c lastShownList.size()) : \"index should be valid\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case openCase \u003d lastShownList.get(caseIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cSuspect\u003e updatedSuspects \u003d openCase.getSuspects();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (suspectIndex.getZeroBased() \u003e\u003d updatedSuspects.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.info(\"Invalid index: \" + suspectIndex.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SUSPECTS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Suspect suspectToDelete \u003d updatedSuspects.get(suspectIndex.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        updatedSuspects.remove(suspectIndex.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case updatedCase \u003d new Case(openCase.getTitle(), openCase.getDescription(), openCase.getStatus(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                openCase.getDocuments(), updatedSuspects, openCase.getVictims(), openCase.getWitnesses(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                openCase.getTags());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.setCase(openCase, updatedCase);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_ALL_CASES);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SUSPECT_SUCCESS, suspectToDelete));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                || (other instanceof DeleteSuspectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 caseIndex.equals(((DeleteSuspectCommand) other).caseIndex)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 suspectIndex.equals(((DeleteSuspectCommand) other).suspectIndex)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 72,
      "constancensq": 3
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/victimcommands/AddVictimCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.victimcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ALL_CASES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Victim;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class AddVictimCommand extends AddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_VICTIM"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \": Adds a victim to current case in PIVOT. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_NAME + \"NAME \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + TYPE_VICTIM + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            + PREFIX_NAME + \"John Doe \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_ADD_VICTIM_SUCCESS \u003d \"New victim added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VICTIM \u003d \"This victim already exists in the case\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddVictimCommand.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final Victim victim;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Creates an AddVictimCommand to add the specified {@code Case}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param victim The victim to be added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public AddVictimCommand(Index index, Victim victim) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(victim);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.victim \u003d victim;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Adding victim to current case...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        //check for valid index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert(StateManager.atCasePage()) : \"Program should be at case page\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert(index.getZeroBased() \u003c lastShownList.size()) : \"index should be valid\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case stateCase \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cVictim\u003e updatedVictims \u003d stateCase.getVictims();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (updatedVictims.contains(victim)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Failed to add victim: Tried to add a victim that exists in PIVOT\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_VICTIM);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        updatedVictims.add(victim);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case updatedCase \u003d new Case(stateCase.getTitle(), stateCase.getDescription(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                stateCase.getStatus(), stateCase.getDocuments(), stateCase.getSuspects(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                updatedVictims, stateCase.getWitnesses(), stateCase.getTags());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_ALL_CASES);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_VICTIM_SUCCESS, victim));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                || (other instanceof AddVictimCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 victim.equals(((AddVictimCommand) other).victim)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 index.equals(((AddVictimCommand) other).index));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 10,
      "CodyChew": 1,
      "Vielheim": 5,
      "constancensq": 70
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/victimcommands/DeleteVictimCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.victimcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ALL_CASES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Victim;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Deletes a case identified using it\u0027s displayed index from PIVOT."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class DeleteVictimCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MESSAGE_DELETE_VICTIM_SUCCESS \u003d \"Deleted victim: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteVictimCommand.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final Index caseIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final Index victimIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Creates a DeleteVictimCommand to delete the victim at specified index, in the case at specified index."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param caseIndex The index of the case to delete the victim."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param victimIndex The index of the victim to be deleted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public DeleteVictimCommand(Index caseIndex, Index victimIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.caseIndex \u003d caseIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.victimIndex \u003d victimIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Deleting victim from current case...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atCasePage()) : \"Program should be at case page\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(caseIndex.getZeroBased() \u003c lastShownList.size()) : \"index should be valid\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case stateCase \u003d lastShownList.get(caseIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cVictim\u003e updatedVictims \u003d stateCase.getVictims();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // invalid victim index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (victimIndex.getZeroBased() \u003e\u003d updatedVictims.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.info(\"Invalid index: \" + victimIndex.getOneBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_VICTIM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Victim victimToDelete \u003d updatedVictims.get(victimIndex.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        updatedVictims.remove(victimToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case updatedCase \u003d new Case(stateCase.getTitle(), stateCase.getDescription(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                stateCase.getStatus(), stateCase.getDocuments(), stateCase.getSuspects(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                updatedVictims, stateCase.getWitnesses(), stateCase.getTags());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_ALL_CASES);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_VICTIM_SUCCESS, victimToDelete));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                || (other instanceof DeleteVictimCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 caseIndex.equals(((DeleteVictimCommand) other).caseIndex)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                \u0026\u0026 victimIndex.equals(((DeleteVictimCommand) other).victimIndex)); // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 16,
      "constancensq": 64
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/witnesscommands/AddWitnessCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.witnesscommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ALL_CASES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Witness;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class AddWitnessCommand extends AddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + TYPE_WITNESS"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            + \": Adds a victim to current case in PIVOT. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            + PREFIX_NAME + \"NAME \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + TYPE_WITNESS + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            + PREFIX_NAME + \"John Doe \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String MESSAGE_ADD_WITNESS_SUCCESS \u003d \"New witness added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_WITNESS \u003d \"This witness already exists in the case\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddWitnessCommand.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private final Witness witness;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates an AddWitnessCommand to add the specified {@code Case}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param witness The witness to be added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public AddWitnessCommand(Index index, Witness witness) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        requireNonNull(witness);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        this.witness \u003d witness;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        logger.info(\"Adding witness to current case...\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert(StateManager.atCasePage()) : \"Program should be at case page\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert(index.getZeroBased() \u003c lastShownList.size()) : \"index should be valid\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Case stateCase \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cWitness\u003e updatedWitnesses \u003d stateCase.getWitnesses();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        if (updatedWitnesses.contains(witness)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            logger.warning(\"Failed to add witness: Tried to add a witness that exists in PIVOT\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_WITNESS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        updatedWitnesses.add(witness);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case updatedCase \u003d new Case(stateCase.getTitle(), stateCase.getDescription(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                stateCase.getStatus(), stateCase.getDocuments(), stateCase.getSuspects(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                stateCase.getVictims(), updatedWitnesses, stateCase.getTags());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_ALL_CASES);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_WITNESS_SUCCESS, witness));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                || (other instanceof AddWitnessCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                \u0026\u0026 witness.equals(((AddWitnessCommand) other).witness)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                \u0026\u0026 index.equals(((AddWitnessCommand) other).index));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 10,
      "Jargonx": 60,
      "Vielheim": 10,
      "constancensq": 5
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/commands/witnesscommands/DeleteWitnessCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands.witnesscommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ALL_CASES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Witness;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * Deletes a case identified using it\u0027s displayed index from PIVOT."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class DeleteWitnessCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String MESSAGE_DELETE_WITNESS_SUCCESS \u003d \"Deleted witness: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(DeleteWitnessCommand.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private final Index caseIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private final Index witnessIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     * Creates a DeleteWitnessCommand to delete the witness at specified index, in the case at specified index."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     * @param caseIndex The index of the case to delete the witness."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     * @param witnessIndex The index of the witness to be deleted."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public DeleteWitnessCommand(Index caseIndex, Index witnessIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        this.caseIndex \u003d caseIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        this.witnessIndex \u003d witnessIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.info(\"Deleting witness from current case...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cCase\u003e lastShownList \u003d model.getFilteredCaseList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(StateManager.atCasePage()) : \"Program should be at case page\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assert(caseIndex.getZeroBased() \u003c lastShownList.size()) : \"index should be valid\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Case stateCase \u003d lastShownList.get(caseIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cWitness\u003e updatedWitnesses \u003d stateCase.getWitnesses();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        // invalid witness index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        if (witnessIndex.getZeroBased() \u003e\u003d updatedWitnesses.size()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.info(\"Invalid index: \" + witnessIndex.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_WITNESS_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Witness witnessToDelete \u003d updatedWitnesses.get(witnessIndex.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        updatedWitnesses.remove(witnessToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Case updatedCase \u003d new Case(stateCase.getTitle(), stateCase.getDescription(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                stateCase.getStatus(), stateCase.getDocuments(), stateCase.getSuspects(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                stateCase.getVictims(), updatedWitnesses, stateCase.getTags());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        model.setCase(stateCase, updatedCase);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        model.updateFilteredCaseList(PREDICATE_SHOW_ALL_CASES);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_WITNESS_SUCCESS, witnessToDelete));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                || (other instanceof DeleteWitnessCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                \u0026\u0026 caseIndex.equals(((DeleteWitnessCommand) other).caseIndex)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                \u0026\u0026 witnessIndex.equals(((DeleteWitnessCommand) other).witnessIndex)); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 17,
      "Jargonx": 59,
      "constancensq": 5
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/AddCaseCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.AddCaseCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Suspect;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Victim;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Witness;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class AddCaseCommandParser implements Parser\u003cAddCaseCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public AddCaseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert(StateManager.atMainPage()) : \"Program should be at main page\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_STATUS, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCaseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Description description \u003d new Description(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Status status \u003d ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).orElse(\"active\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cDocument\u003e documents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cSuspect\u003e suspects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cVictim\u003e victims \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cWitness\u003e witnesses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case investigationCase \u003d new Case(title, description, status, documents,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                suspects, victims, witnesses, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new AddCaseCommand(investigationCase);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 48,
      "Vielheim": 3
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INCORRECT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INCORRECT_MAIN_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_CASE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_DOC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_SUSPECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_VICTIM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_WITNESS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.PivotParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atMainPage()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return parseMainPage(matcher);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (StateManager.atCasePage()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return parseCasePage(matcher);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns relevant AddCommand by calling specific parser for main page."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param matcher"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @return AddCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @throws ParseException if matcher does not match or incorrect type"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static AddCommand parseMainPage(Matcher matcher) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    AddCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        case TYPE_CASE:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return new AddCaseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_DESC:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_DOC:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_SUSPECT:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_WITNESS:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_VICTIM:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_CASE_PAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    AddCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns relevant AddCommand by calling specific parser for case page."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param matcher"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @return AddCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @throws ParseException if matcher does not match or incorrect type"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static AddCommand parseCasePage(Matcher matcher) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    AddCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_CASE:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_MAIN_PAGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_DESC:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return new AddDescriptionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_DOC:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return new AddDocumentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_SUSPECT:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return new AddSuspectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_WITNESS:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            return new AddWitnessCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_VICTIM:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return new AddVictimCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    AddCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 26,
      "CodyChew": 1,
      "Jargonx": 1,
      "-": 18,
      "Vielheim": 38,
      "constancensq": 35
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/AddDescriptionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.AddDescriptionCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class AddDescriptionCommandParser implements Parser\u003cAddDescriptionCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public AddDescriptionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert(StateManager.atCasePage()) : \"Program should be at case page\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESC);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESC)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    AddDescriptionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        .getValue(PREFIX_DESC).orElse(\"\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index index \u003d StateManager.getState();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return new AddDescriptionCommand(index, description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 9,
      "Vielheim": 23
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/AddDocumentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_REFERENCE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.documentcommands.AddDocumentCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class AddDocumentCommandParser implements Parser\u003cAddDocumentCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDocumentCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * and returns an AddDocumentCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public AddDocumentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert(StateManager.atCasePage()) : \"Program should be at case page\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_REFERENCE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_REFERENCE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDocumentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Index index \u003d StateManager.getState();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Reference reference \u003d ParserUtil.parseReference(argMultimap.getValue(PREFIX_REFERENCE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!reference.isExists()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(Reference.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Document doc \u003d new Document(name, reference);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new AddDocumentCommand(index, doc);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 10,
      "CodyChew": 36,
      "Vielheim": 3
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/AddSuspectCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.suspectcommands.AddSuspectCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Suspect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class AddSuspectCommandParser implements Parser\u003cAddSuspectCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public AddSuspectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert(StateManager.atCasePage()) : \"Program should be at case page\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSuspectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Index index \u003d StateManager.getState();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Suspect suspect \u003d new Suspect(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new AddSuspectCommand(index, suspect);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 30,
      "Vielheim": 2
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/AddVictimCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.victimcommands.AddVictimCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Victim;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class AddVictimCommandParser implements Parser\u003cAddVictimCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public AddVictimCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assert(StateManager.atCasePage()) : \"Program should be at case page\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVictimCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index index \u003d StateManager.getState();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Victim victim \u003d new Victim(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new AddVictimCommand(index, victim);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 10,
      "Jargonx": 1,
      "Vielheim": 1,
      "constancensq": 20
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/AddWitnessCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.witnesscommands.AddWitnessCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Witness;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class AddWitnessCommandParser implements Parser\u003cAddWitnessCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public AddWitnessCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assert(StateManager.atCasePage()) : \"Program should be at case page\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddWitnessCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Index index \u003d StateManager.getState();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Witness witness \u003d new Witness(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return new AddWitnessCommand(index, witness);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 10,
      "Jargonx": 20,
      "Vielheim": 2
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t:\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n:\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final Prefix PREFIX_REFERENCE \u003d new Prefix(\"r:\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s:\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final Prefix PREFIX_DESC \u003d new Prefix(\"d:\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "CodyChew": 2,
      "-": 10,
      "Vielheim": 1,
      "constancensq": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INCORRECT_CASE_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INCORRECT_MAIN_PAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_CASE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_DOC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_SUSPECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_VICTIM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_WITNESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.PivotParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.DeleteCaseCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.documentcommands.DeleteDocumentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.suspectcommands.DeleteSuspectCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.victimcommands.DeleteVictimCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.witnesscommands.DeleteWitnessCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atMainPage()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return parseMainPage(matcher);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (StateManager.atCasePage()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return parseCasePage(matcher);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Returns relevant DeleteCommand for main page."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param matcher"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @return DeleteCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if matcher does not match or incorrect type."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public DeleteCommand parseMainPage(Matcher matcher) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    DeleteCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        final String deleteType \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        final String indexString \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        switch (deleteType) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_CASE:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            Index index \u003d ParserUtil.getParsedIndex(indexString, DeleteCommand.MESSAGE_USAGE_MAIN_PAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return new DeleteCaseCommand(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_DOC:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_SUSPECT:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_WITNESS:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_VICTIM:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_CASE_PAGE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    DeleteCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Returns relevant DeleteCommand for case page."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param matcher"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @return DeleteCommand"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if matcher does not match or incorrect type."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public DeleteCommand parseCasePage(Matcher matcher) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    DeleteCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final String deleteType \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final String indexString \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (deleteType.equals(TYPE_CASE)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_MAIN_PAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index index \u003d ParserUtil.getParsedIndex(indexString, DeleteCommand.MESSAGE_USAGE_CASE_PAGE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index caseIndex \u003d StateManager.getState();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        switch (deleteType) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_DOC:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return new DeleteDocumentCommand(caseIndex, index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_SUSPECT:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return new DeleteSuspectCommand(caseIndex, index);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_WITNESS:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            return new DeleteWitnessCommand(caseIndex, index);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        case TYPE_VICTIM:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return new DeleteVictimCommand(caseIndex, index);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    DeleteCommand.MESSAGE_USAGE_CASE_PAGE));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 20,
      "Jargonx": 13,
      "CodyChew": 1,
      "-": 15,
      "constancensq": 67
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_STATUS, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditCommand.EditCaseDescriptor editCaseDescriptor \u003d new EditCommand.EditCaseDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            editCaseDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            editCaseDescriptor.setStatus(ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCaseDescriptor::setTags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!editCaseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new EditCommand(index, editCaseDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 17,
      "CodyChew": 1,
      "-": 55,
      "Vielheim": 1,
      "constancensq": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INCORRECT_MAIN_PAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_CASE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.PivotParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.ListCaseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * and returns a ListCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (StateManager.atCasePage()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new ParseException(MESSAGE_INCORRECT_MAIN_PAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!commandWord.equals(TYPE_CASE)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new ListCaseCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 9,
      "Vielheim": 4,
      "constancensq": 28
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/OpenCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_CASE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.PivotParser.BASIC_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.OpenCaseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Parses input arguments and creates a new OpenCommand Object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class OpenCommandParser implements Parser\u003cOpenCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the OpenCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * and returns an OpenCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public OpenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final String openType \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final String indexString \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        Index index \u003d ParserUtil.getParsedIndex(indexString, OpenCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        switch(openType) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        case TYPE_CASE:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return new OpenCaseCommand(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 8,
      "CodyChew": 33,
      "constancensq": 4
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Obtains the parsed index and throws relevant parse exception based on messageUsage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param indexString"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param messageUsage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @return Index"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if specified index is invalid (not non-zero unsigned integer)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static Index getParsedIndex(String indexString, String messageUsage) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return ParserUtil.parseIndex(indexString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, messageUsage), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String trimmedTitle \u003d name.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Name.isValidName(trimmedTitle)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new Name(trimmedTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Parses a {@code String status} into an {@code Status}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @throws ParseException if the given {@code status} is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static Status parseStatus(String status) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String trimmedStatus \u003d status.trim();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!Status.isValidStatus(trimmedStatus)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new ParseException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return Status.createStatus(trimmedStatus);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Parses a {@code String reference}  into an {@code Reference}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @throws ParseException if the given {@code reference}  is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static Reference parseReference(String reference) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(reference);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        String trimmedReference \u003d reference.trim();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!Reference.isValidReference(trimmedReference)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new ParseException(Reference.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new Reference(trimmedReference);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Parses {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 25,
      "CodyChew": 24,
      "-": 63,
      "Vielheim": 15,
      "constancensq": 31
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/PivotParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ReturnCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class PivotParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return new OpenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        case ReturnCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return new ReturnCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 16,
      "CodyChew": 6,
      "-": 60,
      "constancensq": 2
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * E.g. \u0027n:\u0027 in \u0027add witness n:James\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/pivot/logic/state/StateManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.state;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.ui.UiStateManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Tracks the state of the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class StateManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static Optional\u003cIndex\u003e state \u003d Optional.empty();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StateManager.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Gets the state of the program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @return Index of case that the program is at,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * or null if at main page."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static Index getState() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return state.orElse(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Sets the state of program to a case index."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param index Index of a case in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static void setState(Index index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"StateManager: Setting state with index\" + index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assert (index !\u003d null) : \"index should not be null\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        state \u003d Optional.of(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        UiStateManager.setCasePanelState(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Resets the state of program to an empty state."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static void resetState() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"StateManager: Resetting State\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        state \u003d Optional.empty();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        UiStateManager.resetCasePanelState();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Checks if the state of the program is at an investigation case."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @return true if the state is non empty."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static boolean atCasePage() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return state.isPresent();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Checks if the state of the program is at the main page."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @return true if the state of the program is empty."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static boolean atMainPage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return state.isEmpty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Requests UIStateManager to refresh the GUI."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static void refresh() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"StateManager: Requests UIStateManager to refresh state\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        UiStateManager.refresh();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "CodyChew": 57,
      "Vielheim": 14
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Predicate\u003cCase\u003e PREDICATE_SHOW_ALL_CASES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Path getPivotFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void setPivotFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void setPivotBook(ReadOnlyPivot addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    ReadOnlyPivot getPivot();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns true if a case with the same identity as {@code case} exists in the address book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    boolean hasCase(Case investigationCase);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Deletes the given case."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The case must exist in PIVOT."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void deleteCase(Case target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Adds the given case."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * {@code case} must not already exist in PIVOT."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void addCase(Case investigationCase);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Replaces the given case {@code target} with {@code editedCase}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The case identity of {@code editedCase} must not be the same as another existing case in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void setCase(Case target, Case editedCase);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns an unmodifiable view of the filtered case list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    default ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Updates the filter of the filtered case list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void updateFilteredCaseList(Predicate\u003cCase\u003e predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 21,
      "-": 64,
      "Vielheim": 6
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Represents the in-memory model of the PIVOT data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final Pivot pivot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final FilteredList\u003cCase\u003e filteredCases;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Initializes a ModelManager with the given PIVOT and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public ModelManager(ReadOnlyPivot pivot, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireAllNonNull(pivot, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.fine(\"Initializing with PIVOT: \" + pivot + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.pivot \u003d new Pivot(pivot);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        filteredCases \u003d new FilteredList\u003c\u003e(this.pivot.getCaseList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this(new Pivot(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Path getPivotFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return userPrefs.getPivotFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPivotFilePath(Path pivotFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(pivotFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        userPrefs.setPivotFilePath(pivotFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PIVOT \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPivotBook(ReadOnlyPivot pivot) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.pivot.resetData(pivot);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public ReadOnlyPivot getPivot() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivot;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean hasCase(Case investigationCase) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivot.hasCase(investigationCase);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void deleteCase(Case target) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivot.removeCase(target);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void addCase(Case investigationCase) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivot.addCase(investigationCase);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        updateFilteredCaseList(PREDICATE_SHOW_ALL_CASES);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireAllNonNull(target, editedCase);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivot.setCase(target, editedCase);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        StateManager.refresh();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Case List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Case} backed by the internal list of"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * {@code versionedPivot}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return filteredCases;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        filteredCases.setPredicate(predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivot.equals(other.pivot)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 filteredCases.equals(other.filteredCases);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 46,
      "-": 105,
      "Vielheim": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/Pivot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.UniqueCaseList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Wraps all data at the PIVOT level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Duplicates are not allowed (by .isSameCase comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class Pivot implements ReadOnlyPivot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final UniqueCaseList cases;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        cases \u003d new UniqueCaseList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Pivot() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Creates a PIVOT using the Cases in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Pivot(ReadOnlyPivot toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Replaces the contents of the case list with {@code cases}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * {@code cases} must not contain duplicate cases."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setCases(List\u003cCase\u003e cases) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.cases.setCases(cases);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Resets the existing data of this {@code PIVOT} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void resetData(ReadOnlyPivot newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        setCases(newData.getCaseList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    //// case-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns true if a case with the same identity as {@code case} exists in PIVOT."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean hasCase(Case investigationCase) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return cases.contains(investigationCase);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Adds a case to PIVOT."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The case must not already exist in PIVOT."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void addCase(Case p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        cases.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Replaces the given case {@code target} in the list with {@code editedCase}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * {@code target} must exist in PIVOT."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The case identity of {@code editedCase} must not be the same as another existing case in PIVOT."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(editedCase);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        cases.setCase(target, editedCase);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Removes {@code key} from this {@code PIVOT}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * {@code key} must exist in PIVOT."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void removeCase(Case key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        cases.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return cases.asUnmodifiableObservableList().size() + \" cases\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public ObservableList\u003cCase\u003e getCaseList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return cases.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                || (other instanceof Pivot // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 cases.equals(((Pivot) other).cases));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return cases.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 43,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/ReadOnlyPivot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Unmodifiable view of a PIVOT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public interface ReadOnlyPivot {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns an unmodifiable view of the cases list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * This list will not contain any duplicate cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    ObservableList\u003cCase\u003e getCaseList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 7,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Path getPivotFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Path pivotFilePath \u003d Paths.get(\"data\" , \"pivot.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        setPivotFilePath(newUserPrefs.getPivotFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Path getPivotFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivotFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPivotFilePath(Path pivotFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(pivotFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.pivotFilePath \u003d pivotFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 pivotFilePath.equals(o.pivotFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return Objects.hash(guiSettings, pivotFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + pivotFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 12,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Alphanumeric.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public abstract class Alphanumeric {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            \"Only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The first character of the input must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final String alphaNum;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param alphaNum A valid alphaNum."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    protected Alphanumeric(String alphaNum, boolean canBeBlank) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(alphaNum);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        checkArgument(isValidAlphanum(alphaNum, canBeBlank), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.alphaNum \u003d alphaNum;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public String getAlphaNum() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return alphaNum;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    protected static boolean isValidAlphanum(String test, boolean canBeBlank) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return canBeBlank"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                ? test.isEmpty() || test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                : test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return alphaNum;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                || (other instanceof Alphanumeric // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 alphaNum.equals(((Alphanumeric) other).alphaNum)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return Objects.hash(alphaNum);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "CodyChew": 43,
      "Vielheim": 12,
      "constancensq": 2
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Case.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Represents a Case in PIVOT."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class Case {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final List\u003cSuspect\u003e suspects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final List\u003cVictim\u003e victims \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private final List\u003cWitness\u003e witnesses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final List\u003cDocument\u003e documents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Case(Title title, Description description, Status status, List\u003cDocument\u003e documents,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                List\u003cSuspect\u003e suspects, List\u003cVictim\u003e victims, List\u003cWitness\u003e witnesses, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireAllNonNull(title, description, status, documents, suspects, victims, witnesses, tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.documents.addAll(documents);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.suspects.addAll(suspects);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.victims.addAll(victims);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        this.witnesses.addAll(witnesses);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public List\u003cDocument\u003e getDocuments() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return documents.stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public List\u003cSuspect\u003e getSuspects() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return suspects.stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public List\u003cVictim\u003e getVictims() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return victims.stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public List\u003cWitness\u003e getWitnesses() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return witnesses.stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns true if both cases of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * This defines a weaker notion of equality between two cases."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean isSameCase(Case otherCase) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (otherCase \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return otherCase !\u003d null"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getStatus().equals(getStatus());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns true if both cases have the same identity and data fields."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * This defines a stronger notion of equality between two cases."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!(other instanceof Case)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case otherCase \u003d (Case) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return otherCase.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getDocuments().equals(getDocuments())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getSuspects().equals(getSuspects())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getVictims().equals(getVictims())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getWitnesses().equals(getWitnesses())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 otherCase.getTags().equals(getTags());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return Objects.hash(title, description, status, documents,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            suspects, victims, witnesses, tags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                .append(getStatus())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                .append(\" Documents: \");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        getDocuments().forEach(builder::append);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        builder.append(\" Suspects: \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        getSuspects().forEach(builder::append);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        builder.append(\" Victims: \");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        getVictims().forEach(builder::append);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        builder.append(\" Witnesses: \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        getWitnesses().forEach(builder::append);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 35,
      "CodyChew": 10,
      "Jargonx": 15,
      "-": 66,
      "Vielheim": 23,
      "constancensq": 4
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/CasePerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Encapsulates a Person related to an Investigation Case."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public abstract class CasePerson {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public CasePerson(Name name) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "Vielheim": 37
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Represents an Investigation Case\u0027s description in PIVOT."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class Description extends Alphanumeric {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final boolean CAN_BE_BLANK \u003d true;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        super(description, CAN_BE_BLANK);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Can be blank."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return isValidAlphanum(test, CAN_BE_BLANK);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "Vielheim": 29
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Document.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class Document {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public final Name name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public final Reference reference;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Constructs an {@code Document}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param reference A valid reference."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Document(Name name, Reference reference) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(reference);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.reference \u003d reference;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Reference getReference() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return this.reference;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                || (other instanceof Document // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 name.equals(((Document) other).name)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 reference.equals(((Document) other).reference)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return Objects.hash(name, reference);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return \"Name: \" + this.name + \", Reference: \" + this.reference;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "CodyChew": 46,
      "Vielheim": 3
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Represents a Person\u0027s name in the PIVOT."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class Name extends Alphanumeric {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final boolean CAN_BE_BLANK \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        super(name, CAN_BE_BLANK);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static boolean isValidName(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return isValidAlphanum(name, CAN_BE_BLANK);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "CodyChew": 4,
      "-": 18,
      "Vielheim": 3
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cCase\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean test(Case investigationCase) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(investigationCase.getTitle().getAlphaNum(),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "-": 26,
      "Vielheim": 2
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Reference.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents a Document\u0027s reference in an investigation case."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidReference(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class Reference {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            \"File should be placed in the ./reference folder. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                    + \"Please only enter the non-blank file name with its extension.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final String DEFAULT_FILEPATH \u003d \"./references/\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final Path path;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final String fileName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Constructs a {@code Reference}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param fileName A valid file name in the default folder."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Reference(String fileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        checkArgument(isValidReference(fileName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.path \u003d Paths.get(DEFAULT_FILEPATH + fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Returns true if a given file path is valid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static boolean isValidReference(String fileName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (fileName.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return FileUtil.isValidPath(DEFAULT_FILEPATH + fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Returns true is the {@code Reference} exists in the program."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public boolean isExists() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return FileUtil.isFileExists(path);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return this.path.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                || (other instanceof Reference // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                \u0026\u0026 path.equals(((Reference) other).path)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return Objects.hash(path);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return this.fileName;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "CodyChew": 71,
      "Vielheim": 2
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Status.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    ACTIVE, COLD, CLOSED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Status can only be either active, cold or closed\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static Status createStatus(String status) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return Status.valueOf(status.toUpperCase());"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns true if a given string is a valid status."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static boolean isValidStatus(String test) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        for (Status status : Status.values()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            if (status.name().equals(test.toUpperCase())) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 21,
      "Vielheim": 2
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Suspect.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Represents a Suspect in the investigation case."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class Suspect extends CasePerson {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Constructs a {@code Suspect}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public Suspect(Name name) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns true if both suspects have the same identity and data fields."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * This defines a stronger notion of equality between two suspects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!(other instanceof Suspect)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Suspect otherSuspect \u003d (Suspect) other;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return otherSuspect.getName().equals(getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "Vielheim": 33
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Represents a Title of a Case in PIVOT."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class Title extends Alphanumeric {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            \"Titles should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final boolean CAN_BE_BLANK \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        super(title, CAN_BE_BLANK);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static boolean isValidTitle(String title) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return isValidAlphanum(title, CAN_BE_BLANK);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "CodyChew": 24
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/UniqueCaseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.exceptions.CaseNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.exceptions.DuplicateCaseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * A list of cases that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * A case is considered unique by comparing using {@code Case#isSameCase(Case)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * cases uses Case#isSameCase(Case) for equality so as to ensure that the case being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * unique in terms of identity in the UniqueCaseList. However, the removal of a case uses Case#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * as to ensure that the case with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * @see Case#isSameCase(Case)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class UniqueCaseList implements Iterable\u003cCase\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final ObservableList\u003cCase\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final ObservableList\u003cCase\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns true if the list contains an equivalent case as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean contains(Case toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCase);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Adds a case to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The case must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void add(Case toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new DuplicateCaseException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Replaces the case {@code target} in the list with {@code editedCase}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The case identity of {@code editedCase} must not be the same as another existing case in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireAllNonNull(target, editedCase);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CaseNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!target.isSameCase(editedCase) \u0026\u0026 contains(editedCase)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new DuplicateCaseException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        internalList.set(index, editedCase);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Removes the equivalent case from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * The case must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void remove(Case toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new CaseNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setCases(UniqueCaseList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Replaces the contents of this list with {@code cases}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * {@code cases} must not contain duplicate cases."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setCases(List\u003cCase\u003e cases) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireAllNonNull(cases);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!casesAreUnique(cases)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new DuplicateCaseException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        internalList.setAll(cases);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public ObservableList\u003cCase\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Iterator\u003cCase\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                || (other instanceof UniqueCaseList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueCaseList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns true if {@code cases} contains only unique cases."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private boolean casesAreUnique(List\u003cCase\u003e cases) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        for (int i \u003d 0; i \u003c cases.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            for (int j \u003d i + 1; j \u003c cases.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                if (cases.get(i).isSameCase(cases.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 137
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Victim.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Represents a Victim in the investigation case."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class Victim extends CasePerson {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Constructs a {@code Victim}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public Victim(Name name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns true if both suspects have the same identity and data fields."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * This defines a stronger notion of equality between two suspects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!(other instanceof Victim)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Victim otherVictim \u003d (Victim) other;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return otherVictim.getName().equals(getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "Vielheim": 20,
      "constancensq": 14
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/Witness.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * Represents a Witness in the investigation case."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class Witness extends CasePerson {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Constructs a {@code Witness}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public Witness(Name name) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns true if both suspects have the same identity and data fields."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * This defines a stronger notion of equality between two suspects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        if (!(other instanceof Witness)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        Witness otherWitness \u003d (Witness) other;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return otherWitness.getName().equals(getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "Jargonx": 26,
      "Vielheim": 9
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/exceptions/CaseNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Signals that the operation is unable to find the specified case."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class CaseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 6
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/investigationcase/exceptions/DuplicateCaseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Signals that the operation will result in duplicate Cases (Cases are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class DuplicateCaseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public DuplicateCaseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        super(\"Operation would result in duplicate cases\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 11
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Represents a Tag in PIVOT."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/pivot/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Suspect;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Victim;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Witness;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Contains utility methods for populating {@code PIVOT} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static List\u003cWitness\u003e sampleWitnesses \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            List.of(new Witness(new Name(\"Mary\")), new Witness(new Name(\"Janice\"))));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static List\u003cDocument\u003e sampleDocuments \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            List.of(new Document(new Name(\"name\"), new Reference(\"test1.txt\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static List\u003cSuspect\u003e sampleSuspects \u003d getSuspectList(\"Alex\", \"Bernice\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static List\u003cVictim\u003e sampleVictims \u003d getVictimList(\"Tom\", \"John\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static Description sampleDescription \u003d new Description(\"7 people arrested for rioting\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static Case[] getSampleCases() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new Case[] {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            new Case(new Title(\"Ang Mo Kio Car Theft\"), sampleDescription,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                    Status.createStatus(\"active\"), sampleDocuments,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    sampleSuspects, sampleVictims,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                    sampleWitnesses, getTagSet()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            new Case(new Title(\"Bishan Shopping Theft\"), sampleDescription,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                    Status.createStatus(\"closed\"), sampleDocuments,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    sampleSuspects, sampleVictims, sampleWitnesses, getTagSet()),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            new Case(new Title(\"Cha Bee Hoon Stall Fire\"), sampleDescription,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    Status.createStatus(\"cold\"), sampleDocuments,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    sampleSuspects, sampleVictims, sampleWitnesses, getTagSet()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            new Case(new Title(\"Dhoby Ghaut Murder Case\"), sampleDescription,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                    Status.createStatus(\"active\"), sampleDocuments,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    sampleSuspects, sampleVictims, sampleWitnesses, getTagSet()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            new Case(new Title(\"IceCream Man Harassment\"), sampleDescription,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    Status.createStatus(\"active\"), sampleDocuments,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    sampleSuspects, sampleVictims, sampleWitnesses, getTagSet()),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            new Case(new Title(\"Roti Prata Shop Robbery\"), sampleDescription,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    Status.createStatus(\"active\"), sampleDocuments,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                    sampleSuspects, sampleVictims, sampleWitnesses, getTagSet())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static ReadOnlyPivot getSamplePivot() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot sampleAb \u003d new Pivot();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        for (Case sampleCase : getSampleCases()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            sampleAb.addCase(sampleCase);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Returns a witness list containing the list of strings given."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static List\u003cWitness\u003e getWitnessList(String... strings) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                .map(string -\u003e new Witness(new Name(string)))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Returns a suspect list containing the list of strings given."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static List\u003cSuspect\u003e getSuspectList(String... suspects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return Arrays.stream(suspects)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .map(string -\u003e new Suspect(new Name(string)))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Returns a victim list containing the list of strings given."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static List\u003cVictim\u003e getVictimList(String... victims) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return Arrays.stream(victims)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .map(string -\u003e new Victim(new Name(string)))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 23,
      "Jargonx": 11,
      "CodyChew": 11,
      "-": 26,
      "Vielheim": 13,
      "constancensq": 20
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonAdaptedCase.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Suspect;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Victim;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Witness;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Jackson-friendly version of {@link Case}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "class JsonAdaptedCase {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Case\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedCase.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private final List\u003cJsonAdaptedDocument\u003e documents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final List\u003cJsonAdaptedSuspect\u003e suspects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final List\u003cJsonAdaptedVictim\u003e victims \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private final List\u003cJsonAdaptedWitness\u003e witnesses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Constructs a {@code JsonAdaptedCase} with the given case details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public JsonAdaptedCase(@JsonProperty(\"title\") String title, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            @JsonProperty(\"status\") String status,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            @JsonProperty(\"documents\") List\u003cJsonAdaptedDocument\u003e documents,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            @JsonProperty(\"suspects\") List\u003cJsonAdaptedSuspect\u003e suspects,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            @JsonProperty(\"victims\") List\u003cJsonAdaptedVictim\u003e victims,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            @JsonProperty(\"witnesses\") List\u003cJsonAdaptedWitness\u003e witnesses,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (documents !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.documents.addAll(documents);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        if (witnesses !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            this.witnesses.addAll(witnesses);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (suspects !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.suspects.addAll(suspects);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (victims !\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            this.victims.addAll(victims);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Converts a given {@code Case} into this class for Jackson use."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public JsonAdaptedCase(Case source) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        title \u003d source.getTitle().getAlphaNum();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        description \u003d source.getDescription().getAlphaNum();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        status \u003d source.getStatus().name();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        documents.addAll(source.getDocuments().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                .map(JsonAdaptedDocument::new)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        suspects.addAll(source.getSuspects().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .map(JsonAdaptedSuspect::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        victims.addAll(source.getVictims().stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .map(JsonAdaptedVictim::new)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        witnesses.addAll(source.getWitnesses().stream()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                .map(JsonAdaptedWitness::new)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Converts this Jackson-friendly adapted case object into the model\u0027s {@code Case} object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted case."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Case toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"Converting JSON to Case\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final List\u003cTag\u003e caseTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            caseTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Title is null. Check data\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Title is invalid. Check data\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Description is null. Check data\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Description is invalid. Check data\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Status is null. Check data\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!Status.isValidStatus(status)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Status is invalid. Check data\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final Status modelStatus \u003d Status.createStatus(status);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        final List\u003cSuspect\u003e modelSuspects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        for (JsonAdaptedSuspect suspect : suspects) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            modelSuspects.add(suspect.toModelType());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final List\u003cVictim\u003e modelVictims \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        for (JsonAdaptedVictim victim : victims) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            modelVictims.add(victim.toModelType());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        final List\u003cWitness\u003e modelWitnesses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        for (JsonAdaptedWitness witness : witnesses) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            modelWitnesses.add(witness.toModelType());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        final List\u003cDocument\u003e modelDocument \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        for (JsonAdaptedDocument document : documents) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            modelDocument.add(document.toModelType());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(caseTags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new Case(modelTitle, modelDescription, modelStatus, modelDocument,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                modelSuspects, modelVictims, modelWitnesses, modelTags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 34,
      "CodyChew": 23,
      "Jargonx": 15,
      "-": 45,
      "Vielheim": 41,
      "constancensq": 10
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonAdaptedDocument.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " * Jackson-friendly version of {@link Document}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "class JsonAdaptedDocument {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Document\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedDocument.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final String reference;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Constructs a {@code JsonAdaptedDocument} with the given {@code documentStorageName }."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public JsonAdaptedDocument(@JsonProperty(\"name\") String name, @JsonProperty(\"reference\") String reference) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.reference \u003d reference;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Converts a given {@code Document} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public JsonAdaptedDocument(Document source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        name \u003d source.getName().getAlphaNum();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        reference \u003d source.getReference().getFileName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Converts this Jackson-friendly adapted Document object into the model\u0027s {@code Document} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Document."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public Document toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"Converting JSON to Document\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Document name is null. Check data\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"document name\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (reference \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Document reference is null. Check data\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"document reference\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Document name is invalid. Check data\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        if (!Reference.isValidReference(reference)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Document reference is invalid. Check data\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            throw new IllegalValueException(Reference.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return new Document(new Name(name), new Reference(reference));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 5,
      "CodyChew": 51,
      "Vielheim": 14
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonAdaptedSuspect.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Suspect;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Jackson-friendly version of {@link Suspect}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class JsonAdaptedSuspect {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Suspect\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedSuspect.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Constructs a {@code JsonAdaptedSuspect} with the given suspect details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public JsonAdaptedSuspect(@JsonProperty(\"name\") String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Converts a given {@code Suspect} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public JsonAdaptedSuspect(Suspect source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.name \u003d source.getName().getAlphaNum();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Converts this Jackson-friendly adapted suspect object into the model\u0027s {@code Suspect} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted suspect."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public Suspect toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"Converting JSON to Suspect\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Suspect name is null. Check data\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Suspect name is invalid. Check data\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return new Suspect(modelName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "Vielheim": 53
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonAdaptedVictim.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Victim;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": " * Jackson-friendly version of {@link Victim}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class JsonAdaptedVictim {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Victim\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedVictim.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Constructs a {@code JsonAdaptedVictim} with the given {@code name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public JsonAdaptedVictim(@JsonProperty(\"name\") String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Converts a given {@code Victim} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public JsonAdaptedVictim(Victim source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        name \u003d source.getName().getAlphaNum();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Converts this Jackson-friendly adapted victim object into the model\u0027s {@code Victim} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted victim."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public Victim toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"Converting JSON to Victim\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Victim name is null. Check data\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Victim name is invalid. Check data\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return new Victim(modelName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "Vielheim": 9,
      "constancensq": 45
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonAdaptedWitness.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Witness;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * Jackson-friendly version of {@link Witness}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class JsonAdaptedWitness {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Witness\u0027 %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAdaptedWitness.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     * Constructs a {@code JsonAdaptedWitness} with the given {@code witnessName}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public JsonAdaptedWitness(@JsonProperty(\"name\") String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     * Converts a given {@code Witness} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public JsonAdaptedWitness(Witness source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.name \u003d source.getName().getAlphaNum();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Witness} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted witness."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public Witness toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"Converting JSON to Witness\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Witness name is null. Check data\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.warning(\"Witness name is invalid. Check data\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return new Witness(modelName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "Jargonx": 38,
      "Vielheim": 9,
      "constancensq": 8
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonPivotStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * A class to access PIVOT data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class JsonPivotStorage implements PivotStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPivotStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public JsonPivotStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Path getPivotFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Optional\u003cReadOnlyPivot\u003e readPivot() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return readPivot(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Similar to {@link #readPivot()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Optional\u003cReadOnlyPivot\u003e readPivot(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Optional\u003cJsonSerializablePivot\u003e jsonPivot \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                filePath, JsonSerializablePivot.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        if (!jsonPivot.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return Optional.of(jsonPivot.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void savePivot(ReadOnlyPivot pivot) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        savePivot(pivot, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Similar to {@link #savePivot(ReadOnlyPivot)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void savePivot(ReadOnlyPivot pivot, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(pivot);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePivot(pivot), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 80
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonSerializablePivot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * An Immutable PIVOT that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "@JsonRootName(value \u003d \"pivot\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "class JsonSerializablePivot {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSerializablePivot.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final List\u003cJsonAdaptedCase\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Constructs a {@code JsonSerializablePivot} with the given persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public JsonSerializablePivot(@JsonProperty(\"persons\") List\u003cJsonAdaptedCase\u003e persons) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Converts a given {@code ReadOnlyPivot} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePivot}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public JsonSerializablePivot(ReadOnlyPivot source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        persons.addAll(source.getCaseList().stream().map(JsonAdaptedCase::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Converts this Pivot into the model\u0027s {@code Pivot} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Pivot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"Converting JSON to PIVOT models\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot pivot \u003d new Pivot();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        for (JsonAdaptedCase jsonAdaptedCase : persons) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            Case investigationCase \u003d jsonAdaptedCase.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            if (pivot.hasCase(investigationCase)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            pivot.addCase(investigationCase);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivot;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 60,
      "Vielheim": 4
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/PivotStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Represents a storage for {@link Pivot}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public interface PivotStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Path getPivotFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns PIVOT data as a {@link ReadOnlyPivot}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Optional\u003cReadOnlyPivot\u003e readPivot() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @see #getPivotFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Optional\u003cReadOnlyPivot\u003e readPivot(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Saves the given {@link ReadOnlyPivot} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @param pivot cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void savePivot(ReadOnlyPivot pivot) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @see #savePivot(ReadOnlyPivot)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void savePivot(ReadOnlyPivot pivot, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 46
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/ReferenceStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import seedu.pivot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "public class ReferenceStorage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final Path DEFAULT_DIRECTORY \u003d Paths.get(\"./references/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final Path TEST_FILE_PATH \u003d Paths.get(\"./references/test1.txt\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    protected ReferenceStorage() throws IOException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        FileUtil.createDirectories(DEFAULT_DIRECTORY);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    protected void addTestFile() throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        FileUtil.createIfMissing(TEST_FILE_PATH);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 21
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public interface Storage extends PivotStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Path getPivotFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    Optional\u003cReadOnlyPivot\u003e readPivot() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    void savePivot(ReadOnlyPivot pivot) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    void addReferenceTestFile() throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 32,
      "CodyChew": 2
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Manages storage of PIVOT data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private PivotStorage pivotStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private ReferenceStorage referenceStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code PivotStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public StorageManager(PivotStorage pivotStorage, UserPrefsStorage userPrefsStorage) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.pivotStorage \u003d pivotStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.referenceStorage \u003d new ReferenceStorage();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PIVOT methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Path getPivotFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivotStorage.getPivotFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Optional\u003cReadOnlyPivot\u003e readPivot() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return readPivot(pivotStorage.getPivotFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Optional\u003cReadOnlyPivot\u003e readPivot(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivotStorage.readPivot(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void savePivot(ReadOnlyPivot pivot) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        savePivot(pivot, pivotStorage.getPivotFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void savePivot(ReadOnlyPivot pivot, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivotStorage.savePivot(pivot, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ReferenceStorage methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void addReferenceTestFile() throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        referenceStorage.addTestFile();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 78,
      "CodyChew": 9
    }
  },
  {
    "path": "src/main/java/seedu/pivot/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Represents a storage for {@link seedu.pivot.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Saves the given {@link seedu.pivot.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/CasePersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.CasePerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class CasePersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String FXML \u003d \"CasePersonListCard.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public final CasePerson casePerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates a {@code DocumentCard} with the given {@code Case} and index to display."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public CasePersonCard(CasePerson casePerson, int displayedIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.casePerson \u003d casePerson;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        name.setText(casePerson.getName().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!(other instanceof CasePersonCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        CasePersonCard card \u003d (CasePersonCard) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u0026\u0026 casePerson.equals(card.casePerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "Vielheim": 56
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/CasePersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.CasePerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class CasePersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String FXML \u003d \"CasePersonListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CasePersonListPanel.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private ListView\u003cCasePerson\u003e casePersonListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates a {@code CasePersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public CasePersonListPanel(ObservableList\u003cCasePerson\u003e casePersonList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        casePersonListView.setItems(casePersonList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        casePersonListView.setCellFactory(listView -\u003e new CasePersonViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code CasePerson} using a {@code CasePersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    class CasePersonViewCell extends ListCell\u003cCasePerson\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        protected void updateItem(CasePerson casePerson, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            super.updateItem(casePerson, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            if (empty || casePerson \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                setGraphic(new CasePersonCard(casePerson, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "Vielheim": 42
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "         * @see seedu.pivot.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/DocumentCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class DocumentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String FXML \u003d \"DocumentListCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public final Document document;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label filename;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label reference;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates a {@code DocumentCard} with the given {@code Case} and index to display."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public DocumentCard(Document document, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.document \u003d document;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        filename.setText(document.getName().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        reference.setText(document.getReference().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (!(other instanceof DocumentCard)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        DocumentCard card \u003d (DocumentCard) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u0026\u0026 document.equals(card.document);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "Vielheim": 59
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/DocumentListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class DocumentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String FXML \u003d \"DocumentListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DocumentListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private ListView\u003cDocument\u003e documentListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Creates a {@code DocumentListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public DocumentListPanel(ObservableList\u003cDocument\u003e documentList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        documentListView.setItems(documentList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        documentListView.setCellFactory(listView -\u003e new DocumentListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Document} using a {@code DocumentCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    class DocumentListViewCell extends ListCell\u003cDocument\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        protected void updateItem(Document document, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            super.updateItem(document, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            if (empty || document \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                setGraphic(new DocumentCard(document, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "Vielheim": 46
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.Logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.CasePerson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String EMPTY \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String HEADER_DOCUMENTS \u003d \"DOCUMENTS\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String HEADER_SUSPECTS \u003d \"SUSPECTS\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String HEADER_WITNESSES \u003d \"WITNESSES\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String HEADER_VICTIMS \u003d \"VICTIMS\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private DocumentListPanel documentListPanel;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private CasePersonListPanel suspectListPanel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private CasePersonListPanel witnessListPanel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private CasePersonListPanel victimListPanel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private SimpleObjectProperty\u003cIndex\u003e indexSimpleObjectProperty;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    // Case Summary"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label caseTitle;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label caseDescription;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label caseStatus;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    // Case Document"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private StackPane documentListPanelPlaceholder;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    // Case Persons"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private StackPane suspectListPanelPlaceholder;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private StackPane witnessListPanelPlaceholder;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private StackPane victimListPanelPlaceholder;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    // Titles"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label caseDocumentsTitle;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label caseSuspectsTitle;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label caseWitnessesTitle;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Label caseVictimsTitle;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        indexSimpleObjectProperty \u003d UiStateManager.getCaseState();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        UiStateManager.getCaseState().addListener(new ChangeListener\u003cObject\u003e() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            public void changed(ObservableValue\u003c?\u003e observable, Object oldValue, Object newValue) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                updateCaseInformationPanel((Index) newValue);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        });"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"MainWindow: Setup Placeholders\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredCaseList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPivotFilePath());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        updateCaseInformationPanel(indexSimpleObjectProperty.get());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Updates the CaseInformationPanel using a Case by the given Index."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @param index"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private void updateCaseInformationPanel(Index index) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"MainWindow: Updating Case Information Panel\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        setMainWindowPanel(index);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private void setMainWindowPanel(Index index) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"Updating Case Information Panel with index:\" + index);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Case investigationCase \u003d null;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        if (index !\u003d null) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            logger.info(\"Updating Case Information Panel with Case\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            investigationCase \u003d logic.getFilteredCaseList().get(indexSimpleObjectProperty.get().getZeroBased());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseTitle.setText(investigationCase \u003d\u003d null ? EMPTY : investigationCase.getTitle().toString());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseDescription.setText(investigationCase \u003d\u003d null ? EMPTY : investigationCase.getDescription().toString());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseStatus.setText(investigationCase \u003d\u003d null ? EMPTY : investigationCase.getStatus().toString());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseDocumentsTitle.setText(investigationCase \u003d\u003d null ? EMPTY : HEADER_DOCUMENTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseSuspectsTitle.setText(investigationCase \u003d\u003d null ? EMPTY : HEADER_SUSPECTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseWitnessesTitle.setText(investigationCase \u003d\u003d null ? EMPTY : HEADER_WITNESSES);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseVictimsTitle.setText(investigationCase \u003d\u003d null ? EMPTY : HEADER_VICTIMS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        documentListPanel \u003d new DocumentListPanel(FXCollections.observableList("
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                investigationCase \u003d\u003d null ? new ArrayList\u003c\u003e() : investigationCase.getDocuments()));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        documentListPanelPlaceholder.getChildren().add(documentListPanel.getRoot());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        suspectListPanel \u003d new CasePersonListPanel(FXCollections.observableList("
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                investigationCase \u003d\u003d null ? new ArrayList\u003c\u003e() : investigationCase.getSuspects().stream()"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        .map(x -\u003e (CasePerson) x).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        suspectListPanelPlaceholder.getChildren().add(suspectListPanel.getRoot());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        witnessListPanel \u003d new CasePersonListPanel(FXCollections.observableList("
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                investigationCase \u003d\u003d null ? new ArrayList\u003c\u003e() : investigationCase.getWitnesses().stream()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        .map(x -\u003e (CasePerson) x).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        witnessListPanelPlaceholder.getChildren().add(witnessListPanel.getRoot());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        victimListPanel \u003d new CasePersonListPanel(FXCollections.observableList("
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                investigationCase \u003d\u003d null ? new ArrayList\u003c\u003e() : investigationCase.getVictims().stream()"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        .map(x -\u003e (CasePerson) x).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        victimListPanelPlaceholder.getChildren().add(victimListPanel.getRoot());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"MainWindow: Handling Help\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"MainWindow: Handling Exit\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * @see seedu.pivot.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 13,
      "-": 186,
      "Vielheim": 114
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public final Case investigationCase;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public PersonCard(Case investigationCase, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.investigationCase \u003d investigationCase;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        name.setText(investigationCase.getTitle().getAlphaNum());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        status.setText(investigationCase.getStatus().name());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        investigationCase.getTags().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                \u0026\u0026 investigationCase.equals(card.investigationCase);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 9,
      "-": 61,
      "Vielheim": 1
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private ListView\u003cCase\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public PersonListPanel(ObservableList\u003cCase\u003e caseList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        personListView.setItems(caseList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cCase\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        protected void updateItem(Case investigationCase, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            super.updateItem(investigationCase, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            if (empty || investigationCase \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                setGraphic(new PersonCard(investigationCase, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 11,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/pivot.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 6,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/pivot/ui/UiStateManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import seedu.pivot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " * Tracks the state of the GUI."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "public class UiStateManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static SimpleObjectProperty\u003cIndex\u003e caseState \u003d new SimpleObjectProperty\u003c\u003e(null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiStateManager.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static SimpleObjectProperty\u003cIndex\u003e getCaseState() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return caseState;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static void setCasePanelState(Index index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"UIStateManager: Setting UI State: \" + index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseState.set(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Resets the UI State to null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static void resetCasePanelState() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"UIStateManager: Resetting UI State\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        caseState.set(null);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Signals the GUI to refresh window."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static void refresh() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        logger.info(\"UIStateManager: Refreshing UI State\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        Index index \u003d caseState.get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        resetCasePanelState();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        setCasePanelState(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "Vielheim": 41
    }
  },
  {
    "path": "src/main/resources/view/CasePersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 31
    }
  },
  {
    "path": "src/main/resources/view/CasePersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \u003cListView fx:id\u003d\"casePersonListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 8
    }
  },
  {
    "path": "src/main/resources/view/DocumentListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cLabel fx:id\u003d\"filename\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            \u003cLabel fx:id\u003d\"reference\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 32
    }
  },
  {
    "path": "src/main/resources/view/DocumentListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    \u003cListView fx:id\u003d\"documentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Vielheim": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"PIVOT\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        \u003cImage url\u003d\"@/images/pivot.png\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cSplitPane fx:id\u003d\"caseDisplayPlaceholder\" dividerPositions\u003d\"0.5\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                           VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003cVBox fx:id\u003d\"caseList\" minWidth\u003d\"250\" prefWidth\u003d\"250\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003cVBox fx:id\u003d\"caseInformation\" minWidth\u003d\"250\" prefWidth\u003d\"250\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cVBox fx:id\u003d\"caseSummaryBox\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"caseTitle\" styleClass\u003d\"label-title\" text\u003d\"Default Title\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                            \u003cInsets bottom\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"caseDescription\" styleClass\u003d\"label-bright\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                           text\u003d\"Default Description\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                            \u003cInsets bottom\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"caseStatus\" styleClass\u003d\"label-bright\" text\u003d\"Default Status\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                            \u003cInsets bottom\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cVBox fx:id\u003d\"caseDocumentsBox\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"caseDocumentsTitle\" styleClass\u003d\"label-title\" text\u003d\"DOCUMENTS\"/\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"documentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\"/\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cVBox fx:id\u003d\"caseSuspectsBox\" layoutX\u003d\"20.0\" layoutY\u003d\"106.0\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"caseSuspectsTitle\" styleClass\u003d\"label-title\" text\u003d\"SUSPECTS\"/\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"suspectListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\"/\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cVBox fx:id\u003d\"caseVictimsBox\" layoutX\u003d\"20.0\" layoutY\u003d\"133.0\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"caseVictimsTitle\" styleClass\u003d\"label-title\" text\u003d\"VICTIMS\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"victimListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003cVBox fx:id\u003d\"caseWitnessesBox\" layoutX\u003d\"20.0\" layoutY\u003d\"160.0\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cLabel fx:id\u003d\"caseWitnessesTitle\" styleClass\u003d\"label-title\" text\u003d\"WITNESSES\"/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"witnessListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                           styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CodyChew": 1,
      "esmanda3w": 1,
      "-": 40,
      "Vielheim": 92
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "      \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/pivot/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/pivot/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_CASE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.ListCaseCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.JsonPivotStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonPivotStorage pivotStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonPivotStorage(temporaryFolder.resolve(\"pivot.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        StorageManager storage \u003d new StorageManager(pivotStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        String deleteCommand \u003d \"delete case 9\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        //TODO: check that the state is empty first."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD + \" \" + TYPE_CASE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandSuccess(listCommand, ListCaseCommand.MESSAGE_LIST_CASE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // Setup LogicManager with JsonPivotIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonPivotStorage pivotStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonPivotIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionPivot.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        StorageManager storage \u003d new StorageManager(pivotStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + \" \" + AddCommand.TYPE_CASE + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case expectedCase \u003d new CaseBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedModel.addCase(expectedCase);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredCaseList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static class JsonPivotIoExceptionThrowingStub extends JsonPivotStorage {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        private JsonPivotIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void savePivot(ReadOnlyPivot pivot, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 37,
      "CodyChew": 2,
      "Jargonx": 1,
      "-": 117,
      "constancensq": 4
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/AddCaseCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.AddCaseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCaseCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class AddCaseCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void execute_newCase_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case validCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedModel.addCase(validCase);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertCommandSuccess(new AddCaseCommand(validCase), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                String.format(AddCaseCommand.MESSAGE_ADD_CASE_SUCCESS, validCase), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void execute_duplicateCase_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case caseInList \u003d model.getPivot().getCaseList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertCommandFailure(new AddCaseCommand(caseInList), model, AddCaseCommand.MESSAGE_DUPLICATE_CASE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 21,
      "-": 24,
      "Vielheim": 1
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/AddCaseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.AddCaseCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class AddCaseCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void constructor_nullCase_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCaseCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void execute_caseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case validCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        CommandResult commandResult \u003d new AddCaseCommand(validCase).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertEquals(String.format(AddCaseCommand.MESSAGE_ADD_CASE_SUCCESS, validCase),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(Arrays.asList(validCase), modelStub.personsAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void execute_duplicateCase_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case validCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        AddCommand addCommand \u003d new AddCaseCommand(validCase);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validCase);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                AddCaseCommand.MESSAGE_DUPLICATE_CASE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case alice \u003d new CaseBuilder().withTitle(\"Alice\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case bob \u003d new CaseBuilder().withTitle(\"Bob\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCaseCommand(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCaseCommand(bob);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCaseCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public Path getPivotFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void setPivotFilePath(Path pivotFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void addCase(Case investigationCase) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void setPivotBook(ReadOnlyPivot newData) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public ReadOnlyPivot getPivot() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public boolean hasCase(Case investigationCase) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void deleteCase(Case target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void setCase(Case target, Case editedCase) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public ObservableList\u003cCase\u003e getFilteredCaseList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void updateFilteredCaseList(Predicate\u003cCase\u003e predicate) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        private final Case investigationCase;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ModelStubWithPerson(Case investigationCase) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            this.investigationCase \u003d investigationCase;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public boolean hasCase(Case investigationCase) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return this.investigationCase.isSameCase(investigationCase);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        final ArrayList\u003cCase\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public boolean hasCase(Case investigationCase) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return personsAdded.stream().anyMatch(investigationCase::isSameCase);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public void addCase(Case investigationCase) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            requireNonNull(investigationCase);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            personsAdded.add(investigationCase);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public ReadOnlyPivot getPivot() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return new Pivot();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 55,
      "-": 140,
      "Vielheim": 2
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void execute_emptyPivot_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_CLEAR_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void execute_nonEmptyPivot_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedModel.setPivotBook(new Pivot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_CLEAR_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 12,
      "-": 18,
      "Vielheim": 2
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.EditCaseDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String VALID_STATUS_AMY \u003d \"active\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String VALID_STATUS_BOB \u003d \"closed\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_TITLE + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_TITLE + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String STATUS_DESC_AMY \u003d \" \" + PREFIX_STATUS + VALID_STATUS_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String STATUS_DESC_BOB \u003d \" \" + PREFIX_STATUS + VALID_STATUS_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_TITLE + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String INVALID_STATUS_DESC \u003d \" \" + PREFIX_STATUS + \"status\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final EditCommand.EditCaseDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final EditCommand.EditCaseDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        DESC_AMY \u003d new EditCaseDescriptorBuilder().withTitle(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withStatus(VALID_STATUS_AMY)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        DESC_BOB \u003d new EditCaseDescriptorBuilder().withTitle(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                .withStatus(VALID_STATUS_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot expectedPivot \u003d new Pivot(actualModel.getPivot());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cCase\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCaseList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedPivot, actualModel.getPivot());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredCaseList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCaseList().size());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case investigationCase \u003d model.getFilteredCaseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        final String[] splitName \u003d investigationCase.getTitle().getAlphaNum().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.updateFilteredCaseList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(1, model.getFilteredCaseList().size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 29,
      "CodyChew": 3,
      "-": 81,
      "Vielheim": 1,
      "constancensq": 3
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/DeleteCaseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.DeleteCaseCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jargonx"
        },
        "content": " * {@code DeleteCaseCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "public class DeleteCaseCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case caseToDelete \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCaseCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCaseCommand.MESSAGE_DELETE_CASE_SUCCESS, caseToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedModel.deleteCase(caseToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCaseList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCaseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case caseToDelete \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCaseCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCaseCommand.MESSAGE_DELETE_CASE_SUCCESS, caseToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedModel.deleteCase(caseToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPivot().getCaseList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCaseCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCaseCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCaseCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCaseCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model.updateFilteredCaseList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(model.getFilteredCaseList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 27,
      "Jargonx": 11,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/EditCaseDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand.EditCaseDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.EditCaseDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class EditCaseDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditCaseDescriptor descriptorWithSameValues \u003d new EditCommand.EditCaseDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditCaseDescriptor editedAmy \u003d new EditCaseDescriptorBuilder(DESC_AMY).withTitle(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        editedAmy \u003d new EditCaseDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 11,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand.EditCaseDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.EditCaseDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case editedCase \u003d new CaseBuilder().withDocument(\"name\", \"test1.txt\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                                                 .withWitnesses(\"Janice\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditCommand.EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder(editedCase).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CASE_SUCCESS, editedCase);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Pivot(model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedModel.setCase(model.getFilteredCaseList().get(0), editedCase);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredCaseList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case lastCase \u003d model.getFilteredCaseList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        CaseBuilder personInList \u003d new CaseBuilder(lastCase);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case editedCase \u003d personInList.withTitle(VALID_NAME_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder().withTitle(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CASE_SUCCESS, editedCase);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Pivot(model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedModel.setCase(lastCase, editedCase);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditCommand.EditCaseDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case editedCase \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CASE_SUCCESS, editedCase);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Pivot(model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case caseInFilteredList \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case editedCase \u003d new CaseBuilder(caseInFilteredList).withTitle(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new EditCaseDescriptorBuilder().withTitle(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CASE_SUCCESS, editedCase);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Pivot(model.getPivot()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedModel.setCase(model.getFilteredCaseList().get(0), editedCase);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case firstCase \u003d model.getFilteredCaseList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder(firstCase).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CASE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case caseInList \u003d model.getPivot().getCaseList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new EditCaseDescriptorBuilder(caseInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CASE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCaseList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder().withTitle(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPivot().getCaseList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new EditCaseDescriptorBuilder().withTitle(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CASE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditCommand.EditCaseDescriptor copyDescriptor \u003d new EditCaseDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 58,
      "Jargonx": 1,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_CASES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CASES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedModel.updateFilteredCaseList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredCaseList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CASES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedModel.updateFilteredCaseList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredCaseList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 19,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/commands/ListCaseCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.ListCaseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class ListCaseCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        model \u003d new ModelManager(getTypicalPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getPivot(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandSuccess(new ListCaseCommand(), model, ListCaseCommand.MESSAGE_LIST_CASE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertCommandSuccess(new ListCaseCommand(), model, ListCaseCommand.MESSAGE_LIST_CASE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 11,
      "-": 26,
      "constancensq": 3
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/AddCaseCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.INVALID_STATUS_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.AddCaseCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class AddCaseCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private AddCaseCommandParser parser \u003d new AddCaseCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case expectedCase \u003d new CaseBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                + STATUS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new AddCaseCommand(expectedCase));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                + STATUS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new AddCaseCommand(expectedCase));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // multiple statuses - last status accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                + STATUS_DESC_AMY + STATUS_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new AddCaseCommand(expectedCase));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case expectedCaseMultipleTags \u003d new CaseBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                + STATUS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new AddCaseCommand(expectedCaseMultipleTags));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case expectedCase \u003d new CaseBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY, new AddCaseCommand(expectedCase));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // no status"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedCase \u003d new CaseBuilder(expectedCase).withStatus(\"active\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY, new AddCaseCommand(expectedCase));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCaseCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB, expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // invalid status"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_STATUS_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // TODO: for \"add case t:TITLE\", this test case may not be so relevant bc only one value"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        // but might be relevant for \"add case t:TITLE d:DESCRIPTION\" \u003c-- can KIV for future use?"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCaseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 64,
      "Jargonx": 1,
      "CodyChew": 1,
      "-": 37,
      "Vielheim": 3,
      "constancensq": 2
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/AddSuspectCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import org.junit.jupiter.api.AfterAll;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.suspectcommands.AddSuspectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.state.StateManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Suspect;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class AddSuspectCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    // Todo: move static fields to CommandTestUtil"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static Index index \u003d Index.fromZeroBased(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private AddSuspectCommandParser parser \u003d new AddSuspectCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static void setStateZero() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        StateManager.setState(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @AfterAll"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static void setStateNull() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        StateManager.resetState();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Suspect expectedSuspect \u003d new Suspect(new Name(VALID_NAME_BOB));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // normal input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new AddSuspectCommand(index, expectedSuspect));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new AddSuspectCommand(index, expectedSuspect));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new AddSuspectCommand(index, expectedSuspect));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSuspectCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB, expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSuspectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 77
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.DeleteCaseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseSuccess(parser, \"case 1\", new DeleteCaseCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void parse_invalidArgsMainPage_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertParseFailure(parser, \"case a\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                           String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseFailure(parser, \"0\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE_MAIN_PAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    //TODO: do checks for when state is at case page as well, need to maniuplate the state to case page?"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 7,
      "Jargonx": 2,
      "-": 23,
      "constancensq": 8
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand.EditCaseDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.EditCaseDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Title.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // TODO: can have additional test case of invalid var1 followed by valid var2 here as well if needed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // valid name followed by invalid name. The test case for invalid name followed by valid name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseFailure(parser, \"1\" + NAME_DESC_BOB + INVALID_NAME_DESC, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // TODO: originally test for two different invalid fields, changed to 2 INVALID_NAME_DESC"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        //  for curr implementation)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "                Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_HUSBAND + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder().withTitle(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    // TODO: Might need if we adding more fields, currently is same as parse_oneField test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder().withTitle(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder().withTitle(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor \u003d new EditCaseDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_NAME_DESC + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder().withTitle(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // TODO: Might need if we are adding more field, to add other valid values if there are"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor \u003d new EditCaseDescriptorBuilder().withTitle(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 34,
      "CodyChew": 2,
      "Jargonx": 1,
      "-": 121,
      "Vielheim": 1,
      "constancensq": 14
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/ListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "constancensq"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.ListCaseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "constancensq"
        },
        "content": "public class ListCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private ListCommandParser parser \u003d new ListCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void parse_validArgs_returnsListCaseCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseSuccess(parser, \"case\", new ListCaseCommand());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 6,
      "constancensq": 22
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void parseTitle_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTitle((String) null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void parseTitle_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTitle(INVALID_NAME));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void parseTitle_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        Title expectedName \u003d new Title(VALID_NAME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseTitle(VALID_NAME));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void parseTitle_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseTitle(nameWithWhitespace));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 8,
      "CodyChew": 9,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/pivot/logic/parser/PivotParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.Command.TYPE_CASE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand.EditCaseDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.AddCaseCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.DeleteCaseCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.casecommands.ListCaseCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.EditCaseDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class PivotParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final PivotParser parser \u003d new PivotParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void parseCommand_addCase() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case investigationCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        AddCommand command \u003d (AddCaseCommand) parser.parseCommand(CaseUtil.getAddCommand(investigationCase));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(new AddCaseCommand(investigationCase), command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void parseCommand_delete_case() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + TYPE_CASE + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                        + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        assertEquals(new DeleteCaseCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case investigationCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        EditCaseDescriptor descriptor \u003d new EditCaseDescriptorBuilder(investigationCase).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + CaseUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void parseCommand_list_case() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        //TODO: check for state first?"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" \" + TYPE_CASE)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                instanceof ListCaseCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" \" + TYPE_CASE + \" 3\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "constancensq"
        },
        "content": "                instanceof ListCaseCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 33,
      "Jargonx": 3,
      "-": 66,
      "constancensq": 7
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.model.Model.PREDICATE_SHOW_ALL_CASES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.PivotBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(new Pivot(), new Pivot(modelManager.getPivot()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        userPrefs.setPivotFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        userPrefs.setPivotFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setPivotFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        modelManager.setPivotFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(path, modelManager.getPivotFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCase(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(modelManager.hasCase(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        modelManager.addCase(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(modelManager.hasCase(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredCaseList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot pivot \u003d new PivotBuilder().withCase(ALICE).withCase(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot differentPivot \u003d new Pivot();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        modelManager \u003d new ModelManager(pivot, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(pivot, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentPivot, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String[] keywords \u003d ALICE.getTitle().getAlphaNum().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        modelManager.updateFilteredCaseList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(pivot, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        modelManager.updateFilteredCaseList(PREDICATE_SHOW_ALL_CASES);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        differentUserPrefs.setPivotFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(pivot, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 29,
      "-": 102,
      "Vielheim": 1
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/PivotTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.exceptions.DuplicateCaseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class PivotTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final Pivot pivot \u003d new Pivot();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(Collections.emptyList(), pivot.getCaseList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e pivot.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void resetData_withValidReadOnlyPivot_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot newData \u003d getTypicalPivot();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivot.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(newData, pivot);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case editedAlice \u003d new CaseBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cCase\u003e newCases \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        PivotStub newData \u003d new PivotStub(newCases);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(DuplicateCaseException.class, () -\u003e pivot.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e pivot.hasCase(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void hasPerson_personNotInPivot_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(pivot.hasCase(ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void hasPerson_personInPivot_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivot.addCase(ALICE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(pivot.hasCase(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInPivot_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivot.addCase(ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case editedAlice \u003d new CaseBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(pivot.hasCase(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e pivot.getCaseList().remove(0));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * A stub ReadOnlyPivot whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static class PivotStub implements ReadOnlyPivot {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        private final ObservableList\u003cCase\u003e cases \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        PivotStub(Collection\u003cCase\u003e cases) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            this.cases.setAll(cases);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        public ObservableList\u003cCase\u003e getCaseList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            return cases;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 38,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPivotFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setPivotFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/CaseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class CaseTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case investigationCase \u003d new CaseBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e investigationCase.getTags().remove(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(ALICE.isSameCase(ALICE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(ALICE.isSameCase(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case editedAlice \u003d new CaseBuilder(ALICE).withTitle(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(ALICE.isSameCase(editedAlice));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        editedAlice \u003d new CaseBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(ALICE.isSameCase(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        //TODO: Might want to test for permutations of different attributes if multiple fields in future."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case aliceCopy \u003d new CaseBuilder(ALICE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case editedAlice \u003d new CaseBuilder(ALICE).withTitle(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        editedAlice \u003d new CaseBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 19,
      "CodyChew": 1,
      "-": 47,
      "constancensq": 2
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void test_titleContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(predicate.test(new CaseBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(predicate.test(new CaseBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(predicate.test(new CaseBuilder().withTitle(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(predicate.test(new CaseBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void test_titleDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(predicate.test(new CaseBuilder().withTitle(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(predicate.test(new CaseBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        //TODO: Possible test issue, mention of email here."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // TODO: Might need testing for keywords matching other fields but not name in the future."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        // Keywords match email and address, but does not match name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(predicate.test(new CaseBuilder().withTitle(\"Alice\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 9,
      "CodyChew": 2,
      "Jargonx": 3,
      "-": 63,
      "constancensq": 2
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/investigationcase/UniqueCaseListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.investigationcase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.exceptions.CaseNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.exceptions.DuplicateCaseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.CaseBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class UniqueCaseListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private final UniqueCaseList uniqueCaseList \u003d new UniqueCaseList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCaseList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(uniqueCaseList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(uniqueCaseList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case editedAlice \u003d new CaseBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertTrue(uniqueCaseList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCaseList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(DuplicateCaseException.class, () -\u003e uniqueCaseList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCaseList.setCase(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCaseList.setCase(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(CaseNotFoundException.class, () -\u003e uniqueCaseList.setCase(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.setCase(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        UniqueCaseList expectedUniqueCaseList \u003d new UniqueCaseList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedUniqueCaseList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedUniqueCaseList, uniqueCaseList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Case editedAlice \u003d new CaseBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.setCase(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        UniqueCaseList expectedUniqueCaseList \u003d new UniqueCaseList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedUniqueCaseList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedUniqueCaseList, uniqueCaseList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.setCase(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        UniqueCaseList expectedUniqueCaseList \u003d new UniqueCaseList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedUniqueCaseList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedUniqueCaseList, uniqueCaseList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(DuplicateCaseException.class, () -\u003e uniqueCaseList.setCase(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCaseList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(CaseNotFoundException.class, () -\u003e uniqueCaseList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        UniqueCaseList expectedUniqueCaseList \u003d new UniqueCaseList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedUniqueCaseList, uniqueCaseList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCaseList.setCases((UniqueCaseList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        UniqueCaseList expectedUniqueCaseList \u003d new UniqueCaseList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedUniqueCaseList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.setCases(expectedUniqueCaseList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedUniqueCaseList, uniqueCaseList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueCaseList.setCases((List\u003cCase\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cCase\u003e caseList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        uniqueCaseList.setCases(caseList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        UniqueCaseList expectedUniqueCaseList \u003d new UniqueCaseList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        expectedUniqueCaseList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(expectedUniqueCaseList, uniqueCaseList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        List\u003cCase\u003e listWithDuplicateCases \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(DuplicateCaseException.class, () -\u003e uniqueCaseList.setCases(listWithDuplicateCases));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            -\u003e uniqueCaseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 169
    }
  },
  {
    "path": "src/test/java/seedu/pivot/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/pivot/storage/JsonAdaptedCaseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.storage.JsonAdaptedCase.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class JsonAdaptedCaseTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"Esm@nd@\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final String INVALID_DOCUMENT_REFERENCE \u003d \"invalid :across ?/\\0 OS\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final String INVALID_DOCUMENT_NAME \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final String INVALID_STATUS \u003d \"status\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static final String INVALID_WITNESS \u003d \"T|M\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String INVALID_SUSPECT \u003d \"!!!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final String INVALID_VICTIM \u003d \"P@ul\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getTitle().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BENSON.getDescription().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final String VALID_STATUS \u003d BENSON.getStatus().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final String VALID_DOCUMENT_NAME \u003d \"name\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final String VALID_DOCUMENT_REFERENCE \u003d \"test1.txt\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private static final List\u003cJsonAdaptedDocument\u003e VALID_DOCUMENTS \u003d BENSON.getDocuments().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            .map(JsonAdaptedDocument::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private static final List\u003cJsonAdaptedSuspect\u003e VALID_SUSPECTS \u003d BENSON.getSuspects().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            .map(JsonAdaptedSuspect::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private static final List\u003cJsonAdaptedVictim\u003e VALID_VICTIMS \u003d BENSON.getVictims().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .map(JsonAdaptedVictim::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private static final List\u003cJsonAdaptedWitness\u003e VALID_WITNESSES \u003d BENSON.getWitnesses().stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .map(JsonAdaptedWitness::new)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d new JsonAdaptedCase(BENSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(INVALID_NAME, VALID_DESCRIPTION, VALID_STATUS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        VALID_DOCUMENTS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        VALID_SUSPECTS, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d new JsonAdaptedCase(null, VALID_DESCRIPTION, VALID_STATUS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                VALID_DOCUMENTS, VALID_SUSPECTS, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, INVALID_DESCRIPTION, VALID_STATUS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        VALID_DOCUMENTS,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        VALID_SUSPECTS, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, null, VALID_STATUS, VALID_DOCUMENTS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        VALID_SUSPECTS, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void toModelType_invalidStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, VALID_DESCRIPTION, INVALID_STATUS, VALID_DOCUMENTS,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        VALID_SUSPECTS, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String expectedMessage \u003d Status.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void toModelType_nullStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d new JsonAdaptedCase(VALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                null, VALID_DOCUMENTS, VALID_SUSPECTS, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, VALID_DESCRIPTION, VALID_STATUS,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        VALID_DOCUMENTS, VALID_SUSPECTS, VALID_VICTIMS,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "                        VALID_WITNESSES, invalidTags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public void toModelType_invalidSuspect_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cJsonAdaptedSuspect\u003e invalidSuspects \u003d new ArrayList\u003c\u003e(VALID_SUSPECTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        invalidSuspects.add(new JsonAdaptedSuspect(INVALID_SUSPECT));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, VALID_DESCRIPTION, VALID_STATUS, VALID_DOCUMENTS,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        invalidSuspects, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    public void toModelType_invalidVictims_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        List\u003cJsonAdaptedVictim\u003e invalidVictims \u003d new ArrayList\u003c\u003e(VALID_VICTIMS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        invalidVictims.add(new JsonAdaptedVictim(INVALID_VICTIM));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, VALID_DESCRIPTION, VALID_STATUS, VALID_DOCUMENTS,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        VALID_SUSPECTS, invalidVictims, VALID_WITNESSES, VALID_TAGS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    public void toModelType_invalidWitnesses_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        List\u003cJsonAdaptedWitness\u003e invalidWitnesses \u003d new ArrayList\u003c\u003e(VALID_WITNESSES);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        invalidWitnesses.add(new JsonAdaptedWitness(INVALID_WITNESS));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, VALID_DESCRIPTION, VALID_STATUS, VALID_DOCUMENTS,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        VALID_SUSPECTS, VALID_VICTIMS, invalidWitnesses, VALID_TAGS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void toModelType_invalidDocuments_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cJsonAdaptedDocument\u003e invalidDocumentReference \u003d new ArrayList\u003c\u003e(VALID_DOCUMENTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        invalidDocumentReference.add(new JsonAdaptedDocument(VALID_DOCUMENT_NAME, INVALID_DOCUMENT_REFERENCE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person \u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, VALID_DESCRIPTION, VALID_STATUS, invalidDocumentReference,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        VALID_SUSPECTS, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cJsonAdaptedDocument\u003e invalidDocumentName \u003d new ArrayList\u003c\u003e(VALID_DOCUMENTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        invalidDocumentName.add(new JsonAdaptedDocument(INVALID_DOCUMENT_NAME, VALID_DOCUMENT_REFERENCE));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonAdaptedCase person2 \u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                new JsonAdaptedCase(VALID_NAME, VALID_DESCRIPTION, VALID_STATUS, invalidDocumentName,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                        VALID_SUSPECTS, VALID_VICTIMS, VALID_WITNESSES, VALID_TAGS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        assertThrows(IllegalValueException.class, person2::toModelType);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 47,
      "CodyChew": 14,
      "Jargonx": 11,
      "-": 44,
      "Vielheim": 42,
      "constancensq": 11
    }
  },
  {
    "path": "src/test/java/seedu/pivot/storage/JsonPivotStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class JsonPivotStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPivotStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void readPivot_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readPivot(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPivot\u003e readPivot(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new JsonPivotStorage(Paths.get(filePath)).readPivot(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertFalse(readPivot(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPivot(\"notJsonFormatPivot.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void readPivot_invalidPersonPivot_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPivot(\"invalidPersonPivot.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void readPivot_invalidAndValidPersonPivot_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPivot(\"invalidAndValidPersonPivot.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void readAndSavePivot_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempPivot.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot original \u003d getTypicalPivot();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonPivotStorage jsonPivotStorage \u003d new JsonPivotStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        jsonPivotStorage.savePivot(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ReadOnlyPivot readBack \u003d jsonPivotStorage.readPivot(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(original, new Pivot(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        original.addCase(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        original.removeCase(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        jsonPivotStorage.savePivot(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        readBack \u003d jsonPivotStorage.readPivot(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(original, new Pivot(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        original.addCase(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        jsonPivotStorage.savePivot(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        readBack \u003d jsonPivotStorage.readPivot().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(original, new Pivot(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void savePivot_nullPivot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePivot(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Saves {@code pivot} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private void savePivot(ReadOnlyPivot pivot, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            new JsonPivotStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                    .savePivot(pivot, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void savePivot_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePivot(new Pivot(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 45,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/pivot/storage/JsonSerializablePivotTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.testutil.TypicalCases;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class JsonSerializablePivotTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePivotTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsPivot.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonPivot.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonPivot.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonSerializablePivot dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                JsonSerializablePivot.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot pivotFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot typicalPersonsPivot \u003d TypicalCases.getTypicalPivot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(pivotFromFile, typicalPersonsPivot);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonSerializablePivot dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                JsonSerializablePivot.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonSerializablePivot dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                JsonSerializablePivot.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePivot.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 47
    }
  },
  {
    "path": "src/test/java/seedu/pivot/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        userPrefs.setPivotFilePath(Paths.get(\"pivot.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/pivot/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.TypicalCases.getTypicalPivot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.ReadOnlyPivot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        JsonPivotStorage pivotStorage \u003d new JsonPivotStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        storageManager \u003d new StorageManager(pivotStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void pivotReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "         * {@link JsonPivotStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPivotStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot original \u003d getTypicalPivot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        storageManager.savePivot(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        ReadOnlyPivot retrieved \u003d storageManager.readPivot().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertEquals(original, new Pivot(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public void getPivotFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        assertNotNull(storageManager.getPivotFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 17,
      "CodyChew": 2,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/CaseBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Document;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Reference;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Suspect;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Victim;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Witness;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class CaseBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final String DEFAULT_STATUS \u003d \"active\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    private List\u003cDocument\u003e documents;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    private List\u003cSuspect\u003e suspects;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    private List\u003cVictim\u003e victims;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    private List\u003cWitness\u003e witnesses;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        status \u003d Status.createStatus(DEFAULT_STATUS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        documents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        suspects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        victims \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        witnesses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder(Case caseToCopy) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        title \u003d caseToCopy.getTitle();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        description \u003d caseToCopy.getDescription();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        status \u003d caseToCopy.getStatus();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        documents \u003d new ArrayList\u003c\u003e(caseToCopy.getDocuments());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        suspects \u003d caseToCopy.getSuspects();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        victims \u003d caseToCopy.getVictims();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        witnesses \u003d new ArrayList\u003c\u003e(caseToCopy.getWitnesses());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(caseToCopy.getTags());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Sets the {@code Description} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder withWitnesses(String ... witnesses) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        this.witnesses \u003d SampleDataUtil.getWitnessList(witnesses);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jargonx"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     * Sets the {@code Document} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder withDocument(String name, String ref) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.documents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        this.documents.add(new Document(new Name(name), new Reference(ref)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Sets the {@code Status} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.status \u003d Status.createStatus(status);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "    //TODO: Not used anywhere in code, use the witness example and use there"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Parses the {@code suspects} into a {@code List\u003cSuspect\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder withSuspects(String ... suspects) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        this.suspects \u003d SampleDataUtil.getSuspectList(suspects);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     * Parses the {@code victims} into a {@code List\u003cVictim\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "constancensq"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public CaseBuilder withVictims(String ... victims) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        this.victims \u003d SampleDataUtil.getVictimList(victims);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "constancensq"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "constancensq"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Generates a {@code Person} object with existing fields."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * @return Person object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Case build() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return new Case(title, description, status, documents, suspects, victims, witnesses, tags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CodyChew"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 44,
      "CodyChew": 15,
      "Jargonx": 10,
      "-": 39,
      "Vielheim": 25,
      "constancensq": 9
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/CaseUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand.EditCaseDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class CaseUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static String getAddCommand(Case investigationCase) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + AddCommand.TYPE_CASE + \" \" + getPersonDetails(investigationCase);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static String getPersonDetails(Case investigationCase) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        sb.append(PREFIX_TITLE + investigationCase.getTitle().getAlphaNum() + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        sb.append(PREFIX_STATUS + investigationCase.getStatus().name() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        investigationCase.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditCaseDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        descriptor.getTitle().ifPresent(title -\u003e sb.append(PREFIX_TITLE).append(title.getAlphaNum()).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor.getStatus().ifPresent(status -\u003e sb.append(PREFIX_STATUS).append(status.name()).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 16,
      "-": 38,
      "Vielheim": 2
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/EditCaseDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.logic.commands.EditCommand.EditCaseDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Suspect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Victim;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class EditCaseDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private EditCaseDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCaseDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor \u003d new EditCaseDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCaseDescriptorBuilder(EditCaseDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.descriptor \u003d new EditCaseDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCaseDescriptorBuilder(Case investigationCase) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor \u003d new EditCaseDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor.setTitle(investigationCase.getTitle());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor.setStatus(investigationCase.getStatus());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor.setSuspects(investigationCase.getSuspects());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor.setVictims(investigationCase.getVictims());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor.setTags(investigationCase.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCaseDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Sets the {@code Status} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCaseDescriptorBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        descriptor.setStatus(Status.createStatus(status));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCaseDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Parses the {@code suspects} into a {@code List\u003cSuspect\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCaseDescriptorBuilder withSuspects(String... suspect) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cSuspect\u003e suspects \u003d Stream.of(suspect).map(string -\u003e new Suspect(new Name(string)))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        descriptor.setSuspects(suspects);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * Parses the {@code victims} into a {@code List\u003cVictim\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCaseDescriptorBuilder withVictims(String... victims) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        List\u003cVictim\u003e victim \u003d Stream.of(victims).map(string -\u003e new Victim(new Name(string)))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        descriptor.setVictims(victim);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Vielheim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public EditCaseDescriptor build() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 35,
      "CodyChew": 1,
      "-": 38,
      "Vielheim": 21
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/PivotBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * A utility class to help with building PIVOT objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " *     {@code Pivot pivot \u003d new PivotBuilder().withCase(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class PivotBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private Pivot pivot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public PivotBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivot \u003d new Pivot();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public PivotBuilder(Pivot pivot) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        this.pivot \u003d pivot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Adds a new {@code Case} to the {@code PIVOT} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public PivotBuilder withCase(Case investigationCase) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        pivot.addCase(investigationCase);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public Pivot build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return pivot;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 34
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCaseList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return Index.fromOneBased(model.getFilteredCaseList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static Case getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        return model.getFilteredCaseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/TypicalCases.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_STATUS_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.Pivot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.model.investigationcase.Case;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "public class TypicalCases {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final Case ALICE \u003d new CaseBuilder().withTitle(\"Alice Pauline\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            .withDocument(\"name\", \"test1.txt\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withStatus(\"COLD\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withVictims(\"Tom\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .withWitnesses(\"Janice\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withSuspects(\"Peter\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .withTags(\"friends\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final Case BENSON \u003d new CaseBuilder().withTitle(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Vielheim"
        },
        "content": "            .withStatus(\"CLOSED\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CodyChew"
        },
        "content": "            .withDocument(\"name\", \"test1.txt\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "constancensq"
        },
        "content": "            .withVictims(\"Tom\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .withWitnesses(\"Mary\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "constancensq"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final Case CARL \u003d new CaseBuilder().withTitle(\"Carl Kurz\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final Case DANIEL \u003d new CaseBuilder().withTitle(\"Daniel Meier\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final Case ELLE \u003d new CaseBuilder().withTitle(\"Elle Meyer\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final Case FIONA \u003d new CaseBuilder().withTitle(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final Case GEORGE \u003d new CaseBuilder().withTitle(\"George Best\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final Case HOON \u003d new CaseBuilder().withTitle(\"Hoon Meier\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final Case IDA \u003d new CaseBuilder().withTitle(\"Ida Mueller\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final Case AMY \u003d new CaseBuilder().withTitle(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .withStatus(VALID_STATUS_AMY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static final Case BOB \u003d new CaseBuilder().withTitle(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jargonx"
        },
        "content": "            .withStatus(VALID_STATUS_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    private TypicalCases() {} // prevents instantiation"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "     * Returns an {@code Pivot} with all the typical persons."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static Pivot getTypicalPivot() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        Pivot ab \u003d new Pivot();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "        for (Case investigationCase : getTypicalPersons()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "            ab.addCase(investigationCase);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "    public static List\u003cCase\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 30,
      "CodyChew": 2,
      "Jargonx": 15,
      "-": 28,
      "Vielheim": 1,
      "constancensq": 5
    }
  },
  {
    "path": "src/test/java/seedu/pivot/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/pivot/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/pivot/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "package seedu.pivot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import static seedu.pivot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "import seedu.pivot.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\u003c?import seedu.pivot.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "esmanda3w"
        },
        "content": "\u003cfx:root type\u003d\"seedu.pivot.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "esmanda3w": 1,
      "-": 5
    }
  }
]
