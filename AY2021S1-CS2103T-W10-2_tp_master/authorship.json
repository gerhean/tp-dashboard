[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W10-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "#Wishful Shrinking "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "  Wishful Shrinking aims to help users become more healthy by:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "  * Supplying a healthy recipes resource"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "  * Encouraging home cooking over store bought food"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "  * Tracking food and calorie intake \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "It is named Wishful Shrinking to echo the user\u0027s feelings of wishing to shrink their unhealthy diet. \u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "For the detailed documentation of this project, see the **[Wishful Shrinking Product Website](https://ay2021s1-cs2103t-w10-2.github.io/tp/)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "If you would like to contribute code to this project, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "  "
      }
    ],
    "authorContributionMap": {
      "oliviajohansen": 13,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    compile \u0027com.jfoenix:jfoenix:9.0.10\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    // FontAwesome"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    // Versions higher than 2.x are for Java 11"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    compile \u0027org.kordamp.ikonli:ikonli-javafx:2.4.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    compile \u0027org.kordamp.ikonli:ikonli-fontawesome5-pack:2.4.0\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    archiveName \u003d \u0027wishfulShrinking.jar\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "daongochieu2810": 5,
      "-": 71
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "### Dao Ngoc Hieu"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "\u003cimg src\u003d\"images/daongochieu2810.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "[[homepage](https://resumednh.herokuapp.com)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "[[github](https://github.com/daongochieu2810)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "### Caitlin Jee Shen-Yi"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "\u003cimg src\u003d\"images/caitlinjee.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "[[github](http://github.com/caitlinjee)]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "* Responsibilities: Code Quality"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "### Olivia Juliani Johansen"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\u003cimg src\u003d\"images/oliviajohansen.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "[[github](http://github.com/oliviajohansen)]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "### Tan Jia Qi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "\u003cimg src\u003d\"images/jiaqi20.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "[[github](http://github.com/jiaqi20)]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "* Responsibilities: Testing + Integration"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "### Goh Tian Yong"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "\u003cimg src\u003d\"images/tianyong-goh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "[[github](https://github.com/TianYong-Goh)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* Responsibilities: Scheduling and tracking"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 3,
      "daongochieu2810": 4,
      "jiaqi20": 6,
      "oliviajohansen": 4,
      "caitlinjee": 4,
      "-": 33
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `RecipeListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "1. `Logic` uses the `WishfulShrinkingParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a recipe)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cRecipe\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `WishfulShrinking`, which `Recipe` references. This allows `WishfulShrinking` to only require one `Tag` object per unique `Tag`, instead of each `Recipe` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedWishfulShrinking`. It extends `WishfulShrinking` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "* `VersionedWishfulShrinking#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "* `VersionedWishfulShrinking#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "* `VersionedWishfulShrinking#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitWishfulShrinking()`, `Model#undoWishfulShrinking()` and `Model#redoWishfulShrinking()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedWishfulShrinking` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th recipe in the address book. The `delete` command calls `Model#commitWishfulShrinking()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new recipe. The `add` command also calls `Model#commitWishfulShrinking()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitWishfulShrinking()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Step 4. The user now decides that adding the recipe was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoWishfulShrinking()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial WishfulShrinking state, then there are no previous WishfulShrinking states to restore. The `undo` command uses `Model#canUndoWishfulShrinking()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoWishfulShrinking()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone WishfulShrinking states to restore. The `redo` command uses `Model#canRedoWishfulShrinking()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitWishfulShrinking()`, `Model#undoWishfulShrinking()` or `Model#redoWishfulShrinking()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitWishfulShrinking()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the recipe being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "* has a need to better manage diet"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "* has personal recipes"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "**Value proposition**: manage diet faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "| Priority | As a...           | Who...                                                        | I want to...                                                           | So that I can...                                                                      |"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|----------|-------------------|---------------------------------------------------------------|------------------------------------------------------------------------|---------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Potential user    | wants to work towards being healthier                         | be able to find out and read about the product before using it         | gauge if it is suitable before spending time to install it                            |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Potential user    | busy and wants convenience                                    | be able to read clearly how to install and run the app                 | save time and effort on the initial set up                                            |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Potential user    | busy and wants efficiency                                     | be able to read how to best use the product                            | I do not waste time and effort trying to figure out how to optimally use it           |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Potential user    | is more visual                                                | be able to see the app populated with sample data                      | easily see and learn how the app will look like when in use                           |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "| ***      | Potential user    | wants gather my recipes                                       | add my recipes onto the computer                                       | save my recipes in one location                                                       |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "| ***      | Potential user    | has many recipes                                              | view my created recipes easily                                         | better manage all my recipes                                                          |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Potential user    | is flexible                                                   | edit my added recipes according to my preference                       | save my ideal, personal recipes                                                       |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "| ***      | Potential user    | wants to have a tidy recipe collection                        | delete existing recipes                                                | better select my recipes that are ideal for my personal diet                          |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "| **       | Potential user    | lack healthy recipe resources                                 | have access to resources of healthy recipes                            | follow through balanced recipes to improve my diet                                    |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Potential user    | is too busy to look for my ideal recipe                       | have recipe reommendations                                             | explore recipes that are personalised to me and my diet                               |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "| ***      | Potential user    | is forgetful                                                  | keep track of items in my fridge                                       | make the most out of the fresh ingredients in my fridge                               |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "| ***      | Potential user    | wants to minimise time taken to choose a recipe               | easily view all my available ingredients at a glance                   | quickly choose a suitable recipe                                                      |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Potential user    | wants to be precise                                           | edit my ingredients in the fridge                                      | have an accurate list of ingredients in the fridge database that mimcs my real fridge |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "| ***      | Potential user    | wants to be organised                                         | remove ingredients from fridge                                         | have an updated list of ingredients in my fridge                                      |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "| *        | Potential user    | find it hard to keep track of my diet                         | track my food intake and calories                                      | better manage my daily diet                                                           |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Intermediate user | proficient in typing and using computers                      | to utilises my typing and computers skills such as on a CLI            | efficiently use the app to manage my diet                                             |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Intermediate user | likes aesthetics and cooking                                  | use a diet app that has impressive UI, smooth animations and effects   | have a good user experience navigating the app                                        |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Intermediate user | wants convenience in choosing suitable recipes                | know what ingredients I am missing from a recipe                       | know which ingredients to buy to follow a recipe                                      |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Intermediate user | wants to cook a meal but is limited by my ingredients variety | browse recipes that only use the ingredients I have                    | more easily select and follow a recipe                                                |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Intermediate user | is seeking customizable recipes                               | customise and save the supplied recipes in the database                | personalise every recipe for my specific diet                                         |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Intermediate user | want to make more efficient use of my time                    | filter for recipes that can be pre-cooked ahead of time                | plan and cook meals ahead of time to save time spent on cooking                       |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Intermediate user | wants a meal that can be quickly prepared                     | easily search for a recipe that has short preparation and cooking time | quickly cook and enjoy my meal                                                        |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "| **       | Intermediate user | wants to manage my ingredients                                | easily find the ingredients i want                                     | quickly find ingredients and save time on home cooking                                |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Intermediate user | wants to be healthier                                         | create my diet plan                                                    | better stick to a healthy diet.                                                       |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Intermediate user | keen on following a certain diet                              | keep track of my recipes for that specific diet                        | better stick to my diet plan                                                          |"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Intermediate user | organise my diet plan                                         | remove recipes that do not belong in a certain diet plan               | have a neat and accurate diet plan                                                    |"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Intermediate user | want to track my diet progress                                | want to view my calorie and food intake statistics                     | review my diet and work on being even healthier                                       |"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "| *        | Expert user       | is forgetful                                                  | have a table of commands and shortcuts                                 | use the app more effieciently.                                                        |"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Expert user       | is organized                                                  | group recipes into labelled sections by adding tags                    | easily find recipes of the same section                                               |"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Expert user       | is neat                                                       | remove recipes from labelled sections                                  | avoid each section being cluttered with recipes that don\u0027t belong in the section      |"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Expert user       | like to browse recipe                                         | filter the recipe base by my tags                                      | browse the recipe easily                                                              |"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Expert user       | likes convenience                                             | be able to export the recipes in the app to another device             | refer to the data from another device and share it with others                        |"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "|          | Expert user       | is a developer                                                | customize the app to my own preferences                                | contribute and extend the app further                                                 |"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "(For all use cases below, the **System** is the `WishfulShrinking` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "**Use case: Delete a recipe**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "1.  User requests to list recipes"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "2.  WishfulShrinking shows a list of recipes"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "3.  User requests to delete a specific recipe in the list"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "4.  WishfulShrinking deletes the recipe"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "(For all use cases below, the **System** is `Wishful Shrinking` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**Use case: Add ingredients**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  1. User chooses to add ingredients into the fridge."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  2. Wishful Shrinking adds the specified ingredients into the fridge."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "\t"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**Use case: Add a recipe**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  1. User chooses to add a recipe to the list of recipes."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  2. Wishful Shrinking adds the recipe to the list of recipes."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "\t  "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**Use case: View ingredients**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  1. User requests to view all ingredients that are in the fridge."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  2. Wishful Shrinking lists all the ingredients that are in the fridge."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "* 2a. The fridge is empty."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  Use case ends.  "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  "
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " **Use case: View recipes**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  1. User requests to view all recipes that are in the recipe collection."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  2. Wishful Shrinking lists all the recipes that are in the recipe collection, with their respective ingredients."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "* 2a. The list of recipes is empty."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  Use case ends.  "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "\t  "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**Use case: Delete an ingredient**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  1. User requests to view the ingredients in the fridge."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  2. Wishful Shrinker shows a list of ingredients that are in the fridge."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  3. User requests to delete a specific ingredient in the list."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  4. Wishful Shrinking deletes the ingredient."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "* 2a. The fridge is empty."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    * 3a1. Wishful Shrinking shows an error message."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "\t  "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**Use case: Delete a recipe**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  1. User requests to view the recipes in the recipe collection."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  2. Wishful Shrinker shows a list of recipes that are in the recipe collection."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  3. User requests to delete a specific recipe in the list."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  4. Wishful Shrinking deletes the recipe."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "* 2a. The list of recipes is empty."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    * 3a1. WishfulShrinking shows an error message."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "\t  "
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**Use case: Search for ingredient**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  1. User wants to search for ingredients by their name in the fridge."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  2. Wishful Shrinking lists the ingredients in the fridge that has the specified name, if present."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "\t"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**Use case: Search for recipe**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  1. User wants to search for recipes by their title in the recipe collection."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  2. Wishful Shrinking lists the recipes that has the specified title, if present."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "\t"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**Use case: Track calories**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  1. User wants to keep track of the food that they have eaten."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  2. Wishful Shrinking adds the recipes that the user has input to the calorie tracker."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**Use case: View help**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  1. User wants to view all valid commands they can use."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "  2. Wishful Shrinking shows all valid commands."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "2.  Should be able to hold up to 1000 recipes and ingredients without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "3.  Reserve an amount of 5MB memory for the baseline recipe data."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "4.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.  "
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "5.  Searching-related features might be slow if there are more than 2000 recipes or ingredients in the database."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "6.  The application does not need internet connection."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "7.  The application uses local database."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "8.  The local database will be immediately updated after each updating command."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "* **Fridge**: A personalised storage that contains all the ingredients that a user has"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "* **Recipe**: A set of cooking instructions that describes how to prepare a meal and ingredients required"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "* **Ingredient**: Foods that can be used to prepare a particular dish according to a recipe"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "* **Consumption**: A counter which calculates and displays the calorie intake of a user based on the recipes consumed"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "### Deleting a recipe"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "1. Deleting a recipe while all recipes are being shown"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "   1. Prerequisites: List all recipes using the `list` command. Multiple recipes in the list."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "      Expected: No recipe is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 40,
      "jiaqi20": 4,
      "oliviajohansen": 38,
      "caitlinjee": 110,
      "-": 317
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Run the `seedu.address.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [WishfulShrinking’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 1,
      "-": 54
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Wishful Shrinking is a **desktop app for managing your diet, keeping track of your on-hand ingredients, recipes, as well as the food you’ve eaten (along with their calories)**. It is optimized for fast and efficient typist as it uses a **Command Line Interface (CLI)** with the added beauty of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "1. Ensure your computer has Java `11` or above installed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "2. Download the latest `wishfulShrinking.jar` from [here](https://github.com/AY2021S1-CS2103T-W10-2/tp)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "3. Copy the file to an empty folder you want to use as the _home folder_."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "4. **Double-click** the jar file to start the app OR start the app using **CLI** and type `java -jar \u003cjar file name\u003e.jar`.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "   The app should look similar to the one shows below: \u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "   * **`recipe`** : Lists all recipes."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "   * **`addR`**` n/salad i/lettuce, carrots, olive oil` : Adds a `salad` recipe to Wishful Shrinking."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "   * **`deleteR`**`3` : Deletes the 3rd recipe shown in the current list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "6. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "# Features"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "  e.g. in `add n/TITLE`, `TITLE` is a parameter which can be used as `addR n/salad`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Shows a message explaining how to access the help page."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "## Recipe"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "### Adding a recipe: `add`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Adds a recipe to Recipes Collection."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Format: `addR n/TITLE i/INGREDIENTS`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* `addR n/salad i/lettuce, carrots, olive oil`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* `addR n/sandwiches i/breads, cheese`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "### Listing all recipes : `list`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Shows a list of all recipes in the Recipes Collection."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Format: `recipe`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "### Deleting a recipe : `delete`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Deletes the specified recipe from Recipes Collection."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Format: `deleteR INDEX`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* Deletes the recipe at the specified `INDEX`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* The index refers to the index number shown in the displayed recipe list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3......"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* `list` followed by `deleteR 2` deletes the 2nd recipe in Recipe Collection."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* `searchR n/salad` followed by `deleteR 1` deletes the 1st recipe in the results of the `search` command."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "### Search recipe by recipe title: `search`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Finds recipe with title contain any of the given keywords."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Format: `searchR n/TITLE [MORE_TITLE]`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* The search is case-insensitive. e.g `salad` will match `Salad`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* Only the recipe title is searched."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* The order of the keywords does not matter. e.g. Ham Salad will match Salad with Ham"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* `searchR n/salad` returns `salad` and `ham salad`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "### Eating a recipe : `add`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Add the specified recipe to the Consumption Collection from Recipes Collection."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Format: `eatR INDEX`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* Add the recipe at the specified `INDEX` to the Consumption Collection."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* The index refers to the index number shown in the displayed recipe list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3......"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* `list` followed by `eatR 2` deletes the 2nd recipe in Recipe Collection."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* `searchR n/salad` followed by `eatR 1` deletes the 1st recipe in the results of the `search` command."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "## Fridge"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "### Adding an ingredient: `add`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Adds an ingredient to fridge."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Format: `addF i/INGREDIENTS`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* `addF i/peanut`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* `addF i/banana, green peas, salmon fish`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "### Listing all ingredients : `list`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Shows a list of all ingredients in the fridge."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Format: `fridge`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "### Deleting an ingredient : `delete`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Deletes the specified ingredient from Fridge."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Format: `deleteF INDEX`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "* Deletes the recipe at the specified `INDEX`."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "* The index refers to the index number shown in the displayed recipe list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3......"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* `list` followed by `deleteF 2` deletes the 2nd ingredient in the fridge."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* `searchF peanut` followed by `deleteF 1` deletes the 1st ingredient in the results of the `search` command."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "### Search Ingredient: `search`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Finds ingredients that contain any of the given keywords."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Format: `searchF KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* The search is case-insensitive. e.g `peanut` will match `Peanut`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* Only the recipe title is searched."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* The order of the keywords does not matter. e.g. Peanut Butter will match Butter with Peanut"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "* `searchF peanut` returns `peanut`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Wishful Shrinking data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "### Remark `[coming in v1.3]`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "_{give a remark to the recipe}_"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "# FAQ"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "**Q**: Why is my data not saved?\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "**A**: Remember to copy the jar file to an EMPTY folder before starting the app."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "**Q**: Why is the app not running?\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "**A**: Ensure JDK `11` or above is installed."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "# Command summary"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "Features | Format, Examples"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "**Add recipe** | `addR n/TITLE i/INGREDIENTS` \u003cbr\u003e e.g., `addR n/salad i/lettuce, carrots, olive oil`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "**Add Ingredient to the fridge** | `addF i/INGREDIENTS` \u003cbr\u003e e.g., `addF i/banana, green peas, salmon fish`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "**Delete recipe** | `deleteR INDEX`\u003cbr\u003e e.g., `deleteR 3`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "**Delete Ingredient from the fridge** | `deleteF INDEX`\u003cbr\u003e e.g., `deleteF 3`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "**Search recipe** | `searchR n/KEYWORD`\u003cbr\u003e e.g., `searchR n/salad`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "**Search Ingredient in the fridge** | `searchF KEYWORD`\u003cbr\u003e e.g., `searchF avocado`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "**List recipe** | `recipe`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "**List ingredients in the fridge** | `fridge`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "**Eat recipe**| `eatR INDEX` \u003cbr\u003e e.g., `eatR 3`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 90,
      "jiaqi20": 5,
      "daongochieu2810": 4,
      "-": 108
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "title: Wishful Shrinking"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W10-2/tp/actions)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W10-2/tp)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "**Wishful Shrinking is a desktop application for managing your diet, keeping track of your on-hand ingredients, recipes, as well as the food you’ve eaten (along with their calories).** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "* If you are interested in using Wishful Shrinking, head over to the [_Quick Start_ section of the **User Guide**](https://ay2021s1-cs2103t-w10-2.github.io/tp/UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "* If you are interested about developing Wishful Shrinking, the [**Developer Guide**](https://ay2021s1-cs2103t-w10-2.github.io/tp/DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 1,
      "caitlinjee": 6,
      "-": 13
    }
  },
  {
    "path": "docs/team/johndoe.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "## Project: WishfulShrinking Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "WishfulShrinking - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 2,
      "-": 44
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "This command allows users of the WishfulShrinking application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Changes the remark of an existing recipe in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `WishfulShrinkingParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the recipe identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            + \"by the index number used in the last recipe listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @param index of the recipe in the filtered recipe list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @param remark of the recipe to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ":information_source: Don’t forget to update `WishfulShrinkingParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of recipe data. We achieve that by working with the `Recipe` model. Each field in a Recipe is implemented as a separate class (e.g. a `Name` object represents the recipe’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a recipe."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Create a new `Remark` in `seedu.address.model.recipe`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each recipe."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Simply add the following to [`seedu.address.ui.RecipeCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "**`RecipeCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Then insert the following into [`main/resources/view/RecipeListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "**`RecipeListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "## Modify `Recipe` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Since `RecipeCard` displays data from a `Recipe`, we need to update `Recipe` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "### Modify `Recipe`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "We change the constructor of `Recipe` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "### Update other usages of `Recipe`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Unfortunately, a change to `Recipe` will cause other commands to break, you will have to modify these commands to use the updated `Recipe`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Recipe` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "WishfulShrinking stores data by serializing `JsonAdaptedRecipe` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedRecipe` to work with our new `Recipe`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ":exclamation: You must delete WishfulShrinking’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause WishfulShrinking to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Now that we have finalized the `Recipe` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "**`RecipeCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public RecipeCard(Recipe recipe, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    remark.setText(recipe.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Recipe`. Since all fields in a `Recipe` are immutable, we create a new instance of a `Recipe` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "save it with `Model#setRecipe()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Recipe: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Recipe: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe editedRecipe \u003d new Recipe(recipeToEdit.getName(), recipeToEdit.getIngredient(), recipeToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                recipeToEdit.getAddress(), remark, recipeToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        model.setRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedRecipe));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * {@code recipeToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private String generateSuccessMessage(Recipe recipeToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return String.format(message, recipeToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "This concludes the tutorial for adding a new `Command` to WishfulShrinking."
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 44,
      "-": 350
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "When working on WishfulShrinking, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Recipe` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Recipe`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "The `address` field in `Recipe` is actually an instance of the `seedu.address.model.recipe.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditRecipeDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Let’s try removing references to `Address` in `EditRecipeDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "1. Safe delete the field `address` in `EditRecipeDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Recipe` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `RecipeCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "A quick look at the `RecipeCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "**`RecipeCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "**`RecipeCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003cLabel fx:id\u003d\"ingredients\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$ingredients\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "**`invalidRecipeWishfulShrinking.json`:**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "  \"recipes\": [ {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    \"name\": \"Recipe with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    \"ingredients\": \"9482424\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "daongochieu2810": 15,
      "-": 83
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/INGREDIENT] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        Command command \u003d wishfulShrinkingParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            storage.saveWishfulShrinking(model.getWishfulShrinking());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    **`WishfulShrinkingParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`WishfulShrinkingParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditRecipeDescriptor`. Recall that we can verify the contents of `editRecipeDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "       Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "       Recipe editedRecipe \u003d createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "       if (!recipeToEdit.isSameRecipe(editedRecipe) \u0026\u0026 model.hasRecipe(editedRecipe)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "       model.setRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "       model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    `JsonWishfulShrinking#saveWishfulShrinking()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableWishfulShrinking`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    **`JsonSerializableWishfulShrinking\\#JsonSerializableWishfulShrinking()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    * Converts a given {@code ReadOnlyWishfulShrinking} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    * {@code JsonSerializableWishfulShrinking}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "   public JsonSerializableWishfulShrinking(ReadOnlyWishfulShrinking source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "       recipes.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "           source.getRecipeList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                 .map(JsonAdaptedRecipe::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "1. It appears that a `JsonAdaptedRecipe` is created for each `Recipe` and then added to the `JsonSerializableWishfulShrinking`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "more about the inner workings of WishfulShrinking and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    5.  Add a new field to `Recipe`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "daongochieu2810": 24,
      "-": 225
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.ReadOnlyWishfulShrinking;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.WishfulShrinking;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.storage.JsonWishfulShrinkingStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.storage.WishfulShrinkingStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing WishfulShrinking ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        WishfulShrinkingStorage wishfulShrinkingStorage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                new JsonWishfulShrinkingStorage(userPrefs.getWishfulShrinkingFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        storage \u003d new StorageManager(wishfulShrinkingStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s Wishful Shrinking and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * The data from the sample Wishful Shrinking will be used instead if {@code storage}\u0027s WishfulShrinking"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * is not found, or an empty address book will be used instead if errors occur"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        Optional\u003cReadOnlyWishfulShrinking\u003e wishfulShrinkingOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ReadOnlyWishfulShrinking initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            wishfulShrinkingOptional \u003d storage.readWishfulShrinking();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            if (!wishfulShrinkingOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample WishfulShrinking\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            initialData \u003d wishfulShrinkingOptional.orElseGet(SampleDataUtil::getSampleWishfulShrinking);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty WishfulShrinking\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            initialData \u003d new WishfulShrinking();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty WishfulShrinking\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            initialData \u003d new WishfulShrinking();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty WishfulShrinking\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        logger.info(\"Starting WishfulShrinking \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Wishful Shrinking ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 11,
      "daongochieu2810": 14,
      "-": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final String LOG_FILE \u003d \"wishfulShrinking.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX \u003d \"The recipe index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final String MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX \u003d \"The ingredient index provided is \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            + \"invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String MESSAGE_INVALID_CONSUMPTION_DISPLAYED_INDEX \u003d \"The consumption index provided is \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + \"invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String MESSAGE_RECIPES_LISTED_OVERVIEW \u003d \"%1$d recipes listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String MESSAGE_INGREDIENT_LISTED_OVERVIEW \u003d \"%1$d ingredients listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 2,
      "oliviajohansen": 2,
      "caitlinjee": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return sentence.toUpperCase().contains(preppedWord.toUpperCase());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.ReadOnlyWishfulShrinking;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns the WishfulShrinking."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @see seedu.address.model.Model#getWishfulShrinking()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    ReadOnlyWishfulShrinking getWishfulShrinking();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of recipes */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of ingredients */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredIngredientList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of consumption */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    ObservableList\u003cConsumption\u003e getFilteredConsumptionList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Returns the user prefs\u0027 Wishful Shrinking file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    Path getWishfulShrinkingFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 6,
      "daongochieu2810": 10,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.logic.parser.WishfulShrinkingParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.ReadOnlyWishfulShrinking;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final WishfulShrinkingParser wishfulShrinkingParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        wishfulShrinkingParser \u003d new WishfulShrinkingParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        Command command \u003d wishfulShrinkingParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            storage.saveWishfulShrinking(model.getWishfulShrinking());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public ReadOnlyWishfulShrinking getWishfulShrinking() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return model.getWishfulShrinking();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public ObservableList\u003cConsumption\u003e getFilteredConsumptionList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return model.getFilteredConsumptionList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public Path getWishfulShrinkingFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return model.getWishfulShrinkingFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 9,
      "daongochieu2810": 15,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * Adds an ingredient to the the fridge."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class AddIngredientCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addF\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an ingredient to the fridge.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + PREFIX_INGREDIENT + \"INGREDIENT \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"QUANTITY\" + \"]\" + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            + PREFIX_INGREDIENT + \"bread, oranges\" + PREFIX_QUANTITY + \"2kg\" + \", cheese \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ingredient added: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This ingredient already exists in the fridge\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private final ArrayList\u003cIngredient\u003e toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Creates an AddIngredientCommand to add the specified {@code Ingredients}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public AddIngredientCommand(ArrayList\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        for (Ingredient ingredient: ingredients) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        toAdd \u003d ingredients;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public ArrayList\u003cIngredient\u003e getToAdd() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        StringBuilder ingredientsAdded \u003d new StringBuilder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        for (Ingredient ingredient : toAdd) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            if (model.hasIngredient(ingredient)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            ingredientsAdded.append(ingredient);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            model.addIngredient(ingredient);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String ingredientsAddedString \u003d ingredientsAdded.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        //        ingredientsAddedString \u003d ingredientsAddedString.substring(1, ingredientsAddedString.length() - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, ingredientsAddedString));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private boolean checkEachIngredient(ArrayList\u003cIngredient\u003e firstToCheck, ArrayList\u003cIngredient\u003e otherToCheck) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        if (firstToCheck.size() !\u003d otherToCheck.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        for (int i \u003d 0; i \u003c firstToCheck.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            if (!firstToCheck.get(i).equals(otherToCheck.get(i))) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                || (other instanceof AddIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                \u0026\u0026 checkEachIngredient(toAdd, ((AddIngredientCommand) other).getToAdd()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oliviajohansen": 22,
      "caitlinjee": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_IMAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * Adds a recipe to the Wishful Shrinking."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class AddRecipeCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addR\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a recipe to the Wishful Shrinking.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            + PREFIX_INGREDIENT + \"INGREDIENT \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + PREFIX_CALORIES + \"CALORIES \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + PREFIX_INSTRUCTION + \"INSTRUCTIONS \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + PREFIX_RECIPE_IMAGE + \"IMAGE \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + PREFIX_NAME + \"Chicken salad \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + PREFIX_INGREDIENT + \"chicken - 100g, lettuce - a bit, tomato \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + PREFIX_CALORIES + \"100 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + PREFIX_INSTRUCTION + \"1. cook 2. eat \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + PREFIX_RECIPE_IMAGE + \"images/salad.jpg \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + PREFIX_TAG + \"healthy \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + PREFIX_TAG + \"delicious\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New recipe added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the Wishful Shrinking\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private final Recipe toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Creates an AddRecipeCommand to add the specified {@code Recipe}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public AddRecipeCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        toAdd \u003d recipe;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (model.hasRecipe(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        model.addRecipe(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                || (other instanceof AddRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddRecipeCommand) other).toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 2,
      "daongochieu2810": 17,
      "caitlinjee": 16,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.WishfulShrinking;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * Clears the Wishful Shrinking."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Wishful Shrinking has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        model.setWishfulShrinking(new WishfulShrinking());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 2,
      "daongochieu2810": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /** Should show recipe list. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final boolean isShowRecipe;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /** Should show ingredient list. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final boolean isShowIngredient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /** Should show consumption list. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final boolean isShowConsumption;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                         boolean isShowRecipe, boolean isShowIngredient, boolean isShowConsumption) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this.isShowRecipe \u003d isShowRecipe;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this.isShowIngredient \u003d isShowIngredient;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        this.isShowConsumption \u003d isShowConsumption;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        this(feedbackToUser, false, false, false, false, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public boolean isShowRecipe() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return isShowRecipe;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public boolean isShowIngredient() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return isShowIngredient;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public boolean isShowConsumption() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return isShowConsumption;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, isShowRecipe, isShowIngredient, isShowConsumption);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 18,
      "daongochieu2810": 10,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteConsumptionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * Deletes a recipe identified using it\u0027s displayed index from the consumption list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class DeleteConsumptionCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteC\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + \": Deletes the food eaten identified by the index number used in the displayed consumption list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + \"Parameters: \" + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String MESSAGE_DELETE_CONSUMPTION_SUCCESS \u003d \"Deleted food eaten: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private final Index toDelete;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public DeleteConsumptionCommand(Index toDelete) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        this.toDelete \u003d toDelete;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        List\u003cConsumption\u003e lastShownList \u003d model.getFilteredConsumptionList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        if (toDelete.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CONSUMPTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Consumption consumptionToDelete \u003d lastShownList.get(toDelete.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        model.deleteConsumption(consumptionToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CONSUMPTION_SUCCESS, consumptionToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                || (other instanceof DeleteConsumptionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                \u0026\u0026 toDelete.equals(((DeleteConsumptionCommand) other).toDelete)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caitlinjee": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": " * Deletes an ingredient identified using it\u0027s displayed index from the fridge."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "public class DeleteIngredientCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteF\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            + \": Deletes the ingredient identified by the index number used in the displayed ingredient list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final String MESSAGE_DELETE_INGREDIENT_SUCCESS \u003d \"Deleted Ingredient: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public DeleteIngredientCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        List\u003cIngredient\u003e lastShownList \u003d model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        Ingredient ingredientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        model.deleteIngredient(ingredientToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_INGREDIENT_SUCCESS, ingredientToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                || (other instanceof DeleteIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteIngredientCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oliviajohansen": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": " * Deletes a recipe identified using it\u0027s displayed index from the recipe list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "public class DeleteRecipeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteR\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            + \": Deletes the recipe identified by the index number used in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            + \"Parameters: \" + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String MESSAGE_DELETE_RECIPE_SUCCESS \u003d \"Deleted Recipe: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    private final Index toDelete;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public DeleteRecipeCommand(Index toDelete) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        this.toDelete \u003d toDelete;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        if (toDelete.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        Recipe recipeToDelete \u003d lastShownList.get(toDelete.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        model.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_RECIPE_SUCCESS, recipeToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                || (other instanceof DeleteRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                \u0026\u0026 toDelete.equals(((DeleteRecipeCommand) other).toDelete)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 7,
      "jiaqi20": 12,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EatRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class EatRecipeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"eatR\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a recipe to the daily consumption. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            + \"Parameters:  INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String MESSAGE_EAT_RECIPE_SUCCESS \u003d \"Eat %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Creates an EatRecipeCommand to add the specified {@code Recipe}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public EatRecipeCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private String extractString(Recipe recipe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        builder.append(recipe.getName())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                .append(\" Calories: \")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                .append(recipe.getCalories() + \" cal\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CONSUMPTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        Recipe recipeToEat \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        model.addConsumption(new Consumption(recipeToEat));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EAT_RECIPE_SUCCESS, extractString(recipeToEat)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                || (other instanceof EatRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((EatRecipeCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.commons.Calories;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Edits the details of an existing recipe in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the recipe identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            + \"by the index number used in the displayed recipe list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT + \"INGREDIENT] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            + PREFIX_INGREDIENT + \"91234567 \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String MESSAGE_EDIT_RECIPE_SUCCESS \u003d \"Edited Recipe: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"This recipe already exists in the Recipe collection.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private final EditRecipeDescriptor editRecipeDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @param index of the recipe in the filtered recipe list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @param editRecipeDescriptor details to edit the recipe with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public EditCommand(Index index, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireNonNull(editRecipeDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this.editRecipeDescriptor \u003d new EditRecipeDescriptor(editRecipeDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe editedRecipe \u003d createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (!recipeToEdit.isSameRecipe(editedRecipe) \u0026\u0026 model.hasRecipe(editedRecipe)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        model.setRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Creates and returns a {@code Recipe} with the details of {@code recipeToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * edited with {@code editRecipeDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private static Recipe createEditedRecipe(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assert recipeToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Name updatedName \u003d editRecipeDescriptor.getName().orElse(recipeToEdit.getName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        String updatedInstruction \u003d editRecipeDescriptor.getInstruction().orElse(recipeToEdit.getInstruction());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        String updatedRecipeImage \u003d editRecipeDescriptor.getRecipeImage().orElse(recipeToEdit.getRecipeImage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ArrayList\u003cIngredient\u003e updatedIngredient \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                editRecipeDescriptor.getIngredient().orElse(recipeToEdit.getIngredient());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        Calories updatedCalories \u003d editRecipeDescriptor.getCalories().orElse(recipeToEdit.getCalories());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editRecipeDescriptor.getTags().orElse(recipeToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return new Recipe(updatedName, updatedInstruction, updatedRecipeImage, updatedIngredient, updatedCalories,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                updatedTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                \u0026\u0026 editRecipeDescriptor.equals(e.editRecipeDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Stores the details to edit the recipe with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * corresponding field value of the recipe."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static class EditRecipeDescriptor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        private String instruction;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        private String recipeImage;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        private ArrayList\u003cIngredient\u003e ingredients;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        private Calories calories;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public EditRecipeDescriptor() {}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public EditRecipeDescriptor(EditRecipeDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            setInstruction(toCopy.instruction);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            setRecipeImage(toCopy.recipeImage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            setIngredient(toCopy.ingredients);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            setCalories(toCopy.calories);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, ingredients, calories, tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        public void setInstruction(String instruction) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            this.instruction \u003d instruction;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        public Optional\u003cString\u003e getInstruction() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            return Optional.ofNullable(instruction);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        public void setRecipeImage(String recipeImage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            this.recipeImage \u003d recipeImage;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        public Optional\u003cString\u003e getRecipeImage() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            return Optional.ofNullable(recipeImage);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public void setIngredient(ArrayList\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public Optional\u003cArrayList\u003cIngredient\u003e\u003e getIngredient() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            return Optional.ofNullable(ingredients);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        public void setCalories(Calories calories) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            this.calories \u003d calories;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        public Optional\u003cCalories\u003e getCalories() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            return Optional.ofNullable(calories);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            if (!(other instanceof EditRecipeDescriptor)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            EditRecipeDescriptor e \u003d (EditRecipeDescriptor) other;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                    \u0026\u0026 getInstruction().equals(e.getInstruction())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                    \u0026\u0026 getRecipeImage().equals(e.getRecipeImage())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                    \u0026\u0026 getIngredient().equals(e.getIngredient())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                    \u0026\u0026 getCalories().equals(e.getCalories())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 11,
      "daongochieu2810": 50,
      "jiaqi20": 18,
      "caitlinjee": 5,
      "-": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Wishful Shrinking as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListConsumptionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CONSUMPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * Lists all ingredients in the fridge to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class ListConsumptionCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calories\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all Recipe ate\" + \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        model.updateFilteredConsumptionList(PREDICATE_SHOW_ALL_CONSUMPTION);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        ObservableList\u003cConsumption\u003e consump \u003d model.getFilteredConsumptionList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        int totalCalories \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        for (int i \u003d 0; i \u003c consump.size(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            builder.append((i + 1) + \". \" + consump.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            totalCalories +\u003d consump.get(i).getRecipe().getCalories().value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        builder.append(\"Total Calories: \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        builder.append(totalCalories + \" cal\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + builder.toString(), false, false, false, false, true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListIngredientsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INGREDIENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * Lists all ingredients in the fridge to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "public class ListIngredientsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"fridge\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all ingredients\" + \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        model.updateFilteredIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ObservableList\u003cIngredient\u003e ingredients \u003d model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredients.size(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            builder.append((i + 1) + \". \" + ingredients.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + builder.toString(), false, false, false, true, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 2,
      "oliviajohansen": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListRecipesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * Lists all recipes in the recipe collection to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "public class ListRecipesCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recipes\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all recipes\" + \"\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        ObservableList\u003cRecipe\u003e recipes \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size(); i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            builder.append((i + 1) + \". \" + recipes.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + builder.toString(), false, false, true, false, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 2,
      "daongochieu2810": 2,
      "jiaqi20": 10,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.IngredientContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * Finds and lists all ingredients in fridge whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class SearchIngredientCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchF\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all ingredients whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" banana\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private final IngredientContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public SearchIngredientCommand(IngredientContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        model.updateFilteredIngredientList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        ObservableList\u003cIngredient\u003e ingredients \u003d model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredients.size(); i++) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            builder.append((i + 1) + \". \" + ingredients.get(i).toString().trim() + \"\\n\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                String.format(Messages.MESSAGE_INGREDIENT_LISTED_OVERVIEW, model.getFilteredIngredientList().size())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                + \"\\n\" + builder.toString(), false, false, false, true, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                || (other instanceof SearchIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchIngredientCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "oliviajohansen": 1,
      "caitlinjee": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * Finds and lists all recipes in Recipe collection whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class SearchRecipeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"searchR\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all recipes whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/salad\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public SearchRecipeCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        model.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                String.format(Messages.MESSAGE_RECIPES_LISTED_OVERVIEW, model.getFilteredRecipeList().size()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                false, false, true, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                || (other instanceof SearchRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchRecipeCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 8,
      "daongochieu2810": 4,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": " * Represents an error which occurs during execution of a command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaqi20": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddIngredientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.AddIngredientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * Parses input arguments and creates a new AddIngredientCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class AddIngredientCommandParser implements Parser\u003cAddIngredientCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddIngredientCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * and returns an AddIngredientCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public AddIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INGREDIENT)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String ingredientString \u003d ParserUtil.parseIngredient(argMultimap.getValue(PREFIX_INGREDIENT).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredients \u003d IngredientParser.parse(ingredientString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return new AddIngredientCommand(ingredients);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 2,
      "oliviajohansen": 2,
      "caitlinjee": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddRecipeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_IMAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.commons.Calories;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Parses input arguments and creates a new AddRecipeCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class AddRecipeCommandParser implements Parser\u003cAddRecipeCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddRecipeCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * and returns an AddRecipeCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public AddRecipeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_INGREDIENT, PREFIX_CALORIES,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        PREFIX_INSTRUCTION, PREFIX_RECIPE_IMAGE, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_INGREDIENT, PREFIX_CALORIES,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                PREFIX_INSTRUCTION, PREFIX_RECIPE_IMAGE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String ingredientString \u003d ParserUtil.parseIngredient(argMultimap.getValue(PREFIX_INGREDIENT).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredients \u003d IngredientParser.parse(ingredientString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        //String[] ingredientsToken \u003d ingredientString.split(\",\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        //ArrayList\u003cIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        //for (int i \u003d 0; i \u003c ingredientsToken.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        //ingredients.add(new Ingredient(ingredientsToken[i].trim()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        Calories calories \u003d ParserUtil.parseCalories(argMultimap.getValue(PREFIX_CALORIES).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        String instruction \u003d argMultimap.getValue(PREFIX_INSTRUCTION).get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        String recipeImage \u003d argMultimap.getValue(PREFIX_RECIPE_IMAGE).get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Recipe recipe \u003d new Recipe(name, instruction, recipeImage, ingredients, calories, tagList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return new AddRecipeCommand(recipe);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 2,
      "jiaqi20": 10,
      "daongochieu2810": 14,
      "oliviajohansen": 7,
      "caitlinjee": 8,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"-\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public static final Prefix PREFIX_INSTRUCTION \u003d new Prefix(\"instr/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public static final Prefix PREFIX_RECIPE_IMAGE \u003d new Prefix(\"img/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Prefix PREFIX_CALORIES \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "daongochieu2810": 1,
      "jiaqi20": 2,
      "oliviajohansen": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteConsumptionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.DeleteConsumptionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class DeleteConsumptionCommandParser implements Parser\u003cDeleteConsumptionCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public DeleteConsumptionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            return new DeleteConsumptionCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                    DeleteConsumptionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caitlinjee": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteIngredientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.logic.commands.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "public class DeleteIngredientCommandParser implements Parser\u003cDeleteIngredientCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public DeleteIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            return new DeleteIngredientCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteIngredientCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oliviajohansen": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteRecipeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import seedu.address.logic.commands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "public class DeleteRecipeCommandParser implements Parser\u003cDeleteRecipeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public DeleteRecipeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            return new DeleteRecipeCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                    DeleteRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaqi20": 7,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EatRecipeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.logic.commands.EatRecipeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * Parses input arguments and creates a new EatRecipeCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class EatRecipeCommandParser implements Parser\u003cEatRecipeCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EatRecipeCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * and returns a EatRecipeCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public EatRecipeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            return new EatRecipeCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                    EatRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_INGREDIENT, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                    EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            editRecipeDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INGREDIENT).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            String ingredientString \u003d ParserUtil.parseIngredient(argMultimap"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                    .getValue(PREFIX_INGREDIENT).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            ArrayList\u003cIngredient\u003e ingredients \u003d IngredientParser.parse(ingredientString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            //String[] ingredientsToken \u003d ingredientString.split(\",\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            //ArrayList\u003cIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            //"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            //for (int i \u003d 0; i \u003c ingredientsToken.length; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            //  ingredients.add(new Ingredient(ingredientsToken[i].trim()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            //}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            editRecipeDescriptor.setIngredient(ingredients);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (!editRecipeDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return new EditCommand(index, editRecipeDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "daongochieu2810": 14,
      "oliviajohansen": 8,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/IngredientParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": " * Parse user inputted ingredients."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "public class IngredientParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * Parses a String made of 1 or more ingredient name and optional quantity then"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * adds them to an ArrayList of Ingredient objects to be returned"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * @param ingredientString String of 1 or more ingredient name and optional quantity"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * @return ArrayList of Ingredient objects of the ingredients in the parameter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static ArrayList\u003cIngredient\u003e parse(String ingredientString) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String[] ingredientsToken \u003d ingredientString.split(\",\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredientsToken.length; i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            String ingName \u003d ingredientsToken[i].trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            String ingQuantity \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            int indexOfDash \u003d ingName.indexOf(\"-\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            if (indexOfDash !\u003d -1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                ingName \u003d ingName.substring(0, indexOfDash).trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                ingQuantity \u003d getIngredientQuantity(ingredientsToken[i]).trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            ingredients.add(new Ingredient(ingName, ingQuantity));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return ingredients;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * Parses a user input ingredient name and optional quantity."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * Returns quantity if present."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * @param args ingredient string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * @return quantity string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private static String getIngredientQuantity(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ArgumentMultimap argMultimapQuantity \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        //if (!argMultimapQuantity.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        //  throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        //  AddIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return ParserUtil.parseQuantity(argMultimapQuantity.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oliviajohansen": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.commons.Calories;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            \"Ingredients should be separated by commas, \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                    + \"each ingredient and optional field quantity \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                    + \"separated by a hyphen, should be consisted \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                    + \"of alphanumeric characters only\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\w\\\\s-]+\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            + \"(,\\\\s*[\\\\w\\\\s-]*)*\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final String VALIDATION_REGEX_QUANTITY \u003d \"[\\\\w\\\\s]*\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * Checks if ingredient has attributes in the right format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * @param ingredient Ingredient to check."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * @return boolean to indicate whether ingredient is valid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static boolean isValidIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return ingredient.getValue().matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                \u0026\u0026 ingredient.getQuantity().matches(VALIDATION_REGEX_QUANTITY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Parses a {@code String ingredients} into a {@code Ingredient}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @throws ParseException if the given {@code ingredients} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static String parseIngredient(String ingredients) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireNonNull(ingredients);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String trimmedIngredient \u003d ingredients.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (!trimmedIngredient.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new ParseException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return trimmedIngredient;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * Parses a {@code String quantity} into a {@code Quantity}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * @throws ParseException if the given {@code quantity} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static String parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        if (!trimmedQuantity.matches(VALIDATION_REGEX_QUANTITY)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            throw new ParseException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return trimmedQuantity;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Parses a {@code String calories} into an {@code Calories}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * @throws ParseException if the given {@code calories} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static Calories parseCalories(String calories) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        requireNonNull(calories);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String trimmedCalories \u003d calories.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        if (!Calories.isValidCalories(trimmedCalories)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            throw new ParseException(Calories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return new Calories(Integer.parseInt(trimmedCalories));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 9,
      "daongochieu2810": 14,
      "oliviajohansen": 22,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SearchIngredientCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.SearchIngredientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.IngredientContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class SearchIngredientCommandParser implements Parser\u003cSearchIngredientCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public SearchIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        String value \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        String trimmedArgs \u003d value.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        String[] ingredientKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return new SearchIngredientCommand(new IngredientContainsKeywordsPredicate(Arrays.asList(ingredientKeywords)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caitlinjee": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SearchRecipeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.logic.commands.SearchRecipeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class SearchRecipeCommandParser implements Parser\u003cSearchRecipeCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public SearchRecipeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String name \u003d argMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String trimmedArgs \u003d name.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return new SearchRecipeCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 26,
      "daongochieu2810": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/WishfulShrinkingParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.AddIngredientCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.DeleteConsumptionCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.logic.commands.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import seedu.address.logic.commands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.logic.commands.EatRecipeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.logic.commands.ListConsumptionCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.logic.commands.ListIngredientsCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import seedu.address.logic.commands.ListRecipesCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.SearchIngredientCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.logic.commands.SearchRecipeCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class WishfulShrinkingParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        case AddRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            return new AddRecipeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        case AddIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            return new AddIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        case EatRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            return new EatRecipeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        case DeleteIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            return new DeleteIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        case DeleteRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            return new DeleteRecipeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        case DeleteConsumptionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            return new DeleteConsumptionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        case SearchRecipeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            return new SearchRecipeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        case SearchIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            return new SearchIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        case ListIngredientsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            return new ListIngredientsCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        case ListRecipesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            return new ListRecipesCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        case ListConsumptionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            return new ListConsumptionCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 12,
      "daongochieu2810": 4,
      "jiaqi20": 6,
      "oliviajohansen": 5,
      "caitlinjee": 11,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    Predicate\u003cRecipe\u003e PREDICATE_SHOW_ALL_RECIPES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    Predicate\u003cIngredient\u003e PREDICATE_SHOW_ALL_INGREDIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    Predicate\u003cConsumption\u003e PREDICATE_SHOW_ALL_CONSUMPTION \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Returns the user prefs\u0027 Wishful Shrinking file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    Path getWishfulShrinkingFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Sets the user prefs\u0027 Wishful Shrinking file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    void setWishfulShrinkingFilePath(Path wishfulShrinkingFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Replaces Wishful Shrinking data with the data in {@code wishfulShrinking}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    void setWishfulShrinking(ReadOnlyWishfulShrinking wishfulShrinking);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /** Returns the WishfulShrinking */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    ReadOnlyWishfulShrinking getWishfulShrinking();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the recipe collection."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    boolean hasRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Deletes the given recipe."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * The recipe must exist in the Wishful Shrinking."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    void deleteRecipe(Recipe target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Adds the given recipe."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * {@code recipe} must not already exist in the recipe collection."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    void addRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Replaces the given recipe {@code target} with {@code editedRecipe}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * {@code target} must exist in the recipe collection."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * another existing recipe in the recipe collection."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    void setRecipe(Recipe target, Recipe editedRecipe);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /** Returns an unmodifiable view of the filtered recipe list */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Updates the filter of the filtered recipe list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Eat the given recipe."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * The recipe must exist in the recipe Collection."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    void addConsumption(Consumption target);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Deletes the given consumption."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * The ingredient must exist in the consumption list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    void deleteConsumption(Consumption target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered consumption list */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    ObservableList\u003cConsumption\u003e getFilteredConsumptionList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Updates the filter of the filtered consumption list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    void updateFilteredConsumptionList(Predicate\u003cConsumption\u003e predicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Returns true if an ingredient with the same identity as {@code ingredient} exists in the fridge."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    boolean hasIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Deletes the given ingredient."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * The ingredient must exist in the fridge."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    void deleteIngredient(Ingredient target);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Adds the given ingredient."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * {@code ingredient} must not already exist in the fridge."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    void addIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Replaces the given ingredient {@code target} with {@code editedIngredient}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * {@code target} must exist in the fridge."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * The ingredient identity of {@code editedIngredient} must not be the same as another existing ingredient"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * in the fridge."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    void setIngredient(Ingredient target, Ingredient editedIngredient);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /** Returns an unmodifiable view of the filtered ingredient list */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredIngredientList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Updates the filter of the filtered ingredient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    void updateFilteredIngredientList(Predicate\u003cIngredient\u003e predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 22,
      "daongochieu2810": 16,
      "caitlinjee": 48,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * Represents the in-memory model of the Wishful Shrinking data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final WishfulShrinking wishfulShrinking;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e filteredRecipes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private final FilteredList\u003cIngredient\u003e filteredIngredients;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final FilteredList\u003cConsumption\u003e filteredConsumption;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Initializes a ModelManager with the given wishfulShrinking and userPrefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public ModelManager(ReadOnlyWishfulShrinking wishfulShrinking, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        requireAllNonNull(wishfulShrinking, userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        logger.fine(\"Initializing with Wishful Shrinking: \" + wishfulShrinking + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        this.wishfulShrinking \u003d new WishfulShrinking(wishfulShrinking);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        filteredRecipes \u003d new FilteredList\u003c\u003e(this.wishfulShrinking.getRecipeList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        filteredIngredients \u003d new FilteredList\u003c\u003e(this.wishfulShrinking.getIngredientList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        filteredConsumption \u003d new FilteredList\u003c\u003e(this.wishfulShrinking.getConsumptionList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this(new WishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public Path getWishfulShrinkingFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return userPrefs.getWishfulShrinkingFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void setWishfulShrinkingFilePath(Path wishfulShrinkingFilePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        requireNonNull(wishfulShrinkingFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        userPrefs.setWishfulShrinkingFilePath(wishfulShrinkingFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WishfulShrinking \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void setWishfulShrinking(ReadOnlyWishfulShrinking wishfulShrinking) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        this.wishfulShrinking.resetData(wishfulShrinking);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public ReadOnlyWishfulShrinking getWishfulShrinking() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return wishfulShrinking;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return wishfulShrinking.hasRecipe(recipe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        wishfulShrinking.removeRecipe(target);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        wishfulShrinking.addRecipe(recipe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        wishfulShrinking.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void addConsumption(Consumption target) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        wishfulShrinking.addConsumption(target);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void deleteConsumption(Consumption target) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        wishfulShrinking.removeConsumption(target);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return wishfulShrinking.hasIngredient(ingredient);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void deleteIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        wishfulShrinking.removeIngredient(target);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        wishfulShrinking.addIngredient(ingredient);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        updateFilteredIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        wishfulShrinking.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Recipe List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Recipe} backed by the internal list of"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * {@code versionedWishfulShrinking}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return filteredRecipes;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        filteredRecipes.setPredicate(predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Consumption List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public ObservableList\u003cConsumption\u003e getFilteredConsumptionList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return filteredConsumption;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void updateFilteredConsumptionList(Predicate\u003cConsumption\u003e predicate) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        filteredConsumption.setPredicate(predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Ingredients List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Ingredient} backed by the internal list of"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * {@code versionedWishfulShrinking}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return filteredIngredients;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void updateFilteredIngredientList(Predicate\u003cIngredient\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        filteredIngredients.setPredicate(predicate);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return wishfulShrinking.equals(other.wishfulShrinking)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                \u0026\u0026 filteredRecipes.equals(other.filteredRecipes)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                \u0026\u0026 filteredIngredients.equals(other.filteredIngredients)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                \u0026\u0026 filteredConsumption.equals(other.filteredConsumption);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 41,
      "daongochieu2810": 21,
      "caitlinjee": 39,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    Path getWishfulShrinkingFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyWishfulShrinking.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * Unmodifiable view of Wishful Shrinking"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public interface ReadOnlyWishfulShrinking {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns an unmodifiable view of the recipes list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * This list will not contain any duplicate recipes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    ObservableList\u003cRecipe\u003e getRecipeList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Returns an unmodifiable view of the ingredients list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * This list will not contain any duplicate ingredients."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    ObservableList\u003cIngredient\u003e getIngredientList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Returns an unmodifiable view of the consumption list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    ObservableList\u003cConsumption\u003e getConsumptionList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 7,
      "daongochieu2810": 16,
      "caitlinjee": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private Path wishfulShrinkingFilePath \u003d Paths.get(\"data\" , \"wishfulShrinking.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        setWishfulShrinkingFilePath(newUserPrefs.getWishfulShrinkingFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public Path getWishfulShrinkingFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return wishfulShrinkingFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void setWishfulShrinkingFilePath(Path wishfulShrinkingFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        requireNonNull(wishfulShrinkingFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        this.wishfulShrinkingFilePath \u003d wishfulShrinkingFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                \u0026\u0026 wishfulShrinkingFilePath.equals(o.wishfulShrinkingFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return Objects.hash(guiSettings, wishfulShrinkingFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + wishfulShrinkingFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 8,
      "daongochieu2810": 2,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/WishfulShrinking.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.ConsumptionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.UniqueIngredientList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.UniqueRecipeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Duplicates are not allowed (by .isSameRecipe comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class WishfulShrinking implements ReadOnlyWishfulShrinking {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private final UniqueRecipeList recipes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private final UniqueIngredientList ingredients;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final ConsumptionList consumption;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        recipes \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        consumption \u003d new ConsumptionList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public WishfulShrinking() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Creates an WishfulShrinking using the Recipes in the {@code toBeCopied}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public WishfulShrinking(ReadOnlyWishfulShrinking toBeCopied) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Replaces the contents of the recipe list with {@code recipes}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this.recipes.setRecipes(recipes);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Replaces the contents of the ingredient list with {@code ingredients}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * {@code ingredients} must not contain duplicate ingredients."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void setIngredients(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        this.ingredients.setIngredients(ingredients);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Replaces the contents of the consumption list with {@code consumptions}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * {@code consumptions} must not contain duplicate consumptions."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void setConsumptions(List\u003cConsumption\u003e consumptions) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        this.consumption.setConsumptions(consumptions);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Resets the existing data of this {@code WishfulShrinking} with {@code newData}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void resetData(ReadOnlyWishfulShrinking newData) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        setRecipes(newData.getRecipeList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        setIngredients(newData.getIngredientList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        setConsumptions(newData.getConsumptionList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    //// recipe-level operations"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the recipe collection."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return recipes.contains(recipe);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Adds a recipe to the Wishful Shrinking."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * The recipe must not already exist in the recipe collection."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void addRecipe(Recipe p) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        recipes.add(p);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Replaces the given recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * {@code target} must exist in the recipe collection."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * another existing recipe in the recipe collection."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireNonNull(editedRecipe);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        recipes.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Removes {@code key} from this {@code WishfulShrinking}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * {@code key} must exist in the recipe collection."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void removeRecipe(Recipe key) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        recipes.remove(key);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    //// calorie counter operations"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Add {@code key} from this {@code WishfulShrinking} to daily consumption."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * {@code key} must exist in the consumption collection."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void addConsumption(Consumption key) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        consumption.eat(key);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Removes {@code key} from this {@code WishfulShrinking}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * {@code key} must exist in the consumption list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void removeConsumption(Consumption key) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        consumption.remove(key);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Replaces the given consumption {@code target} in the list with {@code editedConsumption}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * {@code target} must exist in the consumption collection."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * The consumption identity of {@code editedConsumption} must not be the same as"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * another existing consumption in the consumption collection."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void setConsumption(Consumption target, Consumption editedConsumption) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireNonNull(editedConsumption);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        consumption.setConsumption(target, editedConsumption);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    //// ingredient-level operations"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Returns true if a ingredient with the same identity as {@code ingredient} exists in the fridge."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return ingredients.contains(ingredient);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Adds a ingredient to the fridge."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * The ingredient must not already exist in the fridge."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void addIngredient(Ingredient i) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        ingredients.add(i);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Replaces the given ingredient {@code target} in the list with {@code editedIngredient}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * {@code target} must exist in the fridge."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * The ingredient identity of {@code editedIngredient} must not be the same as another existing ingredient in the"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * fridge."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireNonNull(editedIngredient);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        ingredients.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Removes {@code key} from this {@code WishfulShrinking}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * {@code key} must exist in the fridge."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void removeIngredient(Ingredient key) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        ingredients.remove(key);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return recipes.asUnmodifiableObservableList().size() + \" recipes\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return recipes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getIngredientList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return ingredients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public ObservableList\u003cConsumption\u003e getConsumptionList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return consumption.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                || (other instanceof WishfulShrinking // instanceof handles nulls"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                \u0026\u0026 recipes.equals(((WishfulShrinking) other).recipes));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return recipes.hashCode();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 27,
      "daongochieu2810": 113,
      "caitlinjee": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Calories.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class Calories {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            \"Calories should only a positive Integer number, and it should not be blank\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final int MIN_CALORIES \u003d 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public final Integer value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Constructs a {@code Calories}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * @param calories A valid ingredients number."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public Calories(Integer calories) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        requireNonNull(calories);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        value \u003d calories;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Returns true if a given string is a valid Calorie."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static boolean isValidCalories(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return StringUtil.isNonZeroUnsignedInteger(test);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static boolean isValidCalories(int test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return test \u003e\u003d MIN_CALORIES;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                || (other instanceof Calories // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                \u0026\u0026 value.equals(((Calories) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consumption/Consumption.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.model.consumption;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class Consumption {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final Recipe recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public Consumption(Recipe recipe) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        requireAllNonNull(recipe);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public Recipe getRecipe() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return recipe;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Returns true if both recipes have the same identity and data fields."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * This defines a stronger notion of equality between two recipes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        if (!(other instanceof Consumption)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        Consumption otherConsumption \u003d (Consumption) other;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return otherConsumption.getRecipe().equals(getRecipe());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return Objects.hash(recipe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        builder.append(recipe.getName())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                .append(\" Calories: \")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                .append(recipe.getCalories());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consumption/ConsumptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.model.consumption;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * Tests that a {@code Consumption}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class ConsumptionContainsKeywordsPredicate implements Predicate\u003cConsumption\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public ConsumptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public boolean test(Consumption consumption) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(consumption.getRecipe()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        .getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                || (other instanceof ConsumptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                \u0026\u0026 keywords.equals(((ConsumptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caitlinjee": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consumption/ConsumptionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.model.consumption;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.consumption.exceptions.ConsumptionNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * A list of consumption that does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class ConsumptionList implements Iterable\u003cConsumption\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final ObservableList\u003cConsumption\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final ObservableList\u003cConsumption\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Adds a recipe to the consumption list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * The recipe must already exist in the list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void eat(Consumption toEat) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        requireNonNull(toEat);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        internalList.add(toEat);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Removes the equivalent food eaten from the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * The food must exist in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void remove(Consumption toRemove) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new ConsumptionNotFoundException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void setConsumption(Consumption target, Consumption editedConsumption) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireAllNonNull(target, editedConsumption);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new ConsumptionNotFoundException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        internalList.set(index, editedConsumption);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void setConsumptions(ConsumptionList replacement) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Replaces the contents of this list with {@code consumptions}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * {@code consumptions} must not contain duplicate consumptions."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void setConsumptions(List\u003cConsumption\u003e consumptions) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireAllNonNull(consumptions);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        internalList.setAll(consumptions);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public ObservableList\u003cConsumption\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public Iterator\u003cConsumption\u003e iterator() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                || (other instanceof ConsumptionList // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                \u0026\u0026 internalList.equals(((ConsumptionList) other).internalList));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 53,
      "caitlinjee": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/consumption/exceptions/ConsumptionNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.model.consumption.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * Signals that the operation is unable to find the specified consumption."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class ConsumptionNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "caitlinjee": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Ingredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "//import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * Represents a Recipe\u0027s ingredients in the Wishful Shrinking."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class Ingredient {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            \"Ingredients should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum} ][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final String VALIDATION_REGEX_QUANTITY \u003d \"[\\\\p{Alnum}/\\\\ ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private String quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Constructs a {@code Ingredient}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @param ingredient A valid ingredients number."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public Ingredient(String ingredient, String quantity) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        value \u003d ingredient;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public Ingredient() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setValue(String value) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public String getQuantity() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return quantity.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Returns true if both ingredients have the same name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * This defines a weaker notion of equality between two recipes."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public boolean isSameIngredient(Ingredient otherIngredient) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        if (otherIngredient \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return otherIngredient !\u003d null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                \u0026\u0026 otherIngredient.getValue().equals(getValue())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                \u0026\u0026 otherIngredient.getQuantity().equals(getQuantity());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static boolean isValidIngredient(Ingredient test) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return test.getValue().matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                \u0026\u0026 test.getQuantity().matches(VALIDATION_REGEX_QUANTITY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return quantity + \" \" + value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                || (other instanceof Ingredient // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                \u0026\u0026 value.equals(((Ingredient) other).getValue())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                \u0026\u0026 quantity.equals(((Ingredient) other).getQuantity())); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return Objects.hash(value, quantity);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 13,
      "daongochieu2810": 41,
      "oliviajohansen": 20,
      "caitlinjee": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/IngredientContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * Tests that a {@code Recipe}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class IngredientContainsKeywordsPredicate implements Predicate\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public IngredientContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public boolean test(Ingredient ingredient) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(ingredient.getValue(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                || (other instanceof IngredientContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                \u0026\u0026 keywords.equals(((IngredientContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caitlinjee": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/KeywordsContainIngredientPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": " * Tests that a {@code Ingredient}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "public class KeywordsContainIngredientPredicate implements Predicate\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public KeywordsContainIngredientPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public boolean test(Ingredient ingredient) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(ingredient.getValue(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                || (other instanceof KeywordsContainIngredientPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                \u0026\u0026 keywords.equals(((KeywordsContainIngredientPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oliviajohansen": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * Represents a Recipe\u0027s name in the Wishful Shrinking."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "daongochieu2810": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Tests that a {@code Recipe}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(recipe.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Recipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.commons.Calories;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * Represents a Recipe in the Wishful Shrinking."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class Recipe {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    private final String instruction;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    private final String recipeImage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private final ArrayList\u003cIngredient\u003e ingredients;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final Calories calories;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public Recipe(Name name, String instruction, String recipeImage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                  ArrayList\u003cIngredient\u003e ingredients, Calories calories,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                  Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireAllNonNull(name, ingredients, calories, instruction, tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        this.instruction \u003d instruction;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        this.recipeImage \u003d recipeImage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public String getInstruction() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        return instruction;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public String getRecipeImage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        return recipeImage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public ArrayList\u003cIngredient\u003e getIngredient() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return ingredients;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public Calories getCalories() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return calories;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns true if both recipes of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * This defines a weaker notion of equality between two recipes."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public boolean isSameRecipe(Recipe otherRecipe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (otherRecipe \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return otherRecipe !\u003d null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                \u0026\u0026 otherRecipe.getName().equals(getName())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                \u0026\u0026 otherRecipe.getInstruction().equals(getInstruction())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                \u0026\u0026 otherRecipe.getRecipeImage().equals(getRecipeImage())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                \u0026\u0026 (otherRecipe.getIngredient().equals(getIngredient()))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                \u0026\u0026 otherRecipe.getCalories().equals(getCalories())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                \u0026\u0026 otherRecipe.getTags().equals(getTags());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns true if both recipes have the same identity and data fields."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * This defines a stronger notion of equality between two recipes."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (!(other instanceof Recipe)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe otherRecipe \u003d (Recipe) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return otherRecipe.getName().equals(getName())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                \u0026\u0026 otherRecipe.getInstruction().equals(getInstruction())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                \u0026\u0026 otherRecipe.getRecipeImage().equals(getRecipeImage())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                \u0026\u0026 otherRecipe.getIngredient().equals(getIngredient())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                \u0026\u0026 otherRecipe.getCalories().equals(getCalories())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                \u0026\u0026 otherRecipe.getTags().equals(getTags());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return Objects.hash(name, instruction, recipeImage, ingredients, calories, tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                .append(\" Ingredient: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                .append(ingredients.stream()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                        .map(item -\u003e item.getQuantity() + \" \" + item.getValue())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                        .reduce(\"\", (a, b) -\u003e b.equals(\"\") ? a : b + \", \" + a))"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                .append(\" Calories: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                .append(getCalories() + \" cal\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                .append(\" Instructions: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .append(getInstruction())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 14,
      "daongochieu2810": 78,
      "jiaqi20": 19,
      "oliviajohansen": 1,
      "caitlinjee": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/UniqueIngredientList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateIngredientException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * A list of ingredients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * An ingredient is considered unique by comparing using {@code Ingredients#isSameIngredient(Ingredient)}. As such,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * adding and updating of ingredients uses Ingredient#isSameIngredient(Ingredient) for equality so as to ensure that"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * the ingredient being added or updated is  * unique in terms of identity in the UniqueIngredientList. However, the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * removal of a ingredient uses Ingredient#equals(Object) so  * as to ensure that the ingredient with exactly the same"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * @see Ingredient#isSameIngredient(Ingredient)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class UniqueIngredientList implements Iterable\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Returns true if the list contains an equivalent ingredient as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public boolean contains(Ingredient toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameIngredient);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Adds an ingredient to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * The ingredient must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void add(Ingredient toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Replaces the ingredient {@code target} in the list with {@code editedIngredient}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * The ingredient identity of {@code editedIngredient} must not be the same as another existing ingredient in the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        if (!target.isSameIngredient(editedIngredient) \u0026\u0026 contains(editedIngredient)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new DuplicateIngredientException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        internalList.set(index, editedIngredient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Removes the equivalent ingredient from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * The ingredient must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void remove(Ingredient toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void setIngredients(UniqueIngredientList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Replaces the contents of this list with {@code ingredients}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * {@code ingredients} must not contain duplicate ingredients."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void setIngredients(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        requireAllNonNull(ingredients);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        if (!ingredientsAreUnique(ingredients)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new DuplicateIngredientException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        internalList.setAll(ingredients);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public ObservableList\u003cIngredient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public Iterator\u003cIngredient\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                || (other instanceof UniqueIngredientList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueIngredientList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Returns true if {@code ingredients} contains only unique ingredients."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private boolean ingredientsAreUnique(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredients.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            for (int j \u003d i + 1; j \u003c ingredients.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                if (ingredients.get(i).isSameIngredient(ingredients.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caitlinjee": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/UniqueRecipeList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * A list of recipes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * A recipe is considered unique by comparing using {@code Recipe#isSameRecipe(Recipe)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * recipes uses Recipe#isSameRecipe(Recipe) for equality so as to ensure that the recipe being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * unique in terms of identity in the UniqueRecipeList. However, the removal of a recipe uses Recipe#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * as to ensure that the recipe with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * @see Recipe#isSameRecipe(Recipe)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class UniqueRecipeList implements Iterable\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns true if the list contains an equivalent recipe as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public boolean contains(Recipe toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameRecipe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Adds a recipe to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * The recipe must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void add(Recipe toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Replaces the recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (!target.isSameRecipe(editedRecipe) \u0026\u0026 contains(editedRecipe)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        internalList.set(index, editedRecipe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Removes the equivalent recipe from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * The recipe must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void remove(Recipe toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipes(UniqueRecipeList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Replaces the contents of this list with {@code recipes}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireAllNonNull(recipes);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (!recipesAreUnique(recipes)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        internalList.setAll(recipes);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public ObservableList\u003cRecipe\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public Iterator\u003cRecipe\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                || (other instanceof UniqueRecipeList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueRecipeList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns true if {@code recipes} contains only unique recipes."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private boolean recipesAreUnique(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            for (int j \u003d i + 1; j \u003c recipes.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                if (recipes.get(i).isSameRecipe(recipes.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/DuplicateIngredientException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * Signals that the operation will result in duplicate Ingredients (Ingredients are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class DuplicateIngredientException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public DuplicateIngredientException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        super(\"Operation would result in duplicate ingredients\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caitlinjee": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/DuplicateRecipeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Signals that the operation will result in duplicate Recipes (Recipes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class DuplicateRecipeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public DuplicateRecipeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        super(\"Operation would result in duplicate recipes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/IngredientNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * Signals that the operation is unable to find the specified recipe."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class IngredientNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "caitlinjee": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/RecipeNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Signals that the operation is unable to find the specified recipe."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class RecipeNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * Represents a Tag in the recipe collection."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "caitlinjee": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.ReadOnlyWishfulShrinking;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.WishfulShrinking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.commons.Calories;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Contains utility methods for populating {@code WishfulShrinking} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * For each recipe in openrecipes.txt:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * index 0: name, index 1: ingredients, index 2: instructions, index 5: image, index 7: calories"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * The method will parse the sample recipes txt file and into an array of Recipe objects."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * @return Recipe[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static Recipe[] getSampleRecipes() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ArrayList\u003cRecipe\u003e recipeList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        Recipe[] recipes \u003d new Recipe[]{};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        InputStream file \u003d SampleDataUtil.class.getResourceAsStream(\"/recipes/openrecipes.txt\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        Scanner sc \u003d new Scanner(file);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        Name recipeName \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String recipeInstructions \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String recipeImage \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        HashSet\u003cTag\u003e tag \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        Calories calories \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        while (sc.hasNextLine() \u0026\u0026 index \u003c 11) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            String field \u003d sc.nextLine();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                recipeName \u003d new Name(getRecipeName(field));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            } else if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                ingredients \u003d getRecipeIngredients(field);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            } else if (index \u003d\u003d 2) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                recipeInstructions \u003d getRecipeInstructions(field);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            } else if (index \u003d\u003d 3) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                tag.add(new Tag(getTag(field)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            } else if (index \u003d\u003d 5) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                recipeImage \u003d getRecipeImage(field);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            } else if (index \u003d\u003d 7) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                calories \u003d new Calories(getCalories(field));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            if (index \u003d\u003d 11) { //end of a recipe object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                index \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                requireAllNonNull(recipeName, recipeInstructions, recipeImage, ingredients,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                        calories, tag);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                Recipe toAdd \u003d new Recipe(recipeName, recipeInstructions, recipeImage, ingredients,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                        calories, tag);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                recipeList.add(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        if (recipeList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            recipeList.add(getFallbackRecipe());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        recipes \u003d recipeList.toArray(new Recipe[]{});"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return recipes;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private static String getRecipeName(String str) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return str.substring(10, str.length() - 3);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private static String getTag(String str) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return str.substring(8, str.length() - 3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private static String getRecipeInstructions(String str) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return str.substring(17, str.length() - 2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private static ArrayList\u003cIngredient\u003e getRecipeIngredients(String str) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String ingts \u003d str.substring(16, str.length() - 3);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String[] ingredients \u003d ingts.split(\", \");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        for (String ingredient: ingredients) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            ingredientList.add(getIngredientObject(ingredient));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return ingredientList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private static Ingredient getIngredientObject(String ingredient) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String[] ingtComponents \u003d ingredient.split(\" \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            sb.append(ingtComponents[0] + \" \");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            sb.append(ingtComponents[1] + \" \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            System.out.println(\"For sample recipes, all ingredients should have quantity field \" + e.toString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String quantity \u003d sb.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        for (int i \u003d 2; i \u003c ingtComponents.length; i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            sb.append(ingtComponents[i] + \" \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String ingredientValue \u003d sb.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return new Ingredient(ingredientValue, quantity);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private static String getRecipeImage(String str) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return str.substring(10, str.length() - 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private static int getCalories(String str) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String calorie \u003d str.substring(13, str.length() - 3);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            return Integer.parseInt(calorie);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            System.out.println(\"Calorie string cannot be converted to int \" + e.toString());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private static Recipe getFallbackRecipe() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        Name name \u003d new Name(\"Tahini cake\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String instructions \u003d \"Heat oven. Cream butter, add flour\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String recipeImage \u003d \"https://i.guim.co.uk/img/media/0a07b58d3e8a5c67901c90c7b3b25885095597e6\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                + \"/84_2248_5678_6000/master/5678.jpg?width\u003d620\u0026quality\u003d85\u0026auto\u003dformat\u0026fit\u003dmax\u0026s\u003db20e33f\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                + \"7054827278dbd2b9d8a2e7616\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        Ingredient ingredient1 \u003d new Ingredient(\"unsalted butter\", \"210g\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        Ingredient ingredient2 \u003d new Ingredient(\"flour\", \"2 cups\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredientList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ingredientList.add(ingredient1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ingredientList.add(ingredient1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        Calories calories \u003d new Calories(100);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        tags.add(new Tag(\"healthy\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return new Recipe(name, instructions, recipeImage, ingredientList, calories, tags);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static ReadOnlyWishfulShrinking getSampleWishfulShrinking() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        WishfulShrinking sampleAb \u003d new WishfulShrinking();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        for (Recipe sampleRecipe : getSampleRecipes()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            sampleAb.addRecipe(sampleRecipe);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 4,
      "daongochieu2810": 11,
      "oliviajohansen": 122,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedConsumption.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.commons.Calories;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class JsonAdaptedConsumption {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Consumption\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    private final String instruction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    private final String recipeImage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private final ArrayList\u003cIngredient\u003e ingredients;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final Integer calories;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecipe} with the given recipe details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public JsonAdaptedConsumption(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                             @JsonProperty(\"instruction\") String instruction,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                             @JsonProperty(\"recipeImage\") String recipeImage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                             @JsonProperty(\"ingredients\") ArrayList\u003cIngredient\u003e ingredients,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                             @JsonProperty(\"calories\") Integer calories,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        this.instruction \u003d instruction;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        this.recipeImage \u003d recipeImage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Converts a given {@code Recipe} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public JsonAdaptedConsumption(Recipe source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        instruction \u003d source.getInstruction();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        recipeImage \u003d source.getRecipeImage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ingredients \u003d source.getIngredient();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        calories \u003d source.getCalories().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Converts this Jackson-friendly adapted recipe object into the model\u0027s {@code Consumption} object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Consumption."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public Consumption toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        final List\u003cTag\u003e recipeTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            recipeTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                    Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        if (instruction \u003d\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                    String.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        final String modelInstruction \u003d instruction;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        if (recipeImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                    String.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        final String modelRecipeImage \u003d recipeImage;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (ingredients \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                    Ingredient.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        for (Ingredient ing: ingredients) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            if (!Ingredient.isValidIngredient(ing)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                throw new IllegalValueException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        final ArrayList\u003cIngredient\u003e modelIngredients \u003d new ArrayList\u003c\u003e(ingredients);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        if (calories \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                    Calories.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        if (!Calories.isValidCalories(calories)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            throw new IllegalValueException(Calories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        final Calories modelCalories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(recipeTags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        return new Consumption(new Recipe(modelName, modelInstruction, modelRecipeImage,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                modelIngredients, modelCalories, modelTags));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 72,
      "daongochieu2810": 5,
      "jiaqi20": 21,
      "oliviajohansen": 1,
      "caitlinjee": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedIngredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * Jackson-friendly version of {@link Ingredient}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "class JsonAdaptedIngredient {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Ingredient\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredient} with the given ingredient details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public JsonAdaptedIngredient(@JsonProperty(\"value\") String value,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                                 @JsonProperty(\"quantity\") String quantity) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Converts a given {@code Ingredient} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public JsonAdaptedIngredient(Ingredient source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        value \u003d source.getValue(); //.fullName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        quantity \u003d source.getQuantity();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Converts this Jackson-friendly adapted ingredient object into the model\u0027s {@code Ingredient} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ingredient."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public Ingredient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                    Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        if (!Name.isValidName(value)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        //final Name modelName \u003d new Name(value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return new Ingredient(value, quantity);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oliviajohansen": 6,
      "caitlinjee": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRecipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "//import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.commons.Calories;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Jackson-friendly version of {@link Recipe}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "class JsonAdaptedRecipe {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Recipe\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    private final String instruction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    private final String recipeImage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private final ArrayList\u003cIngredient\u003e ingredients;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final Integer calories;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecipe} with the given recipe details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public JsonAdaptedRecipe(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                             @JsonProperty(\"instruction\") String instruction,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                             @JsonProperty(\"recipeImage\") String recipeImage,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                             @JsonProperty(\"ingredients\") ArrayList\u003cIngredient\u003e ingredients,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                             @JsonProperty(\"calories\") Integer calories,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        this.instruction \u003d instruction;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        this.recipeImage \u003d recipeImage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        this.calories \u003d calories;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Converts a given {@code Recipe} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public JsonAdaptedRecipe(Recipe source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        instruction \u003d source.getInstruction();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        recipeImage \u003d source.getRecipeImage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ingredients \u003d source.getIngredient();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        calories \u003d source.getCalories().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Converts this Jackson-friendly adapted recipe object into the model\u0027s {@code Recipe} object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted recipe."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public Recipe toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        final List\u003cTag\u003e recipeTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            recipeTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                    Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        if (instruction \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                    String.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        final String modelInstruction \u003d instruction;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        if (recipeImage \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                    String.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        final String modelRecipeImage \u003d recipeImage;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (ingredients \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                    Ingredient.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        for (Ingredient ing: ingredients) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            if (!Ingredient.isValidIngredient(ing)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                throw new IllegalValueException(Ingredient.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        final ArrayList\u003cIngredient\u003e modelIngredients \u003d new ArrayList\u003c\u003e(ingredients);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        if (calories \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                    Calories.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        if (!Calories.isValidCalories(calories)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            throw new IllegalValueException(Calories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        final Calories modelCalories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(recipeTags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        return new Recipe(modelName, modelInstruction, modelRecipeImage,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                modelIngredients, modelCalories, modelTags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 16,
      "daongochieu2810": 23,
      "jiaqi20": 21,
      "oliviajohansen": 1,
      "caitlinjee": 21,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableWishfulShrinking.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.ReadOnlyWishfulShrinking;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.WishfulShrinking;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * An Immutable WishfulShrinking that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "@JsonRootName(value \u003d \"wishfulShrinking\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "class JsonSerializableWishfulShrinking {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"Recipes list contains duplicate recipe(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INGREDIENT \u003d \"Fridge contains duplicate ingredient(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private final List\u003cJsonAdaptedRecipe\u003e recipes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final List\u003cJsonAdaptedConsumption\u003e consumption \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Constructs a {@code JsonSerializableWishfulShrinking} with the given recipes."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public JsonSerializableWishfulShrinking(@JsonProperty(\"recipes\") List\u003cJsonAdaptedRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this.recipes.addAll(recipes);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Constructs a {@code JsonSerializableWishfulShrinking} with the given ingredients."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /*@JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public JsonSerializableWishfulShrinking(@JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Converts a given {@code ReadOnlyWishfulShrinking} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableWishfulShrinking}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public JsonSerializableWishfulShrinking(ReadOnlyWishfulShrinking source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        recipes.addAll(source.getRecipeList().stream().map(JsonAdaptedRecipe::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        ingredients.addAll(source.getIngredientList().stream().map(JsonAdaptedIngredient::new).collect(Collectors"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        consumption.addAll(source.getConsumptionList().stream().map(consump -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            String recipeName \u003d consump.getRecipe().getName().fullName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            ArrayList\u003cIngredient\u003e ingredients \u003d consump.getRecipe().getIngredient();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            String instruction \u003d consump.getRecipe().getInstruction();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            String recipeImage \u003d consump.getRecipe().getRecipeImage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            int calories \u003d consump.getRecipe().getCalories().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            /*Set\u003cTag\u003e tags \u003d consump.getRecipe().getTags();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            if (tags !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                jsonTags.addAll(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            }*/"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            List\u003cJsonAdaptedTag\u003e jsonTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            jsonTags.addAll(consump.getRecipe().getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                    .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                    .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            return new JsonAdaptedConsumption(recipeName, instruction, recipeImage, ingredients, calories, jsonTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }).collect(Collectors"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                .toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Converts this Wishful Shrinking into the model\u0027s {@code WishfulShrinking} object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public WishfulShrinking toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        WishfulShrinking wishfulShrinking \u003d new WishfulShrinking();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        for (JsonAdaptedRecipe jsonAdaptedRecipe : recipes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            Recipe recipe \u003d jsonAdaptedRecipe.toModelType();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            if (wishfulShrinking.hasRecipe(recipe)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            wishfulShrinking.addRecipe(recipe);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        for (JsonAdaptedIngredient jsonAdaptedIngredient : ingredients) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            Ingredient ingredient \u003d jsonAdaptedIngredient.toModelType();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            if (wishfulShrinking.hasIngredient(ingredient)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INGREDIENT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            wishfulShrinking.addIngredient(ingredient);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        for (JsonAdaptedConsumption jsonAdaptedConsumption : consumption) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            Consumption recipeToEat \u003d jsonAdaptedConsumption.toModelType();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            wishfulShrinking.addConsumption(recipeToEat);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return wishfulShrinking;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 19,
      "daongochieu2810": 55,
      "jiaqi20": 2,
      "caitlinjee": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonWishfulShrinkingStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.ReadOnlyWishfulShrinking;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * A class to access WishfulShrinking data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class JsonWishfulShrinkingStorage implements WishfulShrinkingStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonWishfulShrinkingStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public JsonWishfulShrinkingStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public Path getWishfulShrinkingFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public Optional\u003cReadOnlyWishfulShrinking\u003e readWishfulShrinking() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return readWishfulShrinking(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Similar to {@link #readWishfulShrinking()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public Optional\u003cReadOnlyWishfulShrinking\u003e readWishfulShrinking(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Optional\u003cJsonSerializableWishfulShrinking\u003e jsonWishfulShrinking \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                filePath, JsonSerializableWishfulShrinking.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (!jsonWishfulShrinking.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            return Optional.of(jsonWishfulShrinking.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void saveWishfulShrinking(ReadOnlyWishfulShrinking wishfulShrinking) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        saveWishfulShrinking(wishfulShrinking, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Similar to {@link #saveWishfulShrinking(ReadOnlyWishfulShrinking)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void saveWishfulShrinking(ReadOnlyWishfulShrinking wishfulShrinking, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        requireNonNull(wishfulShrinking);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableWishfulShrinking(wishfulShrinking), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 5,
      "daongochieu2810": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.ReadOnlyWishfulShrinking;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public interface Storage extends WishfulShrinkingStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    Path getWishfulShrinkingFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    Optional\u003cReadOnlyWishfulShrinking\u003e readWishfulShrinking() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    void saveWishfulShrinking(ReadOnlyWishfulShrinking wishfulShrinking) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "daongochieu2810": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.ReadOnlyWishfulShrinking;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Manages storage of WishfulShrinking data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private WishfulShrinkingStorage wishfulShrinkingStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code WishfulShrinkingStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public StorageManager(WishfulShrinkingStorage wishfulShrinkingStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        this.wishfulShrinkingStorage \u003d wishfulShrinkingStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d WishfulShrinking methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public Path getWishfulShrinkingFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return wishfulShrinkingStorage.getWishfulShrinkingFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public Optional\u003cReadOnlyWishfulShrinking\u003e readWishfulShrinking() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return readWishfulShrinking(wishfulShrinkingStorage.getWishfulShrinkingFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public Optional\u003cReadOnlyWishfulShrinking\u003e readWishfulShrinking(Path filePath)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return wishfulShrinkingStorage.readWishfulShrinking(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void saveWishfulShrinking(ReadOnlyWishfulShrinking wishfulShrinking) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        saveWishfulShrinking(wishfulShrinking, wishfulShrinkingStorage.getWishfulShrinkingFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void saveWishfulShrinking(ReadOnlyWishfulShrinking wishfulShrinking, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        wishfulShrinkingStorage.saveWishfulShrinking(wishfulShrinking, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 10,
      "daongochieu2810": 8,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/WishfulShrinkingStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.ReadOnlyWishfulShrinking;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Represents a storage for {@link seedu.address.model.WishfulShrinking}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public interface WishfulShrinkingStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    Path getWishfulShrinkingFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns WishfulShrinking data as a {@link ReadOnlyWishfulShrinking}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    Optional\u003cReadOnlyWishfulShrinking\u003e readWishfulShrinking() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @see #getWishfulShrinkingFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    Optional\u003cReadOnlyWishfulShrinking\u003e readWishfulShrinking(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Saves the given {@link ReadOnlyWishfulShrinking} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * @param wishfulShrinking cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    void saveWishfulShrinking(ReadOnlyWishfulShrinking wishfulShrinking) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @see #saveWishfulShrinking(ReadOnlyWishfulShrinking)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    void saveWishfulShrinking(ReadOnlyWishfulShrinking wishfulShrinking, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 3,
      "daongochieu2810": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ConsumptionCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * An UI component that displays information of a {@code Consumption}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class ConsumptionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final String FXML \u003d \"ConsumptionListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on WishfulShrinking level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public final Consumption consumption;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private Label calories;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private ImageView recipeImageView;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Creates a {@code ConsumptionCode} with the given {@code Consumption} and index to display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public ConsumptionCard(Consumption consumption, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        this.consumption \u003d consumption;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        name.setText(consumption.getRecipe().getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        recipeImageView.setImage(new Image(consumption.getRecipe().getRecipeImage()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        calories.setText(consumption.getRecipe().getCalories().value.toString() + \" cal\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        if (!(other instanceof ConsumptionCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        ConsumptionCard card \u003d (ConsumptionCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                \u0026\u0026 consumption.equals(card.consumption);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ConsumptionListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * Panel containing the list of consumption."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class ConsumptionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final String FXML \u003d \"ConsumptionListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ConsumptionListPanel.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private ListView\u003cConsumption\u003e consumptionListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Creates a {@code ConsumptionListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public ConsumptionListPanel(ObservableList\u003cConsumption\u003e consumptionList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        consumptionListView.setItems(consumptionList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        consumptionListView.setCellFactory(listView -\u003e new ConsumptionListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Consumption} using a {@code ConsumptionCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    class ConsumptionListViewCell extends ListCell\u003cConsumption\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        protected void updateItem(Consumption consumption, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            super.updateItem(consumption, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            if (empty || consumption \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                setGraphic(new ConsumptionCard(consumption, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-w10-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IngredientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "//import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * An UI component that displays information of a {@code Recipe}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class IngredientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private static final String FXML \u003d \"IngredientListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on WishfulShrinking level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public final Ingredient ingredient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private Label ingredients;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Creates a {@code RecipeCode} with the given {@code Recipe} and index to display."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public IngredientCard(Ingredient ingredient, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        name.setText(ingredient.getValue());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (!(other instanceof RecipeCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        IngredientCard card \u003d (IngredientCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return id.getText().equals(card.id.getText());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IngredientListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import com.jfoenix.controls.JFXListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import com.jfoenix.controls.JFXListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Panel containing the list of recipes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class IngredientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private static final String FXML \u003d \"IngredientListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RecipeListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private JFXListView\u003cIngredient\u003e ingredientListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Creates a {@code RecipeListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public IngredientListPanel(ObservableList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ingredientListView.setItems(ingredientList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ingredientListView.setCellFactory(listView -\u003e new IngredientListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Recipe} using a {@code RecipeCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    class IngredientListViewCell extends JFXListCell\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        protected void updateItem(Ingredient ingredient, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            super.updateItem(ingredient, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            if (empty || ingredient \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                setGraphic(new IngredientCard(ingredient, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import com.jfoenix.assets.JFoenixResources;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import com.jfoenix.controls.JFXDecorator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import com.jfoenix.svg.SVGGlyph;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import com.jfoenix.svg.SVGGlyphLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.scene.layout.BorderPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private RecipeListPanel recipeListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private IngredientListPanel ingredientListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private ConsumptionListPanel consumptionListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private Scene mainScene;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private BorderPane container;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getWishfulShrinkingFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    void fillRecipePanel() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        recipeListPanel \u003d new RecipeListPanel(logic.getFilteredRecipeList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        listPanelPlaceholder.getChildren().add(recipeListPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    void fillIngredientPanel() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ingredientListPanel \u003d new IngredientListPanel(logic.getFilteredIngredientList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        listPanelPlaceholder.getChildren().add(ingredientListPanel.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    void fillConsumptionPanel() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        consumptionListPanel \u003d new ConsumptionListPanel(logic.getFilteredConsumptionList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        listPanelPlaceholder.getChildren().add(consumptionListPanel.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        new Thread(() -\u003e {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                SVGGlyphLoader.loadGlyphsFont(MainWindow.class.getResourceAsStream(\"/fonts/icomoon.svg\"),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                        \"icomoon.svg\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            } catch (IOException ioExc) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                ioExc.printStackTrace();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }).start();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        JFXDecorator decorator \u003d new JFXDecorator(primaryStage, container);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        decorator.setCustomMaximize(true);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        decorator.setGraphic(new SVGGlyph(\"\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        mainScene.setRoot(decorator);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        final ObservableList\u003cString\u003e stylesheets \u003d mainScene.getStylesheets();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        stylesheets.addAll(JFoenixResources.load(\"css/jfoenix-fonts.css\").toExternalForm(),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                JFoenixResources.load(\"css/jfoenix-design.css\").toExternalForm(),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                MainWindow.class.getResource(\"/css/wishful-shrinking.css\").toExternalForm());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public RecipeListPanel getRecipeListPanel() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return recipeListPanel;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            if (commandResult.isShowIngredient()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                fillIngredientPanel();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            if (commandResult.isShowRecipe()) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                fillRecipePanel();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            if (commandResult.isShowConsumption()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                listPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                fillConsumptionPanel();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 11,
      "daongochieu2810": 57,
      "-": 188
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecipeCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * An UI component that displays information of a {@code Recipe}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class RecipeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private static final String FXML \u003d \"RecipeListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on WishfulShrinking level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public final Recipe recipe;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private Label ingredients;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private Label calories;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    private Label instruction;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private ImageView recipeImage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Creates a {@code RecipeCode} with the given {@code Recipe} and index to display."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public RecipeCard(Recipe recipe, int displayedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        name.setText(recipe.getName().fullName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        instruction.setText(recipe.getInstruction());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        //Image image \u003d new Image(recipe.getRecipeImage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        //recipeImageView \u003d new ImageView(image);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        recipeImage.setImage(new Image(recipe.getRecipeImage()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ingredients.setText(recipe.getIngredient().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                .map(item -\u003e item.getQuantity() + \" \" + item.getValue())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                .reduce(\"\", (a, b) -\u003e b.equals(\"\") ? a : b + \", \" + a));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        calories.setText(recipe.getCalories().value.toString() + \" cal\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        this.recipe.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        if (!(other instanceof RecipeCard)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        RecipeCard card \u003d (RecipeCard) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                \u0026\u0026 recipe.equals(card.recipe);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 9,
      "daongochieu2810": 16,
      "jiaqi20": 7,
      "oliviajohansen": 1,
      "caitlinjee": 5,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecipeListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import com.jfoenix.controls.JFXListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import com.jfoenix.controls.JFXListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Panel containing the list of recipes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class RecipeListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private static final String FXML \u003d \"RecipeListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(RecipeListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private JFXListView\u003cRecipe\u003e recipeListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Creates a {@code RecipeListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public RecipeListPanel(ObservableList\u003cRecipe\u003e recipeList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        recipeListView.setItems(recipeList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        recipeListView.setCellFactory(listView -\u003e new RecipeListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Recipe} using a {@code RecipeCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    class RecipeListViewCell extends JFXListCell\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        protected void updateItem(Recipe recipe, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            super.updateItem(recipe, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            if (empty || recipe \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                setGraphic(new RecipeCard(recipe, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 50
    }
  },
  {
    "path": "src/main/resources/recipes/openrecipes.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "{\"name\": \"Easter Leftover Sandwich\","
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"ingredients\": \"12 whole Hard Boiled Eggs, 1/2 cup Mayonnaise, 3 Tablespoons Grainy Dijon Mustard,  to taste Salt And Pepper,  Several Dashes Worcestershire Sauce,  Leftover Slices Baked Ham,  2 whole Kaiser Rolls Or Other Bread\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"instructions\": \"Make egg salad by chopping the hard boiled eggs and mixing in a bowl with mayonnaise, Dijon. Halve the rolls and spread one half with Dijon, the other half with mayonnaise. Sprinkle the mayonnaise-spread half with salt and pepper. Lay cheese and ham on the mustard half; lay avocado, onion slices, tomato slices, egg salad, and lettuce on the other half.\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"tag\": \"healthy\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"url\": \"http://thepioneerwoman.com/cooking/2013/04/easter-leftover-sandwich/\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"image\": \"images/sandwich.jpeg\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"cookTime\": \"PT\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"calories\": \"70\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"datePublished\": \"2013-04-01\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"prepTime\": \"PT15M\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"description\": \"Got leftover Easter eggs? Got leftover Easter ham? Got a hearty appetite? Good! You\u0027ve come to the right place!    I...\"}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "{\"name\": \"Pasta with Pesto Cream Sauce\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"ingredients\": \"3/4 cups Fresh Basil Leaves, 1/2 cup Grated Parmesan Cheese, 3 Tablespoons Pine Nuts, 2 cloves Garlic Peeled, 1/3 cup Extra Virgin Olive Oil, 1/2 cup Heavy Cream, 2 Tablespoons Butter, 1/4 cup Grated Parmesan, 12 ounces Pasta, 2 whole Tomatoes Diced\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"instructions\": \"Cook pasta until al dente. Add basil leaves, 1/2 cup Parmesan, pine nuts, and salt and pepper to food processor or blender. Turn machine on, then drizzle in olive oil while it mixes. Continue blending until combined, adding additional olive oil if needed. Set aside. Heat cream and butter in a small saucepan over medium-low heat. Add pesto and stir. Drain pasta and place in a serving bowl. Pour pesto cream over the top. Toss to combine, add diced tomatoes and toss quickly. Serve immediately.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"tag\": \"healthy\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"url\": \"http://thepioneerwoman.com/cooking/2011/06/pasta-with-pesto-cream-sauce/\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"image\": \"images/pesto1.jpg\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"cookTime\": \"PT10M\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"calories\": \"80\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"datePublished\": \"2011-06-06\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"prepTime\": \"PT6M\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"description\": \"I finally have basil in my garden. Basil I can use. This is a huge development.     I had no basil during the winter. None. G...\"}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "{\"name\": \"Herb Roasted Pork Tenderloin with Preserves\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"ingredients\": \"2 whole Pork Tenderloins, to taste Salt And Pepper, 8 Tablespoons Herbs De Provence, 1 cup Preserves fig or Peach or Plum, 1 cup Water, 1 Tablespoon Vinegar\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"instructions\": \"Preheat oven to 350 degrees. In a small bowl, combine garlic, basil, oregano, thyme, parsley, and sage. Generously season meat with salt and pepper. Add to pan, and cook on all sides until dark golden brown. Wrap in foil, bake until meat is 150 degrees internally at the widest, thickest part of the tenderloin (about 25 minutes). When pork has come to temperature, remove and let rest, tented with foil, for at least five minutes to lock in juices.\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"tag\": \"healthy\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"url\": \"http://thepioneerwoman.com/cooking/2011/09/herb-roasted-pork-tenderloin-with-preserves/\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"image\": \"images/pork.jpeg\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"cookTime\": \"PT15M\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"calories\": \"102\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"datePublished\": \"2011-09-15\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"prepTime\": \"PT5M\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"description\": \"This was yummy. And easy. And pretty! And it took basically no time to make.     Before I share the recipe, I\u0027ll just say it:...\"}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "{\"name\": \"Chicken Florentine Pasta\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"ingredients\": \"1 pound Penne, 4 whole Boneless Skinless Chicken Breasts,  1 teaspoon Salt And Pepper, 2 Tablespoons Butter, 2 Tablespoons Olive Oil, 4 cloves Garlic Minced, 3/4 cups Dry White Wine, 3/4 cups Low sodium Broth, 1 bag Baby Spinach, 2 cups Grape Tomatoes Halved Lengthwise, 4 ounces Parmesan Cheese,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"instructions\": \"Cook pasta according to package directions in lightly salted water. Cut chicken breasts into chunks and sprinkle on salt and pepper. Heat butter and olive oil over high heat in a large skillet. Add chicken chunks in a single layer and do not stir for a minute or two in order to allow the chicken to brown on the first side. Turn the chicken and brown on the other side. Cook until done, then remove chicken from the skillet. Add garlic and quickly stir to avoid burning. After about 30 seconds, pour in wine and broth, stirring to deglaze the pan. Allow the liquid to bubble up, then continue cooking until it\u0027s reduced by at least half (most of the surface of the liquid should be bubbling at this point). Turn off the heat. Add spinach, tomatoes, chicken, and cooked pasta to the skillet. Toss to combine; the spinach will wilt as you toss everything. Add plenty of Parmesan shavings and toss to combine.\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"tag\": \"healthy\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"url\": \"http://thepioneerwoman.com/cooking/2012/04/chicken-florentine-pasta/\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"image\": \"images/florentine1.jpeg\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"cookTime\": \"PT20M\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"calories\": \"100\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"datePublished\": \"2012-04-23\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"prepTime\": \"PT10M\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"description\": \"I made this for a late lunch Saturday, and it absolutely completed me. It also absolutely completed my fourteen-year-old daug...\"}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "{\"name\": \"Easy Green Chile Enchiladas\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"ingredients\": \"1 whole Onion Diced, 2 Tablespoons Butter, 15 Ounce Green Enchilada Sauce, 2 cans Chopped Green Chilies, 12 whole Corn Tortillas, 2 cups Freshly Grated Cheddar or Cheddar jack Cheese, 100 g Guacamole, 200 g Cilantro Leaves Optional\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"instructions\": \"In a small skillet, saute onions with the butter over medium-low heat until the onions are nice and golden brown. In a small saucepan, combine green enchilada sauce with green chilies and heat until very warm. In the oven (on a baking sheet) or microwave, melt cheese all over the top of each tortilla so that it covers most of the surface area.\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"tag\": \"healthy\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"url\": \"http://thepioneerwoman.com/cooking/2012/05/easy-green-chile-enchiladas/\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"image\": \"images/enchilada1.jpeg\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"cookTime\": \"PT10M\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"calories\": \"40\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"datePublished\": \"2012-05-31\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"prepTime\": \"PT5M\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"description\": \"When I was in Albuquerque with Marlboro Man and the boys a month ago, I had a really fun book signing. Such incredibly nice a...\"}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "{\"name\": \"Krispy Easter Eggs\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"ingredients\": \"4 Tablespoons Butter, 1 package Mini Marshmallows, 6 cups Rice Krispies,  20 g Assorted Sprinkles, 20 pieces Small Chocolate Easter Eggs,  5 pieces Plastic Easter Eggs\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"instructions\": \"In a large saucepan, melt butter over low heat. Add marshmallows and stir until melted. Remove from heat, then add rice cereal and stir until well coated. Lightly spray interior of the plastic eggs with non-stick cooking spray. If mixture is too sticky, you can also spray your hands. Fill both sides of the plastic egg with rice cereal mixture, slightly over-filling one side. Press chocolate egg in the center on one side of the egg, then close the plastic egg to shape it. (It should be full enough to meet with a little resistance as you close it.) Gently release the rice cereal egg from the mold, decorate with your choice of sprinkles and set aside in egg crate until set.\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"tag\": \"healthy\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"url\": \"http://thepioneerwoman.com/cooking/2013/03/krispy-easter-eggs/\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"image\": \"images/easter.jpeg\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"cookTime\": \"PT5M\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"calories\": \"102\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"datePublished\": \"2013-03-25\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"prepTime\": \"PT20M\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"description\": \"Imagine the Easter Bunny laying an egg.     Wait. That\\u2019s not anatomically possible.     And anyway, the Easter Bunny is a b...\"}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "{\"name\": \"Patty Melts\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"ingredients\": \"1 stick Butter, 1 whole Large Onion Halved And Sliced, 1/2 pound Ground Beef, to taste Salt And Pepper, 5 dashes Worcestershire Sauce, 8 slices Swiss Cheese, 8 slices Rye Bread\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"instructions\": \"In a medium skillet, melt 2 tablespoons of butter over medium-low heat. Throw in the sliced onions and cook slowly for 20 to 25 minutes, stirring occasionally, until the onions are golden brown and soft. In a medium bowl, mix together the ground beef, salt \u0026 pepper, and Worcestershire. Form into 4 patties. Melt 2 tablespoons butter in a separate skillet over medium heat. Cook the patties on both sides until totally done in the middle. Assemble patty melts.\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"tag\": \"healthy\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"url\": \"http://thepioneerwoman.com/cooking/2012/08/patty-melts/\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"image\": \"images/party.jpeg\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"cookTime\": \"PT25M\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"calories\": \"40\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"datePublished\": \"2012-08-06\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"prepTime\": \"PT10M\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"description\": \"Who doesn\u0027t love a patty melt?     Well, besides vegetarians, people who don\u0027t like rye bread, people who don\u0027t eat onions, o...\"}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "{\"name\": \"Buttery Lemon Parsley Noodles\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"ingredients\": \"1 pound Pasta fettuccine or Linguine or Angel Hair, 4 Tablespoons Butter, 1/4 cup Finely Minced Parsley, 1 whole Lemon, to taste Salt And Pepper\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"instructions\": \"Cook the noodles according to package instructions. (If using angel hair, stop just short of the al dente stage.) Drain and set aside. Melt butter in a large skillet over medium-high heat. Throw in the cooked pasta and cook it around in the butter for a couple of minutes so that a few of the noodles get a little bit of a panfried texture to them, whatever that means. Zest the lemon. Squeeze in the juice, then add the zest of half the lemon, salt and pepper to taste, then toss around and serve.\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"tag\": \"healthy\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"url\": \"http://thepioneerwoman.com/cooking/2012/08/buttery-lemon-parsley-noodles/\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"image\": \"images/noodles1.jpg\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"cookTime\": \"PT15M\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"calories\": \"180\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"datePublished\": \"2012-08-01\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"prepTime\": \"PT5M\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"description\": \"This is just a quick, easy side dish that is clean and fresh and knocks my ballet flats off. These noodles were actually part...\"}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "{\"name\": \"Mango Margaritas\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"ingredients\": \"2 whole Limes, 2 Tablespoons Coarse Sugar, 2 jars Mango Chunks Drained, 1/2 cup Tequila, 1/2 cup Triple Sec, 1/4 cup Sugar\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"instructions\": \"Zest the limes and lay the zest on a plate. If you have the time, let the zest dry out for ten minutes or so. Pour the coarse sugar over the zest and toss it around with your fingers to combine. Lime sugar! Yum. Throw the mango chunks into a blender. Pour in the tequila, triple sec, and sugar. Squeeze in the juice of the limes, then top off the whole thing with ice. Blend it until it\u0027s totally smooth. Give it a taste, then add more of what you think it needs (alcohol, sugar, lime, etc.) To serve, cut a small wedge in one of the juiced limes and rub the lime all over the rim of the glass to moisten. Dip the rim of the glasses in the lime sugar to give it a pretty, crystally rim. Pour in the margaritas and serve immediately!\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"tag\": \"healthy\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"url\": \"http://thepioneerwoman.com/cooking/2012/08/mango-margaritas/\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"image\": \"images/mango23.jpg\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"cookTime\": \"PT\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"calories\": \"80\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"datePublished\": \"2012-08-31\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"prepTime\": \"PT10M\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"description\": \" I\u0027ve got Mango Margaritas on the brain for three very important reasons:    1. It\u0027s one of my favorite recipes in my new coo...\"}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "{\"name\": \"Tuscan Bean Soup with Shrimp\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"ingredients\": \"5 cloves Garlic Minced, 1 whole Medium Onion Diced, 3 cans Great Norther Beans Drained And Rinsed, 2 Tablespoons Olive Oil, 1 teaspoon Red Pepper Flakes, 2 teaspoons Dried Oregano, 1/4 cup Tomato Paste, 3/4 cups Dry White Wine, 1 can Whole Or Diced Tomatoes, 6 cups Low Sodium Chicken Broth, 1 bunch Kale,  Plenty Of Torn Fresh Basil, 4 Tablespoons Butter,  1/2 pound Raw Shrimp Peeled And Deveined, 1/4 cup Chopped Fresh Parsley,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"instructions\": \"Heat olive oil in a large pot over medium high heat. Add onions and garlic and stir to cook for 3 to 4 minutes. Add tomato paste and stir to cook about 2 minutes, getting lots of flavor in the bottom of the pan. Stir in red pepper flakes and dried oregano; stir and cook for another 30 seconds. Pour in wine and whisk, scraping the bottom of the pan a bit as you go. Allow this to bubble up and reduce,  cooking until the wine is reduced by half. Add canned tomatoes. Drain and rinse beans, then add to pot. Pour in chicken broth. Stir to combine and allow it to simmer for 20-25 minutes. Sprinkle in salt and pepper to taste. While the soup is simmering, cook the shrimp: melt butter in a small skillet over medium-high (or high) heat. Throw in the shrimp and chopped parsley and toss to cook until no longer opaque, about 4 minutes. Season with salt. Set aside. Rinse the kale and tear it into chunks. Stir into soup. (It\u0027ll shrink quite a bit, so don\u0027t be afraid when you first add it!) Add a bunch of torn basil and stir. Allow the soup to simmer for another 5 minutes, tasting and adding salt and pepper (or even more red pepper flakes) as needed. Transfer soup to a large serving bowl and top with the shrimp, or ladle into individual bowls and top with 3 or 4 shrimp.\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"tag\": \"healthy\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"url\": \"http://thepioneerwoman.com/cooking/2012/01/tuscan-bean-soup-with-shrimp/\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"image\": \"images/tuscan1.jpg\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"cookTime\": \"PT45M\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"calories\": \"190\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"datePublished\": \"2012-01-04\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"prepTime\": \"PT10M\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"description\": \"I\u0027m Pioneer Woman. And I\u0027m obsessed with soup.     This delicious take on the simple, classic Tuscan Bean Soup has a nice tan...\"}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "{\"name\": \"Turkey Bagel Burger\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"ingredients\": \"8 whole Everything Bagels, 4 Tablespoons Butter, 4 ounces Goat Cheese chevre Or Cream Cheese, 2 Tablespoons Pesto Basil Or Sun dried Tomato, 2 pounds Ground Turkey, 1 teaspoon Kosher Salt,  Plenty Of Black Pepper, 8 dashes Worcestershire Sauce, 4 dashes Hot Sauce , 1 whole Egg Yolk, 1 Tablespoon Canola Oil, 1 Tablespoon Butter, 4 whole Roma Tomatoes Sliced, 3 whole Avocados Sliced, 16 whole Large Basil Leaves\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"instructions\": \"Melt butter in a skillet over medium heat and grill the cut side of the bagels until golden brown and slightly crisp. Set aside. Stir together the goat cheese (or cream cheese) and the pesto until smooth. Add more pesto if you\u0027d like! Combine  turkey, salt, pepper, Worcestershire sauce, hot sauce, and egg yolk (if using) in a large bowl. Stir or  knead together with your hands, then form into patties. Heat canola oil and 1 tablespoon of butter in a skillet over medium-high heat. Cook the patties on both sides until totally done, with no sign of pink in the middle, at least 4-5 minutes per side. To serve, spread a good amount of the pesto spread on each bagel half. Place the burgers on the bottom half, then top with tomato slices and basil leaves. Lay avocado slices on the top half, using the spread to make them stay put. Sprinkle a little salt and pepper on the avocados, then place the top half on the bottom half, smush it together...and dig in!\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"tag\": \"healthy\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"url\": \"http://thepioneerwoman.com/cooking/2012/01/turkey-bagel-burger/\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"image\": \"images/burger1.jpg\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"cookTime\": \"PT15M\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"calories\": \"80\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"datePublished\": \"2012-01-11\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"prepTime\": \"PT10M\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "\"description\": \"I would like to state for the record that I don\u0027t go around making turkey burgers very often, because...let\u0027s face it. They\u0027r...\"}"
      }
    ],
    "authorContributionMap": {
      "oliviajohansen": 121
    }
  },
  {
    "path": "src/main/resources/view/ConsumptionListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"200\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            \u003cImageView fx:id\u003d\"recipeImageView\" fitHeight\u003d\"100.0\" fitWidth\u003d\"150.0\" pickOnBounds\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            \u003cLabel fx:id\u003d\"ingredients\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$ingredients\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            \u003cLabel fx:id\u003d\"calories\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$calories\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 38
    }
  },
  {
    "path": "src/main/resources/view/ConsumptionListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    \u003cJFXListView fx:id\u003d\"consumptionListView\" VBox.vgrow\u003d\"ALWAYS\" orientation\u003d\"VERTICAL\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 10
    }
  },
  {
    "path": "src/main/resources/view/IngredientListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"200\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 34
    }
  },
  {
    "path": "src/main/resources/view/IngredientListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    \u003cJFXListView fx:id\u003d\"ingredientListView\" VBox.vgrow\u003d\"ALWAYS\" orientation\u003d\"VERTICAL\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 10
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "         title\u003d\"Wishful Shrinking\" minWidth\u003d\"600\" minHeight\u003d\"500\" width\u003d\"1000\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    \u003cScene fx:id\u003d\"mainScene\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    \u003cBorderPane fx:id\u003d\"container\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        \u003cleft\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        \u003cVBox fx:id\u003d\"recipeList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        \u003c/left\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        \u003ccenter\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "      \u003cVBox VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"messageArea\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "       \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            \u003cInsets right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        \u003c/center\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 25,
      "-": 43
    }
  },
  {
    "path": "src/main/resources/view/RecipeListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"200\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "      \u003cImageView fx:id\u003d\"recipeImage\" fitHeight\u003d\"100.0\" fitWidth\u003d\"150.0\" pickOnBounds\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "      \u003cLabel fx:id\u003d\"ingredients\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$ingredients\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "      \u003cLabel fx:id\u003d\"calories\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$calories\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "      \u003cLabel fx:id\u003d\"instruction\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$instruction\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 4,
      "daongochieu2810": 2,
      "jiaqi20": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/resources/view/RecipeListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c?import com.jfoenix.controls.JFXListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "  \u003cJFXListView fx:id\u003d\"recipeListView\" VBox.vgrow\u003d\"ALWAYS\" orientation\u003d\"VERTICAL\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 5,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        final Index fifthRecipeIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertTrue(fifthRecipeIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertTrue(fifthRecipeIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertTrue(fifthRecipeIndex.equals(fifthRecipeIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertFalse(fifthRecipeIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertFalse(fifthRecipeIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertFalse(fifthRecipeIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "/*"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "//import static seedu.address.testutil.TypicalRecipes.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "//import seedu.address.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import seedu.address.logic.commands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import seedu.address.logic.commands.ListRecipesCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.ReadOnlyWishfulShrinking;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "//import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.storage.JsonWishfulShrinkingStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "//import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        JsonWishfulShrinkingStorage wishfulShrinkingStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                new JsonWishfulShrinkingStorage(temporaryFolder.resolve(\"wishfulShrinking.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(wishfulShrinkingStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        String deleteCommand \u003d DeleteRecipeCommand.COMMAND_WORD + \" 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        String listCommand \u003d ListRecipesCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        assertCommandSuccess(listCommand, ListRecipesCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // Setup LogicManager with JsonWishfulShrinkingIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        JsonWishfulShrinkingStorage wishfulShrinkingStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                new JsonWishfulShrinkingIoExceptionThrowingStub(temporaryFolder."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                resolve(\"ioExceptionWishfulShrinking.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(wishfulShrinkingStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String addRecipeCommand \u003d AddRecipeCommand.COMMAND_WORD + NAME_DESC_AMY + INGREDIENT_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder(AMY).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        expectedModel.addRecipe(expectedRecipe);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertCommandFailure(addRecipeCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void getFilteredRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredRecipeList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private static class JsonWishfulShrinkingIoExceptionThrowingStub extends JsonWishfulShrinkingStorage {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        private JsonWishfulShrinkingIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        public void saveWishfulShrinking(ReadOnlyWishfulShrinking wishfulShrinking, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 8,
      "daongochieu2810": 23,
      "jiaqi20": 5,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.ReadOnlyWishfulShrinking;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.WishfulShrinking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class AddIngredientCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void constructor_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ArrayList\u003cIngredient\u003e nullIngredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        nullIngredients.add(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddIngredientCommand(nullIngredients));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void execute_ingredientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        AddIngredientCommandTest.ModelStubAcceptingIngredientAdded modelStub \u003d new ModelStubAcceptingIngredientAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Ingredient validIngredient \u003d new IngredientBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ArrayList\u003cIngredient\u003e validIngredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        validIngredients.add(validIngredient);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        CommandResult commandResult \u003d new AddIngredientCommand(validIngredients).execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertEquals(String.format(AddIngredientCommand.MESSAGE_SUCCESS, validIngredient.toString()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertEquals(Arrays.asList(validIngredient), modelStub.ingredientsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void execute_duplicateIngredient_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Ingredient validIngredient \u003d new IngredientBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ArrayList\u003cIngredient\u003e validIngredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        validIngredients.add(validIngredient);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        AddIngredientCommand addIngredientCommand \u003d new AddIngredientCommand(validIngredients);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        AddIngredientCommandTest.ModelStub modelStub \u003d new AddIngredientCommandTest"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .ModelStubWithIngredient(validIngredient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                AddIngredientCommand.MESSAGE_DUPLICATE_RECIPE, () -\u003e addIngredientCommand.execute(modelStub));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Ingredient alice \u003d new IngredientBuilder().withValue(\"Alice\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Ingredient bob \u003d new IngredientBuilder().withValue(\"Bob\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ArrayList\u003cIngredient\u003e aliceIngredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        aliceIngredients.add(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ArrayList\u003cIngredient\u003e bobIngredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        aliceIngredients.add(bob);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        AddIngredientCommand addAliceCommand \u003d new AddIngredientCommand(aliceIngredients);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        AddIngredientCommand addBobCommand \u003d new AddIngredientCommand(bobIngredients);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        AddIngredientCommand addAliceCommandCopy \u003d new AddIngredientCommand(aliceIngredients);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // different ingredient -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public Path getWishfulShrinkingFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        public void setWishfulShrinkingFilePath(Path wishfulShrinkingFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void setWishfulShrinking(ReadOnlyWishfulShrinking newData) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public ReadOnlyWishfulShrinking getWishfulShrinking() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        public void addConsumption(Consumption target) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        public ObservableList\u003cConsumption\u003e getFilteredConsumptionList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void deleteConsumption(Consumption target) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void updateFilteredConsumptionList(Predicate\u003cConsumption\u003e predicate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void deleteIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void updateFilteredIngredientList(Predicate\u003cIngredient\u003e predicate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * A Model stub that contains a single ingredient."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private class ModelStubWithIngredient extends AddIngredientCommandTest.ModelStub {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        private final Ingredient ingredient;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        ModelStubWithIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            return this.ingredient.isSameIngredient(ingredient);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * A Model stub that always accept the ingredient being added."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private class ModelStubAcceptingIngredientAdded extends AddIngredientCommandTest.ModelStub {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        final ArrayList\u003cIngredient\u003e ingredientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            return ingredientsAdded.stream().anyMatch(ingredient::isSameIngredient);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            ingredientsAdded.add(ingredient);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public ReadOnlyWishfulShrinking getWishfulShrinking() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            return new WishfulShrinking();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 12,
      "daongochieu2810": 1,
      "oliviajohansen": 16,
      "caitlinjee": 233
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddRecipeCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalWishfulShrinking;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddRecipeCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class AddRecipeCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        model \u003d new ModelManager(getTypicalWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void execute_newRecipe_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe validRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        expectedModel.addRecipe(validRecipe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertCommandSuccess(new AddRecipeCommand(validRecipe), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                String.format(AddRecipeCommand.MESSAGE_SUCCESS, validRecipe), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void execute_duplicateRecipe_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe recipeInList \u003d model.getWishfulShrinking().getRecipeList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertCommandFailure(new AddRecipeCommand(recipeInList), model, AddRecipeCommand.MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 15,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.ReadOnlyWishfulShrinking;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.WishfulShrinking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class AddRecipeCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void constructor_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddRecipeCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void execute_recipeAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ModelStubAcceptingRecipeAdded modelStub \u003d new ModelStubAcceptingRecipeAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe validRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        CommandResult commandResult \u003d new AddRecipeCommand(validRecipe).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(String.format(AddRecipeCommand.MESSAGE_SUCCESS, validRecipe), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(Arrays.asList(validRecipe), modelStub.recipesAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void execute_duplicateRecipe_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe validRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        AddRecipeCommand addRecipeCommand \u003d new AddRecipeCommand(validRecipe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithRecipe(validRecipe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                AddRecipeCommand.MESSAGE_DUPLICATE_RECIPE, () -\u003e addRecipeCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe alice \u003d new RecipeBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe bob \u003d new RecipeBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        AddRecipeCommand addAliceCommand \u003d new AddRecipeCommand(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        AddRecipeCommand addBobCommand \u003d new AddRecipeCommand(bob);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        AddRecipeCommand addAliceCommandCopy \u003d new AddRecipeCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public Path getWishfulShrinkingFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        public void setWishfulShrinkingFilePath(Path wishfulShrinkingFilePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public void setWishfulShrinking(ReadOnlyWishfulShrinking newData) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public ReadOnlyWishfulShrinking getWishfulShrinking() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public void updateFilteredRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        public void addConsumption(Consumption target) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        public ObservableList\u003cConsumption\u003e getFilteredConsumptionList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void updateFilteredConsumptionList(Predicate\u003cConsumption\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void deleteConsumption(Consumption target) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void deleteIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public void updateFilteredIngredientList(Predicate\u003cIngredient\u003e predicate) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * A Model stub that contains a single recipe."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private class ModelStubWithRecipe extends ModelStub {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        private final Recipe recipe;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ModelStubWithRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            return this.recipe.isSameRecipe(recipe);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * A Model stub that always accept the recipe being added."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private class ModelStubAcceptingRecipeAdded extends ModelStub {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        final ArrayList\u003cRecipe\u003e recipesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            return recipesAdded.stream().anyMatch(recipe::isSameRecipe);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            recipesAdded.add(recipe);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public ReadOnlyWishfulShrinking getWishfulShrinking() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            return new WishfulShrinking();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 12,
      "daongochieu2810": 54,
      "caitlinjee": 44,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalWishfulShrinking;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.WishfulShrinking;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void execute_emptyWishfulShrinking_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void execute_nonEmptyWishfulShrinking_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        expectedModel.setWishfulShrinking(new WishfulShrinking());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                false, false, false, false, false)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                false, false, false)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                false, false, false)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                false, false, false).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                false, false, false).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // different recipe value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                true, false, false).hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // different ingredient value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                false, true, false).hashCode());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // different consumption value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                false, false, true).hashCode());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 19,
      "daongochieu2810": 3,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_IMAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.WishfulShrinking;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.consumption.ConsumptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.recipe.KeywordsContainIngredientPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final String VALID_INGREDIENT_ALICE \u003d \"apple\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String VALID_INGREDIENT_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String VALID_INGREDIENT_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final String VALID_QUANTITY_AMY \u003d \"2 cups\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final String VALID_QUANTITY_BOB \u003d \"a teaspoon\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final String VALID_QUANTITY_ALICE \u003d \"1 cup\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Integer VALID_CALORIES_AMY \u003d 10;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Integer VALID_CALORIES_BOB \u003d 10;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public static final String VALID_INSTRUCTION_AMY \u003d \"instruction\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public static final String VALID_INSTRUCTION_BOB \u003d \"instruction2\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public static final String VALID_RECIPE_IMAGE_AMY \u003d \"images/healthy1\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public static final String VALID_RECIPE_IMAGE_BOB \u003d \"images/healthy2\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String VALID_TAG_AMY \u003d \"healthy\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String VALID_TAG_BOB \u003d \"healthy\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String INGREDIENT_DESC_AMY \u003d \" \" + PREFIX_INGREDIENT + VALID_INGREDIENT_AMY"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + \" \" + PREFIX_QUANTITY + VALID_QUANTITY_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String INGREDIENT_DESC_BOB \u003d \" \" + PREFIX_INGREDIENT + VALID_INGREDIENT_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            + \" \" + PREFIX_QUANTITY + VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String CALORIES_DESC_AMY \u003d \" \" + PREFIX_CALORIES + VALID_CALORIES_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String CALORIES_DESC_BOB \u003d \" \" + PREFIX_CALORIES + VALID_CALORIES_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public static final String INSTRUCTION_DESC_AMY \u003d \" \" + PREFIX_INSTRUCTION + VALID_INSTRUCTION_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public static final String INSTRUCTION_DESC_BOB \u003d \" \" + PREFIX_INSTRUCTION + VALID_INSTRUCTION_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public static final String RECIPE_IMAGE_DESC_AMY \u003d \" \" + PREFIX_RECIPE_IMAGE + VALID_RECIPE_IMAGE_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public static final String RECIPE_IMAGE_DESC_BOB \u003d \" \" + PREFIX_RECIPE_IMAGE + VALID_RECIPE_IMAGE_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String TAG_DESC_AMY \u003d \" \" + PREFIX_TAG + VALID_TAG_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String TAG_DESC_BOB \u003d \" \" + PREFIX_TAG + VALID_TAG_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String INVALID_INGREDIENT_DESC \u003d \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            + PREFIX_INGREDIENT + \" \"; // not allowed in to blank the ingredients"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String INVALID_CALORIES_DESC \u003d \" \" + PREFIX_CALORIES + \"-1\"; // negative number"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"healthy*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final EditCommand.EditRecipeDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final EditCommand.EditRecipeDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        DESC_AMY \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .withIngredient(VALID_INGREDIENT_AMY, VALID_QUANTITY_AMY).withCalories(VALID_CALORIES_AMY)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .withTags(VALID_TAG_AMY).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        DESC_BOB \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .withIngredient(VALID_INGREDIENT_BOB, VALID_QUANTITY_BOB).withCalories(VALID_CALORIES_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .withTags(VALID_TAG_AMY).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            System.out.println(result.getFeedbackToUser());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            System.out.println(expectedCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * - the Wishful Shrinking, filtered recipe list and selected recipe in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        WishfulShrinking expectedWishfulShrinking \u003d new WishfulShrinking(actualModel.getWishfulShrinking());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        List\u003cRecipe\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredRecipeList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(expectedWishfulShrinking, actualModel.getWishfulShrinking());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredRecipeList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the recipe at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * {@code model}\u0027s recipe collection."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static void showRecipeAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe recipe \u003d model.getFilteredRecipeList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        final String[] splitName \u003d recipe.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        model.updateFilteredRecipeList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(1, model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the ingredient at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * {@code model}\u0027s fridge."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static void showIngredientAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredIngredientList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        Ingredient ingredient \u003d model.getFilteredIngredientList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        final String[] splitName \u003d ingredient.getValue().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        model.updateFilteredIngredientList(new KeywordsContainIngredientPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertEquals(1, model.getFilteredIngredientList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the consumption at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * {@code model}\u0027s consumption list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static void showConsumptionAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredConsumptionList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Consumption consumption \u003d model.getFilteredConsumptionList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        final String[] splitName \u003d consumption.getRecipe().getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        model.updateFilteredConsumptionList(new ConsumptionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertEquals(1, model.getFilteredConsumptionList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 9,
      "daongochieu2810": 25,
      "jiaqi20": 12,
      "oliviajohansen": 17,
      "caitlinjee": 29,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteConsumptionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showConsumptionAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.testutil.TypicalConsumption.getTypicalWishfulShrinking;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CONSUMPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CONSUMPTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class DeleteConsumptionCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Consumption consumptionToDelete \u003d model.getFilteredConsumptionList().get(INDEX_FIRST_CONSUMPTION"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        DeleteConsumptionCommand deleteConsumptionCommand \u003d new DeleteConsumptionCommand(INDEX_FIRST_CONSUMPTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteConsumptionCommand.MESSAGE_DELETE_CONSUMPTION_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                consumptionToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        expectedModel.deleteConsumption(consumptionToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertCommandSuccess(deleteConsumptionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredConsumptionList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        DeleteConsumptionCommand deleteConsumptionCommand \u003d new DeleteConsumptionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertCommandFailure(deleteConsumptionCommand, model, Messages.MESSAGE_INVALID_CONSUMPTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        showConsumptionAtIndex(model, INDEX_FIRST_CONSUMPTION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Consumption consumptionToDelete \u003d model.getFilteredConsumptionList().get(INDEX_FIRST_CONSUMPTION"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        DeleteConsumptionCommand deleteConsumptionCommand \u003d new DeleteConsumptionCommand(INDEX_FIRST_CONSUMPTION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteConsumptionCommand.MESSAGE_DELETE_CONSUMPTION_SUCCESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                consumptionToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        expectedModel.deleteConsumption(consumptionToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        showNoConsumption(expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertCommandSuccess(deleteConsumptionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        showConsumptionAtIndex(model, INDEX_FIRST_CONSUMPTION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CONSUMPTION;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of consumption list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWishfulShrinking().getConsumptionList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        DeleteConsumptionCommand deleteConsumptionCommand \u003d new DeleteConsumptionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertCommandFailure(deleteConsumptionCommand, model, Messages.MESSAGE_INVALID_CONSUMPTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        DeleteConsumptionCommand deleteFirstCommand \u003d new DeleteConsumptionCommand(INDEX_FIRST_CONSUMPTION);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        DeleteConsumptionCommand deleteSecondCommand \u003d new DeleteConsumptionCommand(INDEX_SECOND_CONSUMPTION);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        DeleteConsumptionCommand deleteFirstCommandCopy \u003d new DeleteConsumptionCommand(INDEX_FIRST_CONSUMPTION);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // different consumption -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private void showNoConsumption(Model model) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        model.updateFilteredConsumptionList(p -\u003e false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(model.getFilteredConsumptionList().isEmpty());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 2,
      "caitlinjee": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showIngredientAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INGREDIENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INGREDIENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalWishfulShrinking;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "public class DeleteIngredientCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        Ingredient ingredientToDelete \u003d model.getFilteredIngredientList().get(INDEX_FIRST_INGREDIENT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        DeleteIngredientCommand deleteIngredientCommand \u003d new DeleteIngredientCommand(INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteIngredientCommand.MESSAGE_DELETE_INGREDIENT_SUCCESS,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                ingredientToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        expectedModel.deleteIngredient(ingredientToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertCommandSuccess(deleteIngredientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredIngredientList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        DeleteIngredientCommand deleteIngredientCommand \u003d new DeleteIngredientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertCommandFailure(deleteIngredientCommand, model, Messages.MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        showIngredientAtIndex(model, INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        Ingredient ingredientToDelete \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                model.getFilteredIngredientList().get(INDEX_FIRST_INGREDIENT.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        DeleteIngredientCommand deleteIngredientCommand \u003d new DeleteIngredientCommand(INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteIngredientCommand.MESSAGE_DELETE_INGREDIENT_SUCCESS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                ingredientToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        expectedModel.deleteIngredient(ingredientToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        showNoIngredient(expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertCommandSuccess(deleteIngredientCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        showIngredientAtIndex(model, INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_INGREDIENT;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of fridge\u0027s ingredient list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWishfulShrinking().getIngredientList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        DeleteIngredientCommand deleteIngredientCommand \u003d new DeleteIngredientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertCommandFailure(deleteIngredientCommand, model, Messages.MESSAGE_INVALID_INGREDIENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        DeleteIngredientCommand deleteIngredientFirstCommand \u003d new DeleteIngredientCommand(INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        DeleteIngredientCommand deleteIngredientSecondCommand \u003d new DeleteIngredientCommand(INDEX_SECOND_INGREDIENT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(deleteIngredientFirstCommand.equals(deleteIngredientFirstCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        DeleteIngredientCommand deleteIngredientFirstCommandCopy \u003d new DeleteIngredientCommand(INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(deleteIngredientFirstCommand.equals(deleteIngredientFirstCommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertFalse(deleteIngredientFirstCommand.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertFalse(deleteIngredientFirstCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        // different x -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertFalse(deleteIngredientFirstCommand.equals(deleteIngredientSecondCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private void showNoIngredient(Model model) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        model.updateFilteredIngredientList(p -\u003e false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(model.getFilteredIngredientList().isEmpty());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "oliviajohansen": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalWishfulShrinking;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "public class DeleteRecipeCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe recipeToDelete \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteRecipeCommand.MESSAGE_DELETE_RECIPE_SUCCESS, recipeToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        expectedModel.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        assertCommandSuccess(deleteRecipeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        assertCommandFailure(deleteRecipeCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe recipeToDelete \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteRecipeCommand.MESSAGE_DELETE_RECIPE_SUCCESS, recipeToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        expectedModel.deleteRecipe(recipeToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        showNoRecipe(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        assertCommandSuccess(deleteRecipeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of recipe collection list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWishfulShrinking().getRecipeList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        DeleteRecipeCommand deleteRecipeCommand \u003d new DeleteRecipeCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        assertCommandFailure(deleteRecipeCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        DeleteRecipeCommand deleteFirstCommand \u003d new DeleteRecipeCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        DeleteRecipeCommand deleteSecondCommand \u003d new DeleteRecipeCommand(INDEX_SECOND_RECIPE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        DeleteRecipeCommand deleteFirstCommandCopy \u003d new DeleteRecipeCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private void showNoRecipe(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        model.updateFilteredRecipeList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertTrue(model.getFilteredRecipeList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "daongochieu2810": 22,
      "jiaqi20": 14,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EatRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalWishfulShrinking;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class EatRecipeCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        Recipe recipeToEat \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        EatRecipeCommand eatRecipeCommand \u003d new EatRecipeCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String expectedMessage \u003d String.format(EatRecipeCommand.MESSAGE_EAT_RECIPE_SUCCESS, extractString(recipeToEat));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        expectedModel.addConsumption(new Consumption(recipeToEat));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertCommandSuccess(eatRecipeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        EatRecipeCommand eatRecipeCommand \u003d new EatRecipeCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertCommandFailure(eatRecipeCommand, model, Messages.MESSAGE_INVALID_CONSUMPTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        Recipe recipeToEat \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        EatRecipeCommand eatRecipeCommand \u003d new EatRecipeCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String expectedMessage \u003d String.format(EatRecipeCommand.MESSAGE_EAT_RECIPE_SUCCESS, extractString(recipeToEat));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        expectedModel.addConsumption(new Consumption(recipeToEat));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        showNoRecipe(expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertCommandSuccess(eatRecipeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of recipe collection list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWishfulShrinking().getRecipeList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        EatRecipeCommand eatRecipeCommand \u003d new EatRecipeCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertCommandFailure(eatRecipeCommand, model, Messages.MESSAGE_INVALID_CONSUMPTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        EatRecipeCommand eatFirstCommand \u003d new EatRecipeCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        EatRecipeCommand eatSecondCommand \u003d new EatRecipeCommand(INDEX_SECOND_RECIPE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertTrue(eatFirstCommand.equals(eatFirstCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        EatRecipeCommand eatFirstCommandCopy \u003d new EatRecipeCommand(INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertTrue(eatFirstCommand.equals(eatFirstCommandCopy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertFalse(eatFirstCommand.equals(1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertFalse(eatFirstCommand.equals(null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // different consumption -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertFalse(eatFirstCommand.equals(eatSecondCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private void showNoRecipe(Model model) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        model.updateFilteredRecipeList(p -\u003e false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertTrue(model.getFilteredRecipeList().isEmpty());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Extract the importat information from the Recipe"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private String extractString(Recipe recipe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        builder.append(recipe.getName())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                .append(\" Calories: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                .append(recipe.getCalories() + \" cal\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalWishfulShrinking;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.WishfulShrinking;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe editedRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder(editedRecipe).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECIPE, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WishfulShrinking(model.getWishfulShrinking()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        expectedModel.setRecipe(model.getFilteredRecipeList().get(0), editedRecipe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Index indexLastRecipe \u003d Index.fromOneBased(model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe lastRecipe \u003d model.getFilteredRecipeList().get(indexLastRecipe.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        RecipeBuilder recipeInList \u003d new RecipeBuilder(lastRecipe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Recipe editedRecipe \u003d recipeInList.withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .withIngredient(VALID_INGREDIENT_BOB, VALID_QUANTITY_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "              .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .withIngredient(VALID_INGREDIENT_BOB, VALID_QUANTITY_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastRecipe, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WishfulShrinking(model.getWishfulShrinking()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        expectedModel.setRecipe(lastRecipe, editedRecipe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECIPE, new EditRecipeDescriptor());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe editedRecipe \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WishfulShrinking(model.getWishfulShrinking()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe recipeInFilteredList \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe editedRecipe \u003d new RecipeBuilder(recipeInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECIPE,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                new EditRecipeDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RECIPE_SUCCESS, editedRecipe);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new WishfulShrinking(model.getWishfulShrinking()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        expectedModel.setRecipe(model.getFilteredRecipeList().get(0), editedRecipe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void execute_duplicateRecipeUnfilteredList_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe firstRecipe \u003d model.getFilteredRecipeList().get(INDEX_FIRST_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder(firstRecipe).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_RECIPE, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void execute_duplicateRecipeFilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // edit recipe in filtered list into a duplicate in recipe collection"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe recipeInList \u003d model.getWishfulShrinking().getRecipeList().get(INDEX_SECOND_RECIPE.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RECIPE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                new EditRecipeDescriptorBuilder(recipeInList).build());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void execute_invalidRecipeIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * but smaller than size of recipe collection"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void execute_invalidRecipeIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of recipe collection list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getWishfulShrinking().getRecipeList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                new EditRecipeDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_RECIPE, DESC_AMY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditRecipeDescriptor copyDescriptor \u003d new EditRecipeDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_RECIPE, copyDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_RECIPE, DESC_AMY)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_RECIPE, DESC_BOB)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 3,
      "daongochieu2810": 63,
      "caitlinjee": 5,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditRecipeDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class EditRecipeDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditRecipeDescriptor descriptorWithSameValues \u003d new EditRecipeDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditRecipeDescriptor editedAmy \u003d new EditRecipeDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // different ingredients -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        editedAmy \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                new EditRecipeDescriptorBuilder(DESC_AMY).withIngredient(VALID_INGREDIENT_BOB, VALID_QUANTITY_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        editedAmy \u003d new EditRecipeDescriptorBuilder(DESC_AMY).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        //        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 10,
      "oliviajohansen": 4,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "daongochieu2810": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                false, false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "daongochieu2810": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListConsumptionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showConsumptionAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.testutil.TypicalConsumption.getTypicalWishfulShrinking;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CONSUMPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class ListConsumptionCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        model \u003d new ModelManager(getTypicalWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        ObservableList\u003cConsumption\u003e consump \u003d model.getFilteredConsumptionList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        int totalCalories \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        for (int i \u003d 0; i \u003c consump.size(); i++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            builder.append((i + 1) + \". \" + consump.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            totalCalories +\u003d consump.get(i).getRecipe().getCalories().value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        builder.append(\"Total Calories: \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        builder.append(totalCalories + \" cal\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertCommandSuccess(new ListConsumptionCommand(), model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                ListConsumptionCommand.MESSAGE_SUCCESS + builder.toString(), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        showConsumptionAtIndex(model, INDEX_FIRST_CONSUMPTION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        ObservableList\u003cConsumption\u003e consump \u003d expectedModel.getFilteredConsumptionList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        int totalCalories \u003d 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        for (int i \u003d 0; i \u003c consump.size(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            builder.append((i + 1) + \". \" + consump.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            totalCalories +\u003d consump.get(i).getRecipe().getCalories().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        builder.append(\"Total Calories: \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        builder.append(totalCalories + \" cal\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertCommandSuccess(new ListConsumptionCommand(), model,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                ListConsumptionCommand.MESSAGE_SUCCESS + builder.toString(), expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListIngredientsCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showIngredientAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INGREDIENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalWishfulShrinking;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListIngredientCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "public class ListIngredientsCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        model \u003d new ModelManager(getTypicalWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ObservableList\u003cIngredient\u003e ingredients \u003d model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredients.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            builder.append((i + 1) + \". \" + ingredients.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertCommandSuccess(new ListIngredientsCommand(), model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                ListIngredientsCommand.MESSAGE_SUCCESS + builder.toString(), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        showIngredientAtIndex(model, INDEX_FIRST_INGREDIENT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ObservableList\u003cIngredient\u003e ingredients \u003d expectedModel.getFilteredIngredientList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredients.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            builder.append((i + 1) + \". \" + ingredients.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertCommandSuccess(new ListIngredientsCommand(), model,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                ListIngredientsCommand.MESSAGE_SUCCESS + builder.toString(), expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oliviajohansen": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListRecipesCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalWishfulShrinking;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "public class ListRecipesCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        model \u003d new ModelManager(getTypicalWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        ObservableList\u003cRecipe\u003e recipes \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            builder.append((i + 1) + \". \" + recipes.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        assertCommandSuccess(new ListRecipesCommand(), model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                ListRecipesCommand.MESSAGE_SUCCESS + builder.toString(), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        showRecipeAtIndex(model, INDEX_FIRST_RECIPE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        ObservableList\u003cRecipe\u003e recipes \u003d expectedModel.getFilteredRecipeList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "            builder.append((i + 1) + \". \" + recipes.get(i).toString() + \"\\n\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        assertCommandSuccess(new ListRecipesCommand(), model,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                ListRecipesCommand.MESSAGE_SUCCESS + builder.toString(), expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 6,
      "jiaqi20": 17,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SearchIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INGREDIENT_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalWishfulShrinking;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.IngredientContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class SearchIngredientCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        IngredientContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                new IngredientContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        IngredientContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                new IngredientContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        SearchIngredientCommand findFirstCommand \u003d new SearchIngredientCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        SearchIngredientCommand findSecondCommand \u003d new SearchIngredientCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        SearchIngredientCommand findFirstCommandCopy \u003d new SearchIngredientCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // different ingredient -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void execute_zeroKeywords_noIngredientFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INGREDIENT_LISTED_OVERVIEW, 0) + \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        IngredientContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        SearchIngredientCommand command \u003d new SearchIngredientCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        expectedModel.updateFilteredIngredientList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredIngredientList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void execute_multipleKeywords_multipleIngredientsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INGREDIENT_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        expectedMessage +\u003d \"\\n\" + \"1. Carl Kurz\\n\" + \"2. Elle Meyer\\n\" + \"3. Fiona Kunz\" + \"\\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        IngredientContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        SearchIngredientCommand command \u003d new SearchIngredientCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        expectedModel.updateFilteredIngredientList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredIngredientList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Parses {@code userInput} into a {@code IngredientContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private IngredientContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return new IngredientContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caitlinjee": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SearchRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_RECIPES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalWishfulShrinking;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class SearchRecipeCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalWishfulShrinking(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        SearchRecipeCommand findFirstCommand \u003d new SearchRecipeCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        SearchRecipeCommand findSecondCommand \u003d new SearchRecipeCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        SearchRecipeCommand findFirstCommandCopy \u003d new SearchRecipeCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void execute_zeroKeywords_noRecipeFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RECIPES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        SearchRecipeCommand command \u003d new SearchRecipeCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        expectedModel.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void execute_multipleKeywords_multipleRecipesFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_RECIPES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        SearchRecipeCommand command \u003d new SearchRecipeCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        expectedModel.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 6,
      "daongochieu2810": 17,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddIngredientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.AddIngredientCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "//import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class AddIngredientCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private AddIngredientCommandParser parser \u003d new AddIngredientCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Ingredient expectedIngredient \u003d new IngredientBuilder(BOB).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        ArrayList\u003cIngredient\u003e arr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        arr.add(expectedIngredient);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        /*assertParseSuccess(parser, PREAMBLE_WHITESPACE + INGREDIENT_DESC_BOB,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                new AddIngredientCommand(arr));*/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIngredientCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + INGREDIENT_DESC_BOB,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_INGREDIENT_BOB,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                AddIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        + INGREDIENT_DESC_BOB,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 5,
      "caitlinjee": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddRecipeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CALORIES_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INSTRUCTION_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INSTRUCTION_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CALORIES_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INGREDIENT_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RECIPE_IMAGE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RECIPE_IMAGE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INSTRUCTION_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RECIPE_IMAGE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.commons.Calories;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class AddRecipeCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private AddRecipeCommandParser parser \u003d new AddRecipeCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder(BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + INGREDIENT_DESC_BOB"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + CALORIES_DESC_BOB + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + TAG_DESC_BOB, new AddRecipeCommand(expectedRecipe));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + INGREDIENT_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + CALORIES_DESC_BOB + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + TAG_DESC_BOB, new AddRecipeCommand(expectedRecipe));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // multiple ingredients - last ingredients accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + INGREDIENT_DESC_AMY + INGREDIENT_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + CALORIES_DESC_BOB + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + TAG_DESC_BOB, new AddRecipeCommand(expectedRecipe));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe expectedRecipeMultipleTags \u003d new RecipeBuilder(BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + INGREDIENT_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + CALORIES_DESC_BOB + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + TAG_DESC_BOB + TAG_DESC_BOB, new AddRecipeCommand(expectedRecipeMultipleTags));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder(AMY).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + INGREDIENT_DESC_AMY"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        + CALORIES_DESC_AMY + INSTRUCTION_DESC_AMY + RECIPE_IMAGE_DESC_AMY,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                new AddRecipeCommand(expectedRecipe));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRecipeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + INGREDIENT_DESC_BOB + CALORIES_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // missing ingredients prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_INGREDIENT_BOB + CALORIES_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // missing calories prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INGREDIENT_DESC_BOB + VALID_CALORIES_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // missing instruction prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INGREDIENT_DESC_BOB + VALID_CALORIES_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + VALID_INSTRUCTION_BOB + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // missing image prefix"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INGREDIENT_DESC_BOB + VALID_CALORIES_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        + VALID_INSTRUCTION_BOB + INSTRUCTION_DESC_BOB + VALID_RECIPE_IMAGE_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // missing tag prefix"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INGREDIENT_DESC_BOB + VALID_CALORIES_BOB"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        + VALID_INSTRUCTION_BOB + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB + VALID_TAG_BOB,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // missing calories prefix"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INGREDIENT_DESC_BOB + VALID_CALORIES_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_INGREDIENT_BOB + VALID_CALORIES_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        + VALID_INSTRUCTION_BOB + VALID_RECIPE_IMAGE_BOB,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INGREDIENT_DESC_BOB + CALORIES_DESC_BOB"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + TAG_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // invalid ingredients"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_INGREDIENT_DESC + CALORIES_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + TAG_DESC_BOB, ParserUtil.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // invalid calories"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INGREDIENT_DESC_BOB + INVALID_CALORIES_DESC"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB + TAG_DESC_BOB, Calories.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INGREDIENT_DESC_BOB + CALORIES_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_BOB, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INGREDIENT_DESC_BOB + CALORIES_DESC_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + CALORIES_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                        + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        + INGREDIENT_DESC_BOB + TAG_DESC_BOB,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 15,
      "daongochieu2810": 21,
      "jiaqi20": 5,
      "caitlinjee": 64,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteConsumptionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CONSUMPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.DeleteConsumptionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class DeleteConsumptionCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private DeleteConsumptionCommandParser parser \u003d new DeleteConsumptionCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteConsumptionCommand(INDEX_FIRST_CONSUMPTION));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteConsumptionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseFailure(parser, \"a\", expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caitlinjee": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteIngredientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INGREDIENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.logic.commands.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "public class DeleteIngredientCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private DeleteIngredientCommandParser parser \u003d new DeleteIngredientCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteIngredientCommand(INDEX_FIRST_INGREDIENT));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                DeleteIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oliviajohansen": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteRecipeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import seedu.address.logic.commands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "public class DeleteRecipeCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    private DeleteRecipeCommandParser parser \u003d new DeleteRecipeCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteRecipeCommand(INDEX_FIRST_RECIPE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteRecipeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        assertParseFailure(parser, \"a\", expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 1,
      "jiaqi20": 6,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EatRecipeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.logic.commands.EatRecipeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class EatRecipeCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private EatRecipeCommandParser parser \u003d new EatRecipeCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertParseSuccess(parser, \"1\", new EatRecipeCommand(INDEX_FIRST_RECIPE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, EatRecipeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertParseFailure(parser, \"a\", expectedMessage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INGREDIENT_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_INGREDIENT_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseFailure(parser, \"1 prefix/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_INGREDIENT_DESC,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        IngredientString.MESSAGE_CONSTRAINTS); // invalid ingredients"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        //IngredientString.MESSAGE_CONSTRAINTS); // invalid ingredients"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 28ef26c6db44f8717ea885749a69ad068c33a886"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "         Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // valid ingredients followed by invalid ingredients."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        //The test case for invalid ingredients followed by valid ingredients"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertParseFailure(parser, \"1\" + INGREDIENT_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        + INVALID_INGREDIENT_DESC, IngredientString.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // of the {@code Recipe} being edited,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_INGREDIENT_AMY,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        + INVALID_INGREDIENT_DESC + VALID_INGREDIENT_AMY,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 28ef26c6db44f8717ea885749a69ad068c33a886"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_RECIPE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INGREDIENT_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INGREDIENT_DESC_BOB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + CALORIES_DESC_BOB + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + TAG_DESC_BOB;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 28ef26c6db44f8717ea885749a69ad068c33a886"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                .withIngredient(VALID_INGREDIENT_BOB).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INGREDIENT_DESC_BOB"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + CALORIES_DESC_BOB + INSTRUCTION_DESC_BOB + RECIPE_IMAGE_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                + TAG_DESC_BOB;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 28ef26c6db44f8717ea885749a69ad068c33a886"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withIngredient(VALID_INGREDIENT_BOB)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // ingredients"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INGREDIENT_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withIngredient(VALID_INGREDIENT_AMY, VALID_QUANTITY_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_BOB;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INGREDIENT_DESC_AMY"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                + TAG_DESC_FRIEND + INGREDIENT_DESC_AMY+ TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                + INGREDIENT_DESC_BOB+ TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().withIngredient(VALID_INGREDIENT_BOB)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_INGREDIENT_DESC"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                + INGREDIENT_DESC_BOB;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                .withIngredient(VALID_INGREDIENT_BOB, VALID_QUANTITY_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_INGREDIENT_DESC"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                + INGREDIENT_DESC_BOB;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptorBuilder().withIngredient(VALID_INGREDIENT_BOB, VALID_QUANTITY_BOB).build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_RECIPE;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder().build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 19,
      "daongochieu2810": 61,
      "oliviajohansen": 5,
      "caitlinjee": 10,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/IngredientParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.VALID_INGREDIENT1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.VALID_INGREDIENT2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "public class IngredientParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private static final String VALID_INGREDIENT_STRING \u003d \"apple -2 slices, banana -200g\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private static final String VALID_INGREDIENT_STRING_WITHOUTQUANTITY \u003d \"food -2g\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public void parser_validInputWithQuantity_success() throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ArrayList\u003cIngredient\u003e expectedIngredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        expectedIngredients.add(VALID_INGREDIENT1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        expectedIngredients.add(VALID_INGREDIENT2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertEquals(expectedIngredients, IngredientParser.parse(VALID_INGREDIENT_STRING));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public void parser_validInputWithoutQuantity_success() throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ArrayList\u003cIngredient\u003e expectedIngredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        expectedIngredients.add(new IngredientBuilder().build());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertEquals(expectedIngredients, IngredientParser.parse(VALID_INGREDIENT_STRING_WITHOUTQUANTITY));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oliviajohansen": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "//import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private static final String INVALID_INGREDIENT \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(INDEX_FIRST_RECIPE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(INDEX_FIRST_RECIPE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void parseIngredient_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseIngredient((String) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void parseIngredient_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIngredient(INVALID_INGREDIENT));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void parseIngredient_validValueWithoutWhitespace_returnsIngredient() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Ingredient expectedIngredient \u003d new Ingredient(VALID_INGREDIENT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(expectedIngredient, ParserUtil.parseIngredient(VALID_INGREDIENT));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void parseIngredient_validValueWithWhitespace_returnsTrimmedIngredient() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String ingredientsWithWhitespace \u003d WHITESPACE + VALID_INGREDIENT + WHITESPACE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Ingredient expectedIngredient \u003d new Ingredient(VALID_INGREDIENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(expectedIngredient, ParserUtil.parseIngredient(ingredientsWithWhitespace));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 2,
      "daongochieu2810": 20,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SearchIngredientCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.SearchIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.IngredientContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class SearchIngredientCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private SearchIngredientCommandParser parser \u003d new SearchIngredientCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        SearchIngredientCommand expectedSearchIngredientCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                new SearchIngredientCommand(new IngredientContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseSuccess(parser, \" \" + \"Alice Bob\", expectedSearchIngredientCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertParseSuccess(parser, \" \" + \" \\n Alice \\n \\t Bob  \\t\", expectedSearchIngredientCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caitlinjee": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SearchRecipeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.logic.commands.SearchRecipeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class SearchRecipeCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private SearchRecipeCommandParser parser \u003d new SearchRecipeCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchRecipeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        SearchRecipeCommand expectedSearchRecipeCommand \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                new SearchRecipeCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"Alice Bob\", expectedSearchRecipeCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \" \\n Alice \\n \\t Bob  \\t\", expectedSearchRecipeCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 10,
      "daongochieu2810": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/WishfulShrinkingParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CONSUMPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INGREDIENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RECIPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.AddIngredientCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.DeleteConsumptionCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.logic.commands.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import seedu.address.logic.commands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.logic.commands.EatRecipeCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.logic.commands.ListConsumptionCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import seedu.address.logic.commands.ListIngredientsCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import seedu.address.logic.commands.ListRecipesCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.SearchIngredientCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.logic.commands.SearchRecipeCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.IngredientContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.testutil.IngredientUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/*import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.testutil.EditRecipeDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.testutil.RecipeUtil;*/"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class WishfulShrinkingParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private final WishfulShrinkingParser parser \u003d new WishfulShrinkingParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe recipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        AddRecipeCommand command \u003d (AddRecipeCommand) parser.parseCommand(RecipeUtil.getAddRecipeCommand(recipe));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(new AddRecipeCommand(recipe), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void parseCommand_addIngredient() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Ingredient ingredient \u003d new IngredientBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        ingredients.add(ingredient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        AddIngredientCommand command \u003d (AddIngredientCommand) parser.parseCommand(IngredientUtil"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                .getAddIngredientCommand(ingredient));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertEquals(new AddIngredientCommand(ingredients), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public void parseCommand_deleteIngredient() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        DeleteIngredientCommand command \u003d (DeleteIngredientCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                DeleteIngredientCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INGREDIENT.getOneBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertEquals(new DeleteIngredientCommand(INDEX_FIRST_INGREDIENT), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        DeleteRecipeCommand command \u003d (DeleteRecipeCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                DeleteRecipeCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RECIPE.getOneBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        assertEquals(new DeleteRecipeCommand(INDEX_FIRST_RECIPE), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe recipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        EditRecipeDescriptor descriptor \u003d new EditRecipeDescriptorBuilder(recipe).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                + INDEX_FIRST_RECIPE.getOneBased() + \" \" + RecipeUtil.getEditRecipeDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_RECIPE, descriptor), command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void parseCommand_searchRecipe() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        SearchRecipeCommand command \u003d (SearchRecipeCommand) parser.parseCommand("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                SearchRecipeCommand.COMMAND_WORD + \" \" + PREFIX_NAME"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertEquals(new SearchRecipeCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void parseCommand_searchIngredient() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        SearchIngredientCommand command \u003d (SearchIngredientCommand) parser.parseCommand("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                SearchIngredientCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertEquals(new SearchIngredientCommand(new IngredientContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        assertTrue(parser.parseCommand(ListRecipesCommand.COMMAND_WORD) instanceof ListRecipesCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        assertTrue(parser.parseCommand(ListRecipesCommand.COMMAND_WORD + \" 3\") instanceof ListRecipesCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public void parseCommand_listIngredient() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(parser.parseCommand(ListIngredientsCommand.COMMAND_WORD) instanceof ListIngredientsCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(parser.parseCommand(ListIngredientsCommand.COMMAND_WORD + \" 3\") instanceof ListIngredientsCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void parseCommand_listConsumption() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertTrue(parser.parseCommand(ListConsumptionCommand.COMMAND_WORD) instanceof ListConsumptionCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertTrue(parser.parseCommand(ListConsumptionCommand.COMMAND_WORD + \" 3\") instanceof ListConsumptionCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void parseCommand_eatRecipe() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        EatRecipeCommand command \u003d (EatRecipeCommand) parser.parseCommand("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                EatRecipeCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CONSUMPTION.getOneBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertEquals(new EatRecipeCommand(INDEX_FIRST_CONSUMPTION), command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void parseCommand_deleteConsumption() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        DeleteConsumptionCommand command \u003d (DeleteConsumptionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                DeleteConsumptionCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CONSUMPTION.getOneBased());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertEquals(new DeleteConsumptionCommand(INDEX_FIRST_CONSUMPTION), command);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 22,
      "jiaqi20": 7,
      "daongochieu2810": 18,
      "oliviajohansen": 21,
      "caitlinjee": 29,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.testutil.WishfulShrinkingBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(new WishfulShrinking(), new WishfulShrinking(modelManager.getWishfulShrinking()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        userPrefs.setWishfulShrinkingFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        userPrefs.setWishfulShrinkingFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setWishfulShrinkingFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setWishfulShrinkingFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setWishfulShrinkingFilePath_validPath_setsWishfulShrinkingFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        modelManager.setWishfulShrinkingFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(path, modelManager.getWishfulShrinkingFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasRecipe(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void hasRecipe_recipeNotInWishfulShrinking_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertFalse(modelManager.hasRecipe(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void hasRecipe_recipeInWishfulShrinking_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        modelManager.addRecipe(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertTrue(modelManager.hasRecipe(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void getFilteredRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredRecipeList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        WishfulShrinking wishfulShrinking \u003d new WishfulShrinkingBuilder().withRecipe(ALICE).withRecipe(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        WishfulShrinking differentWishfulShrinking \u003d new WishfulShrinking();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        modelManager \u003d new ModelManager(wishfulShrinking, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(wishfulShrinking, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // different wishfulShrinking -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentWishfulShrinking, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        modelManager.updateFilteredRecipeList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(wishfulShrinking, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        modelManager.updateFilteredRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        differentUserPrefs.setWishfulShrinkingFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(wishfulShrinking, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 6,
      "daongochieu2810": 27,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setWishfulShrinkingFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setWishfulShrinkingFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/WishfulShrinkingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalWishfulShrinking;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class WishfulShrinkingTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final WishfulShrinking wishfulShrinking \u003d new WishfulShrinking();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertEquals(Collections.emptyList(), wishfulShrinking.getRecipeList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wishfulShrinking.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void resetData_withValidReadOnlyWishfulShrinking_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        WishfulShrinking newData \u003d getTypicalWishfulShrinking();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        wishfulShrinking.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertEquals(newData, wishfulShrinking);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void resetData_withDuplicateRecipes_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // Two recipes with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(ALICE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        List\u003cRecipe\u003e newRecipes \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        WishfulShrinkingStub newData \u003d new WishfulShrinkingStub(newRecipes);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e wishfulShrinking.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wishfulShrinking.hasRecipe(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void hasRecipe_recipeNotInWishfulShrinking_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertFalse(wishfulShrinking.hasRecipe(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void hasRecipe_recipeInWishfulShrinking_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        wishfulShrinking.addRecipe(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertTrue(wishfulShrinking.hasRecipe(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void hasRecipe_recipeWithSameIdentityFieldsInWishfulShrinking_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        wishfulShrinking.addRecipe(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(ALICE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertTrue(wishfulShrinking.hasRecipe(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void getRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e wishfulShrinking.getRecipeList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * A stub ReadOnlyWishfulShrinking whose recipes list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private static class WishfulShrinkingStub implements ReadOnlyWishfulShrinking {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        private final ObservableList\u003cRecipe\u003e recipes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        private final ObservableList\u003cIngredient\u003e ingredients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        private final ObservableList\u003cConsumption\u003e consumption \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        WishfulShrinkingStub(Collection\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            this.recipes.setAll(recipes);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            return recipes;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        public ObservableList\u003cIngredient\u003e getIngredientList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            return ingredients;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        public ObservableList\u003cConsumption\u003e getConsumptionList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            return consumption;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 20,
      "daongochieu2810": 79,
      "caitlinjee": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/model/commons/CaloriesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class CaloriesTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Calories(null));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/consumption/ConsumptionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.model.consumption;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class ConsumptionListTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final ConsumptionList consumptionList \u003d new ConsumptionList();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void eat_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e consumptionList.eat(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            -\u003e consumptionList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/consumption/ConsumptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.model.consumption;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.testutil.ConsumptionBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class ConsumptionTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private final Consumption alice \u003d new Consumption(ALICE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        Consumption aliceCopy \u003d new ConsumptionBuilder(alice).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertTrue(alice.equals(aliceCopy));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertTrue(alice.equals(new Consumption(ALICE)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertFalse(alice.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertFalse(alice.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertFalse(alice.equals(BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        Consumption editedAlice \u003d new Consumption(new RecipeBuilder(ALICE).withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertFalse(alice.equals(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // different ingredients -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                new Consumption(new RecipeBuilder(ALICE).withIngredient(VALID_INGREDIENT_BOB, VALID_QUANTITY_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                        .build());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertFalse(alice.equals(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 45,
      "oliviajohansen": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/IngredientContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class IngredientContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        IngredientContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                new IngredientContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        IngredientContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                new IngredientContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        IngredientContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                new IngredientContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // different ingredient -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void test_ingredientContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        IngredientContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                new IngredientContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withValue(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        predicate \u003d new IngredientContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withValue(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        predicate \u003d new IngredientContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withValue(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        predicate \u003d new IngredientContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withValue(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void test_ingredientDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        IngredientContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                new IngredientContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withValue(\"Alice\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        predicate \u003d new IngredientContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withValue(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // Keywords match ingredients, email and address, but does not match name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        predicate \u003d new IngredientContainsKeywordsPredicate("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withValue(\"Alice\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "caitlinjee": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/IngredientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class IngredientTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Ingredient(null, \"\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void constructor_invalidIngredient_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String invalidIngredient \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Ingredient(invalidIngredient));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void isValidIngredient() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        // invalid ingredient names"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertFalse(ParserUtil.isValidIngredient(new Ingredient(\"\", \"2 cups\"))); // empty name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertFalse(ParserUtil.isValidIngredient(new Ingredient(\"fishc@ke\", \"2 cups\"))); // empty name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertFalse(ParserUtil.isValidIngredient(new Ingredient(\"fishcake!\", \"2 cups\"))); // empty name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        // valid ingredient names"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(ParserUtil.isValidIngredient(new Ingredient(\"white cabbage\", \"2 cups\"))); // space within name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(ParserUtil.isValidIngredient(new Ingredient(\"pea\", \"2 cups\")));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(ParserUtil.isValidIngredient(new Ingredient(\"93121534\", \"2 cups\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(ParserUtil.isValidIngredient(new Ingredient(\"loooooooooooongbean\", \"2 cups\"))); // long"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        // valid ingredient quantities"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(ParserUtil.isValidIngredient(new Ingredient(\"cabbage\", \"2 cups\"))); // space within quantity"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(ParserUtil.isValidIngredient(new Ingredient(\"cabbage\", \"2cups\"))); // no space within quantity"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(ParserUtil.isValidIngredient(new Ingredient(\"cabbage\", \"pinch\"))); // no numbers in quantity"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(ParserUtil.isValidIngredient(new Ingredient(\"cabbage\", \"\"))); // no quantity"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        // invalid ingredient quantities"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertFalse(ParserUtil.isValidIngredient(new Ingredient(\"fishcake\", \"2 c@ps\"))); // empty name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertFalse(ParserUtil.isValidIngredient(new Ingredient(\"fishcake\", \"2 cups!\"))); // empty name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 26,
      "oliviajohansen": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // Keywords match ingredients, email and address, but does not match name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Alice\").withIngredient(\"12345\", \"2g\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "              .build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 11,
      "oliviajohansen": 1,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class RecipeTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void isSameRecipe() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertTrue(ALICE.isSameRecipe(ALICE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertFalse(ALICE.isSameRecipe(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // different ingredients -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        Recipe editedAlice \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                new RecipeBuilder(ALICE).withIngredient(VALID_INGREDIENT_BOB, VALID_QUANTITY_ALICE).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertFalse(ALICE.isSameRecipe(editedAlice));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        // same ingredients and quantity -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                new RecipeBuilder(ALICE).withIngredient(VALID_INGREDIENT_ALICE, VALID_QUANTITY_ALICE).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(ALICE.isSameRecipe(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        // different ingredients and quantity -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        editedAlice \u003d new RecipeBuilder(ALICE).withIngredient(VALID_INGREDIENT_BOB, VALID_QUANTITY_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertFalse(ALICE.isSameRecipe(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        editedAlice \u003d new RecipeBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertFalse(ALICE.isSameRecipe(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        // same name -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        editedAlice \u003d new RecipeBuilder(ALICE).withName(\"ALICE\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertFalse(ALICE.isSameRecipe(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // same name, same ingredients, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        editedAlice \u003d new RecipeBuilder(ALICE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "               .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(ALICE.isSameRecipe(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        // same name, same ingredients, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        editedAlice \u003d new RecipeBuilder(ALICE).withIngredient(VALID_INGREDIENT_BOB, VALID_QUANTITY_ALICE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // assertTrue(ALICE.isSameRecipe(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        // same name, same ingredients, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        editedAlice \u003d new RecipeBuilder(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(ALICE.isSameRecipe(editedAlice));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe aliceCopy \u003d new RecipeBuilder(ALICE).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // different ingredients -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        editedAlice \u003d new RecipeBuilder(ALICE).withIngredient(VALID_INGREDIENT_BOB, VALID_QUANTITY_ALICE).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                new RecipeBuilder(ALICE).withIngredient(VALID_INGREDIENT_ALICE, VALID_QUANTITY_BOB).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        // same ingredient and quantity -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "                new RecipeBuilder(ALICE).withIngredient(VALID_INGREDIENT_ALICE, VALID_QUANTITY_ALICE).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        assertTrue(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 2,
      "daongochieu2810": 22,
      "oliviajohansen": 27,
      "caitlinjee": 5,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/UniqueRecipeListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class UniqueRecipeListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private final UniqueRecipeList uniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void contains_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void contains_recipeNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertFalse(uniqueRecipeList.contains(ALICE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void contains_recipeInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.add(ALICE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertTrue(uniqueRecipeList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void contains_recipeWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(ALICE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertTrue(uniqueRecipeList.contains(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void add_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void add_duplicateRecipe_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.add(ALICE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.add(ALICE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipe_nullTargetRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipe(null, ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipe_nullEditedRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipe(ALICE, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipe_targetRecipeNotInList_throwsRecipeNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(RecipeNotFoundException.class, () -\u003e uniqueRecipeList.setRecipe(ALICE, ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipe_editedRecipeIsSameRecipe_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.add(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.setRecipe(ALICE, ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        expectedUniqueRecipeList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipe_editedRecipeHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.add(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Recipe editedAlice \u003d new RecipeBuilder(ALICE)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.setRecipe(ALICE, editedAlice);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        expectedUniqueRecipeList.add(editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipe_editedRecipeHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.add(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.setRecipe(ALICE, BOB);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        expectedUniqueRecipeList.add(BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipe_editedRecipeHasNonUniqueIdentity_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.add(ALICE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.add(BOB);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.setRecipe(ALICE, BOB));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void remove_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.remove(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void remove_recipeDoesNotExist_throwsRecipeNotFoundException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(RecipeNotFoundException.class, () -\u003e uniqueRecipeList.remove(ALICE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void remove_existingRecipe_removesRecipe() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.add(ALICE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.remove(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipes_nullUniqueRecipeList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipes((UniqueRecipeList) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipes_uniqueRecipeList_replacesOwnListWithProvidedUniqueRecipeList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.add(ALICE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        expectedUniqueRecipeList.add(BOB);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.setRecipes(expectedUniqueRecipeList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipes_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipes((List\u003cRecipe\u003e) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipes_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.add(ALICE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        List\u003cRecipe\u003e recipeList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        uniqueRecipeList.setRecipes(recipeList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        expectedUniqueRecipeList.add(BOB);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void setRecipes_listWithDuplicateRecipes_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        List\u003cRecipe\u003e listWithDuplicateRecipes \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.setRecipes(listWithDuplicateRecipes));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            -\u003e uniqueRecipeList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 166,
      "caitlinjee": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedConsumptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.storage.JsonAdaptedConsumption.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.commons.Calories;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class JsonAdaptedConsumptionTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final ArrayList\u003cIngredient\u003e INVALID_INGREDIENT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            new ArrayList\u003c\u003e(Arrays.asList(new Ingredient[]{new Ingredient(\"@olive oil\", \"\")}));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final Integer INVALID_CALORIES \u003d -1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final ArrayList\u003cIngredient\u003e VALID_INGREDIENT \u003d BENSON.getIngredient();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final int VALID_CALORIES \u003d BENSON.getCalories().value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    private static final String VALID_INSTRUCTION \u003d BENSON.getInstruction();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    private static final String VALID_RECIPE_IMAGE \u003d BENSON.getRecipeImage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void toModelType_validConsumptionDetails_returnsRecipe() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        JsonAdaptedConsumption consumpReturn \u003d new JsonAdaptedConsumption(BENSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        Consumption consump \u003d new Consumption(BENSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertEquals(consump, consumpReturn.toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        JsonAdaptedConsumption consump \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                new JsonAdaptedConsumption(INVALID_NAME, VALID_INSTRUCTION, VALID_RECIPE_IMAGE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        VALID_INGREDIENT, VALID_CALORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, consump::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        JsonAdaptedConsumption consump \u003d new JsonAdaptedConsumption(null, VALID_INSTRUCTION,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                VALID_RECIPE_IMAGE, VALID_INGREDIENT, VALID_CALORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, consump::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void toModelType_invalidIngredient_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        JsonAdaptedConsumption consump \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                new JsonAdaptedConsumption(VALID_NAME, VALID_INSTRUCTION, VALID_RECIPE_IMAGE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        INVALID_INGREDIENT, VALID_CALORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String expectedMessage \u003d Ingredient.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, consump::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void toModelType_nullIngredient_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        JsonAdaptedConsumption consump \u003d new JsonAdaptedConsumption(VALID_NAME, VALID_INSTRUCTION,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                VALID_RECIPE_IMAGE, null, VALID_CALORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Ingredient.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, consump::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void toModelType_invalidCalories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        JsonAdaptedConsumption consump \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                new JsonAdaptedConsumption(VALID_NAME, VALID_INSTRUCTION, VALID_RECIPE_IMAGE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        VALID_INGREDIENT, INVALID_CALORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String expectedMessage \u003d Calories.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, consump::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void toModelType_nullCalories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        JsonAdaptedConsumption consump \u003d new JsonAdaptedConsumption(VALID_NAME, VALID_INSTRUCTION,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                VALID_RECIPE_IMAGE, VALID_INGREDIENT, null, VALID_TAGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Calories.class.getSimpleName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, consump::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        JsonAdaptedConsumption consump \u003d new JsonAdaptedConsumption(VALID_NAME, VALID_INSTRUCTION,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                VALID_RECIPE_IMAGE, VALID_INGREDIENT, null, invalidTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertThrows(IllegalValueException.class, consump::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 72,
      "daongochieu2810": 3,
      "jiaqi20": 8,
      "oliviajohansen": 1,
      "caitlinjee": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedRecipeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.storage.JsonAdaptedRecipe.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.commons.Calories;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class JsonAdaptedRecipeTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final ArrayList\u003cIngredient\u003e INVALID_INGREDIENT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            new ArrayList\u003c\u003e(Arrays.asList(new Ingredient[]{new Ingredient(\"@olive oil\", \"\")}));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final int INVALID_CALORIES \u003d -1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final ArrayList\u003cIngredient\u003e VALID_INGREDIENT \u003d BENSON.getIngredient();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final int VALID_CALORIES \u003d BENSON.getCalories().value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    private static final String VALID_INSTRUCTION \u003d BENSON.getInstruction();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    private static final String VALID_RECIPE_IMAGE \u003d BENSON.getRecipeImage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void toModelType_validRecipeDetails_returnsRecipe() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(BENSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertEquals(BENSON, recipe.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                new JsonAdaptedRecipe(INVALID_NAME, VALID_INSTRUCTION, VALID_RECIPE_IMAGE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        VALID_INGREDIENT, VALID_CALORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(null, VALID_INSTRUCTION, VALID_RECIPE_IMAGE,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                VALID_INGREDIENT, VALID_CALORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void toModelType_invalidIngredient_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                new JsonAdaptedRecipe(VALID_NAME, VALID_INSTRUCTION, VALID_RECIPE_IMAGE,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        INVALID_INGREDIENT, VALID_CALORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String expectedMessage \u003d Ingredient.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void toModelType_nullIngredient_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(VALID_NAME, VALID_INSTRUCTION, VALID_RECIPE_IMAGE,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                null, VALID_CALORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Ingredient.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void toModelType_invalidCalories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "                new JsonAdaptedRecipe(VALID_NAME, VALID_INSTRUCTION,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                        VALID_RECIPE_IMAGE, VALID_INGREDIENT, INVALID_CALORIES, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String expectedMessage \u003d Calories.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void toModelType_nullCalories_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(VALID_NAME, VALID_INSTRUCTION,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                VALID_RECIPE_IMAGE, VALID_INGREDIENT, null, VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Calories.class.getSimpleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        JsonAdaptedConsumption consump \u003d new JsonAdaptedConsumption(VALID_NAME, VALID_INSTRUCTION,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                VALID_RECIPE_IMAGE, VALID_INGREDIENT, null, invalidTags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        assertThrows(IllegalValueException.class, consump::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 20,
      "daongochieu2810": 23,
      "jiaqi20": 8,
      "oliviajohansen": 1,
      "caitlinjee": 19,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableWishfulShrinkingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/*import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.WishfulShrinking;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.testutil.TypicalRecipes;*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class JsonSerializableWishfulShrinkingTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            \"data\", \"JsonSerializableWishfulShrinkingTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private static final Path TYPICAL_RECIPES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalRecipesWishfulShrinking.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private static final Path INVALID_RECIPE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidRecipeWishfulShrinking.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private static final Path DUPLICATE_RECIPE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateRecipeWishfulShrinking.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void toModelType_typicalRecipesFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        JsonSerializableWishfulShrinking dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_RECIPES_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                JsonSerializableWishfulShrinking.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        WishfulShrinking wishfulShrinkingFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        WishfulShrinking typicalRecipesWishfulShrinking \u003d TypicalRecipes.getTypicalWishfulShrinking();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        assertEquals(wishfulShrinkingFromFile, typicalRecipesWishfulShrinking);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void toModelType_invalidRecipeFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        JsonSerializableWishfulShrinking dataFromFile \u003d JsonUtil.readJsonFile(INVALID_RECIPE_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                JsonSerializableWishfulShrinking.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void toModelType_duplicateRecipes_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        JsonSerializableWishfulShrinking dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_RECIPE_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                JsonSerializableWishfulShrinking.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableWishfulShrinking.MESSAGE_DUPLICATE_RECIPE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 2,
      "daongochieu2810": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        userPrefs.setWishfulShrinkingFilePath(Paths.get(\"wishfulShrinking.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonWishfulShrinkingStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalWishfulShrinking;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "//import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.ReadOnlyWishfulShrinking;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.WishfulShrinking;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class JsonWishfulShrinkingStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonWishfulShrinkingStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void readWishfulShrinking_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readWishfulShrinking(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private java.util.Optional\u003cReadOnlyWishfulShrinking\u003e readWishfulShrinking(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return new JsonWishfulShrinkingStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                .readWishfulShrinking(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertFalse(readWishfulShrinking(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readWishfulShrinking(\"notJsonFormatWishfulShrinking.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void readWishfulShrinking_invalidRecipeWishfulShrinking_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readWishfulShrinking(\"invalidRecipeWishfulShrinking.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void readWishfulShrinking_invalidAndValidRecipeWishfulShrinking_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        readWishfulShrinking(\"invalidAndValidRecipeWishfulShrinking.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void readAndSaveWishfulShrinking_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempWishfulShrinking.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        WishfulShrinking original \u003d getTypicalWishfulShrinking();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        JsonWishfulShrinkingStorage jsonWishfulShrinkingStorage \u003d new JsonWishfulShrinkingStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        jsonWishfulShrinkingStorage.saveWishfulShrinking(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ReadOnlyWishfulShrinking readBack \u003d jsonWishfulShrinkingStorage.readWishfulShrinking(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // assertEquals(original, new WishfulShrinking(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        original.addRecipe(HOON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        original.removeRecipe(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        jsonWishfulShrinkingStorage.saveWishfulShrinking(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        readBack \u003d jsonWishfulShrinkingStorage.readWishfulShrinking(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // assertEquals(original, new WishfulShrinking(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        original.addRecipe(IDA);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        jsonWishfulShrinkingStorage.saveWishfulShrinking(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        readBack \u003d jsonWishfulShrinkingStorage.readWishfulShrinking().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        // assertEquals(original, new WishfulShrinking(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void saveWishfulShrinking_nullWishfulShrinking_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveWishfulShrinking(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Saves {@code wishfulShrinking} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private void saveWishfulShrinking(ReadOnlyWishfulShrinking wishfulShrinking, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            new JsonWishfulShrinkingStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "                    .saveWishfulShrinking(wishfulShrinking, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void saveWishfulShrinking_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveWishfulShrinking(new WishfulShrinking(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 3,
      "daongochieu2810": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalWishfulShrinking;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.ReadOnlyWishfulShrinking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.WishfulShrinking;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        JsonWishfulShrinkingStorage wishfulShrinkingStorage \u003d new JsonWishfulShrinkingStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        storageManager \u003d new StorageManager(wishfulShrinkingStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public void wishfulShrinkingReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "         * {@link JsonWishfulShrinkingStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonWishfulShrinkingStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        WishfulShrinking original \u003d getTypicalWishfulShrinking();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        storageManager.saveWishfulShrinking(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ReadOnlyWishfulShrinking retrieved \u003d storageManager.readWishfulShrinking().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        //assertEquals(original, new WishfulShrinking(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public void getWishfulShrinkingFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        assertNotNull(storageManager.getWishfulShrinkingFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 3,
      "daongochieu2810": 11,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ConsumptionBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.commons.Calories;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class ConsumptionBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final Name DEFAULT_NAME \u003d new Name(\"Salad\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final ArrayList\u003cIngredient\u003e DEFAULT_INGREDIENTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            new ArrayList\u003c\u003e(List.of(new Ingredient(\"Veggies\", \"1 cup\"), new Ingredient(\"veggies\", \"1 cup\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final Calories DEFAULT_CALORIES \u003d new Calories(10);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final String DEFAULT_INSTRUCTION \u003d \"instruction\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private static final String DEFAULT_RECIPE_IMAGE \u003d \"images/healthy1.jpg\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private static final Set\u003cTag\u003e DEFAULT_TAGS \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Recipe DEFAULT_RECIPE \u003d new Recipe(DEFAULT_NAME, DEFAULT_INSTRUCTION, DEFAULT_RECIPE_IMAGE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            DEFAULT_INGREDIENTS, DEFAULT_CALORIES, DEFAULT_TAGS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private Recipe recipe;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Creates a {@code IngredientBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public ConsumptionBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        recipe \u003d DEFAULT_RECIPE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Initializes the IngredientBuilder with the data of {@code ingredientToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public ConsumptionBuilder(Consumption consumptionToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        recipe \u003d consumptionToCopy.getRecipe();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Sets the {@code value} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public ConsumptionBuilder withRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Builds Ingredient"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * @return built Ingredient"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public Consumption build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return new Consumption(recipe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 50,
      "oliviajohansen": 1,
      "caitlinjee": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditRecipeDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.commons.Calories;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * A utility class to help with building EditRecipeDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class EditRecipeDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private EditRecipeDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public EditRecipeDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public EditRecipeDescriptorBuilder(EditRecipeDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this.descriptor \u003d new EditRecipeDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns an {@code EditRecipeDescriptor} with fields containing {@code recipe}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public EditRecipeDescriptorBuilder(Recipe recipe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        descriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        descriptor.setName(recipe.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        descriptor.setIngredient(recipe.getIngredient());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        descriptor.setInstruction(recipe.getInstruction());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        descriptor.setRecipeImage(recipe.getRecipeImage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        descriptor.setTags(recipe.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Sets the {@code Name} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public EditRecipeDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Sets the {@code Ingredient} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public EditRecipeDescriptorBuilder withIngredient(String ingredientString, String ingredientQuantity) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String[] ingredientsToken \u003d ingredientString.split(\",\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String[] ingredientsQuantity \u003d ingredientQuantity.split(\",\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredientsToken.length; i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            ingredients.add(new Ingredient(ingredientsToken[i].trim(), ingredientsQuantity[i].trim()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        descriptor.setIngredient(ingredients);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Sets the {@code Calories} of the {@code EditRecipeDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public EditRecipeDescriptorBuilder withCalories(Integer calories) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        descriptor.setCalories(new Calories(calories));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditRecipeDescriptor}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public EditRecipeDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public EditRecipeDescriptor build() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 8,
      "daongochieu2810": 57,
      "jiaqi20": 2,
      "oliviajohansen": 3,
      "caitlinjee": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/IngredientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * A utility class to help with building Ingredient objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class IngredientBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"food\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"2g\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    private String quantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Creates a {@code IngredientBuilder} with the default details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public IngredientBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        value \u003d DEFAULT_VALUE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        quantity \u003d DEFAULT_QUANTITY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Initializes the IngredientBuilder with the data of {@code ingredientToCopy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public IngredientBuilder(Ingredient ingredientToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        value \u003d ingredientToCopy.getValue();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Sets the {@code value} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public IngredientBuilder withValue(String value) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        this.quantity \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     * Sets the {@code value} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public IngredientBuilder withValues(String value, String quantity) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Builds Ingredient"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * @return built Ingredient"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public Ingredient build() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        return new Ingredient(value, quantity);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oliviajohansen": 14,
      "caitlinjee": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/IngredientUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.AddIngredientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * A utility class for Ingredient."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class IngredientUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Returns an add command string for adding the {@code ingredient}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static String getAddIngredientCommand(Ingredient ingredient) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return AddIngredientCommand.COMMAND_WORD + \" \" + getIngredientDetails(ingredient);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Returns the part of command string for the given {@code ingredient}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static String getIngredientDetails(Ingredient ingredient) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        sb.append(PREFIX_INGREDIENT + ingredient.getValue() + \" -\" + ingredient.getQuantity());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Returns the part of command string for the given {@code EditRecipeDescriptor}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static String getEditRecipeDescriptorDetails(EditRecipeDescriptor descriptor) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        descriptor.getIngredient()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                .ifPresent(ingredients -\u003e sb.append(PREFIX_INGREDIENT)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                        .append(ingredients.stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                                .map(item -\u003e item.getValue())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                                .reduce(\"\", (a, b) -\u003e b.equals(\"\") ? a : b + \", \" + a)).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 5,
      "oliviajohansen": 1,
      "caitlinjee": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecipeBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.commons.Calories;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * A utility class to help with building Recipe objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class RecipeBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final ArrayList\u003cIngredient\u003e DEFAULT_INGREDIENTS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            new ArrayList\u003c\u003e(List.of(new Ingredient(\"Veggies\", \"\"), new Ingredient(\"Snakes\", \"\")));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Integer DEFAULT_CALORIES \u003d 10;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public static final String DEFAULT_INSTRUCTION \u003d \"instruction\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public static final String DEFAULT_RECIPE_IMAGE \u003d \"images/healthy1.jpg\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private ArrayList\u003cIngredient\u003e ingredients;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private Calories calories;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    private String instruction;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    private String recipeImage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Creates a {@code RecipeBuilder} with the default details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public RecipeBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ingredients \u003d DEFAULT_INGREDIENTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        calories \u003d new Calories(DEFAULT_CALORIES);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        instruction \u003d DEFAULT_INSTRUCTION;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        recipeImage \u003d DEFAULT_RECIPE_IMAGE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Initializes the RecipeBuilder with the data of {@code recipeToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public RecipeBuilder(Recipe recipeToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        name \u003d recipeToCopy.getName();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ingredients \u003d recipeToCopy.getIngredient();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        calories \u003d recipeToCopy.getCalories();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        instruction \u003d recipeToCopy.getInstruction();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        recipeImage \u003d recipeToCopy.getRecipeImage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(recipeToCopy.getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Sets the {@code Name} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public RecipeBuilder withName(String name) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Sets the {@code Ingredient} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public RecipeBuilder withIngredient(String ingredientString, String ingredientQuantity) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        String[] ingredientsToken \u003d ingredientString.split(\",\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "        String[] ingredientsQuantity \u003d ingredientQuantity.split(\",\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        ArrayList\u003cIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredientsToken.length; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            ingredients.add(new Ingredient(ingredientsToken[i].trim(), ingredientsQuantity[i].trim()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Sets the {@code Calories} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public RecipeBuilder withCalories(Integer calories) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        this.calories \u003d new Calories(calories);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "     * Sets the instruction of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public RecipeBuilder withInstruction(String instruction) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        this.instruction \u003d instruction;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "     * Sets the recipe image of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    public RecipeBuilder withRecipeImage(String recipeImage) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        this.recipeImage \u003d recipeImage;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public RecipeBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Builds Recipe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * @return built Recipe"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public Recipe build() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return new Recipe(name, instruction, recipeImage, ingredients, calories, tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 13,
      "daongochieu2810": 64,
      "jiaqi20": 24,
      "oliviajohansen": 4,
      "caitlinjee": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecipeUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALORIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INSTRUCTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_IMAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditRecipeDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * A utility class for Recipe."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class RecipeUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns an add command string for adding the {@code recipe}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static String getAddRecipeCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return AddRecipeCommand.COMMAND_WORD + \" \" + getRecipeDetails(recipe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns the part of command string for the given {@code recipe}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static String getRecipeDetails(Recipe recipe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        sb.append(PREFIX_NAME + recipe.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        sb.append(PREFIX_INGREDIENT + recipe.getIngredient().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                .map(item -\u003e item.getValue())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                .reduce(\"\", (a, b) -\u003e b.equals(\"\") ? a : b + \", \" + a) + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        sb.append(PREFIX_CALORIES + String.valueOf(recipe.getCalories().value) + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        sb.append(PREFIX_INSTRUCTION + recipe.getInstruction() + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        recipe.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns the part of command string for the given {@code EditRecipeDescriptor}\u0027s details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static String getEditRecipeDescriptorDetails(EditRecipeDescriptor descriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        descriptor.getIngredient()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                .ifPresent(ingredients -\u003e sb.append(PREFIX_INGREDIENT)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                        .append(ingredients.stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                                .map(item -\u003e item.getValue())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "                                .reduce(\"\", (a, b) -\u003e b.equals(\"\") ? a : b + \", \" + a)).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        descriptor.getInstruction().ifPresent(instr -\u003e sb.append(PREFIX_INSTRUCTION).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaqi20"
        },
        "content": "        descriptor.getRecipeImage().ifPresent(img -\u003e sb.append(PREFIX_RECIPE_IMAGE).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        descriptor.getCalories().ifPresent(cal -\u003e sb.append(PREFIX_CALORIES).append(cal.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 23,
      "jiaqi20": 4,
      "caitlinjee": 17,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns the middle index of the recipe in the {@code model}\u0027s recipe list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return Index.fromOneBased(model.getFilteredRecipeList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns the last index of the recipe in the {@code model}\u0027s recipe list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return Index.fromOneBased(model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns the recipe in the {@code model}\u0027s recipe list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static Recipe getRecipe(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return model.getFilteredRecipeList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalConsumption.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.WishfulShrinking;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.consumption.Consumption;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "public class TypicalConsumption {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    // Recipe"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Recipe ALICE_RECIPE \u003d new RecipeBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withIngredient(\"94351253\", \"1 cup\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Recipe BENSON_RECIPE \u003d new RecipeBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withIngredient(\"98765432\", \"1 cup\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Recipe CARL_RECIPE \u003d new RecipeBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withIngredient(\"95352563\", \"1 cup\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Recipe DANIEL_RECIPE \u003d new RecipeBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withIngredient(\"87652533\", \"1 cup\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Recipe ELLE_RECIPE \u003d new RecipeBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withIngredient(\"9482224\", \"1 cup\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Recipe FIONA_RECIPE \u003d new RecipeBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withIngredient(\"9482427\", \"1 cup\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Recipe GEORGE_RECIPE \u003d new RecipeBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withIngredient(\"9482442\", \"1 cup\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Recipe HOON_RECIPE \u003d new RecipeBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withIngredient(\"8482424\", \"1 cup\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Recipe IDA_RECIPE \u003d new RecipeBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withIngredient(\"8482131\", \"1 cup\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    // Manually added - Recipe\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Recipe AMY_RECIPE \u003d new RecipeBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            .withIngredient(VALID_INGREDIENT_AMY, VALID_QUANTITY_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(VALID_CALORIES_AMY).withTags(VALID_TAG_AMY).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Recipe BOB_RECIPE \u003d new RecipeBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            .withIngredient(VALID_INGREDIENT_BOB, VALID_QUANTITY_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(VALID_CALORIES_BOB).withTags(VALID_TAG_BOB).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Consumption ALICE \u003d new ConsumptionBuilder().withRecipe(ALICE_RECIPE).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Consumption BENSON \u003d new ConsumptionBuilder().withRecipe(BENSON_RECIPE).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Consumption CARL \u003d new ConsumptionBuilder().withRecipe(CARL_RECIPE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Consumption DANIEL \u003d new ConsumptionBuilder().withRecipe(DANIEL_RECIPE).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Consumption ELLE \u003d new ConsumptionBuilder().withRecipe(ELLE_RECIPE).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Consumption FIONA \u003d new ConsumptionBuilder().withRecipe(FIONA_RECIPE).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Consumption GEORGE \u003d new ConsumptionBuilder().withRecipe(GEORGE_RECIPE).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Consumption HOON \u003d new ConsumptionBuilder().withRecipe(HOON_RECIPE).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Consumption IDA \u003d new ConsumptionBuilder().withRecipe(IDA_RECIPE).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    // Manually added - Consumption\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Consumption AMY \u003d new ConsumptionBuilder().withRecipe(AMY_RECIPE).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Consumption BOB \u003d new ConsumptionBuilder().withRecipe(BOB_RECIPE).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private TypicalConsumption() {} // prevents instantiation"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     * Returns an {@code WishfulShrinking} with all the typical consumption."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static WishfulShrinking getTypicalWishfulShrinking() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        WishfulShrinking ab \u003d new WishfulShrinking();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        for (Consumption consumption : getTypicalConsumption()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "            ab.addConsumption(consumption);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static List\u003cConsumption\u003e getTypicalConsumption() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 63,
      "oliviajohansen": 12,
      "caitlinjee": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final Index INDEX_FIRST_RECIPE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final Index INDEX_SECOND_RECIPE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static final Index INDEX_THIRD_RECIPE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Index INDEX_FIRST_INGREDIENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Index INDEX_SECOND_INGREDIENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Index INDEX_THIRD_INGREDIENT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final Index INDEX_FIRST_CONSUMPTION \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final Index INDEX_SECOND_CONSUMPTION \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final Index INDEX_THIRD_CONSUMPTION \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daongochieu2810": 3,
      "oliviajohansen": 3,
      "caitlinjee": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIngredients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.WishfulShrinking;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import seedu.address.model.recipe.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " * A utility class containing a list of {@code Ingredient} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "public class TypicalIngredients {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final Ingredient ALICE \u003d new IngredientBuilder().withValue(\"Alice Pauline\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final Ingredient BENSON \u003d new IngredientBuilder().withValue(\"Benson Meier\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final Ingredient CARL \u003d new IngredientBuilder().withValue(\"Carl Kurz\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final Ingredient DANIEL \u003d new IngredientBuilder().withValue(\"Daniel Meier\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final Ingredient ELLE \u003d new IngredientBuilder().withValue(\"Elle Meyer\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final Ingredient FIONA \u003d new IngredientBuilder().withValue(\"Fiona Kunz\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final Ingredient GEORGE \u003d new IngredientBuilder().withValue(\"George Best\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Ingredient VALID_INGREDIENT1 \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            new IngredientBuilder().withValues(\"apple\", \"2 slices\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Ingredient VALID_INGREDIENT2 \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            new IngredientBuilder().withValues(\"banana\", \"200g\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final Ingredient HOON \u003d new IngredientBuilder().withValue(\"Hoon Meier\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final Ingredient IDA \u003d new IngredientBuilder().withValue(\"Ida Mueller\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    // Manually added - Ingredient\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Ingredient AMY \u003d new IngredientBuilder().withValue(VALID_INGREDIENT_AMY).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public static final Ingredient BOB \u003d new IngredientBuilder().withValue(VALID_INGREDIENT_BOB).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    private TypicalIngredients() {} // prevents instantiation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     * Returns an {@code WishfulShrinking} with all the typical ingredients."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static WishfulShrinking getTypicalWishfulShrinking() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        WishfulShrinking ab \u003d new WishfulShrinking();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        for (Ingredient ingredient : getTypicalIngredients()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            ab.addIngredient(ingredient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static List\u003cIngredient\u003e getTypicalIngredients() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 4,
      "oliviajohansen": 5,
      "caitlinjee": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRecipes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CALORIES_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INSTRUCTION_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INSTRUCTION_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RECIPE_IMAGE_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RECIPE_IMAGE_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.WishfulShrinking;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * A utility class containing a list of {@code Recipe} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class TypicalRecipes {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Recipe ALICE \u003d new RecipeBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withIngredient(\"apple\", \"1 cup\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Recipe BENSON \u003d new RecipeBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            .withIngredient(\"98765432\", \"1 cup\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Recipe CARL \u003d new RecipeBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            .withIngredient(\"95352563\", \"1 cup\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Recipe DANIEL \u003d new RecipeBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            .withIngredient(\"87652533\", \"1 cup\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Recipe ELLE \u003d new RecipeBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            .withIngredient(\"9482224\", \"1 cup\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Recipe FIONA \u003d new RecipeBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            .withIngredient(\"9482427\", \"1 cup\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "    public static final Recipe GEORGE \u003d new RecipeBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oliviajohansen"
        },
        "content": "            .withIngredient(\"9482442\", \"1 cup\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final Recipe HOON \u003d new RecipeBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withIngredient(\"8482424\", \"1 cup\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final Recipe IDA \u003d new RecipeBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withIngredient(\"8482131\", \"1 cup\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(10).withInstruction(\"instruction\").withRecipeImage(\"images/healthy1\").withTags(\"healthy\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    // Manually added - Recipe\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final Recipe AMY \u003d new RecipeBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withIngredient(VALID_INGREDIENT_AMY, VALID_QUANTITY_AMY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "           .withCalories(VALID_CALORIES_AMY).withInstruction(VALID_INSTRUCTION_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withRecipeImage(VALID_RECIPE_IMAGE_AMY).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "    public static final Recipe BOB \u003d new RecipeBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withIngredient(VALID_INGREDIENT_BOB, VALID_QUANTITY_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withCalories(VALID_CALORIES_BOB).withInstruction(VALID_INSTRUCTION_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withRecipeImage(VALID_RECIPE_IMAGE_BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "caitlinjee"
        },
        "content": "            .withTags(VALID_TAG_BOB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    private TypicalRecipes() {} // prevents instantiation"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Returns an {@code WishfulShrinking} with all the typical recipes."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static WishfulShrinking getTypicalWishfulShrinking() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        WishfulShrinking ab \u003d new WishfulShrinking();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        for (Recipe recipe : getTypicalRecipes()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "            ab.addRecipe(recipe);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public static List\u003cRecipe\u003e getTypicalRecipes() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 2,
      "daongochieu2810": 16,
      "oliviajohansen": 13,
      "caitlinjee": 39,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/WishfulShrinkingBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.WishfulShrinking;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": " * A utility class to help with building WishfulShrinking objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " *     {@code WishfulShrinking ab \u003d new WishfulShrinkingBuilder().withRecipe(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "public class WishfulShrinkingBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    private WishfulShrinking wishfulShrinking;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public WishfulShrinkingBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        wishfulShrinking \u003d new WishfulShrinking();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "    public WishfulShrinkingBuilder(WishfulShrinking wishfulShrinking) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        this.wishfulShrinking \u003d wishfulShrinking;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     * Adds a new {@code Recipe} to the {@code WishfulShrinking} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public WishfulShrinkingBuilder withRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        wishfulShrinking.addRecipe(recipe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    public WishfulShrinking build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TianYong-Goh"
        },
        "content": "        return wishfulShrinking;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daongochieu2810"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TianYong-Goh": 7,
      "daongochieu2810": 27
    }
  }
]
